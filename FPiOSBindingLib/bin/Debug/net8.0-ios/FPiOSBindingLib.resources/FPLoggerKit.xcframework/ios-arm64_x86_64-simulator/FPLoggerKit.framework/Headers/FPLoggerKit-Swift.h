#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef FPLOGGERKIT_SWIFT_H
#define FPLOGGERKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPLoggerKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC11FPLoggerKit9BobLogger")
@interface BobLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
@protocol LoggerMessageContext;
@class NSString;
@protocol LoggingStatus;

/// Logging system definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit6Logger_")
@protocol Logger
/// Indicates if comms (commuincations) logging is enabled across all modules
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
/// Indicates if error level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an error level message to the log if the error level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes an error level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if warn level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes a warn level message to the log if the warn level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a warn level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if info level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an info level message to the log if the info level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes an info level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if debug level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes a debug level message to the log if the debug level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a debug level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if verbose level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an verbose level message to the log if the verbose level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a verbose level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Contains current logging status information
@property (nonatomic, readonly, strong) id <LoggingStatus> _Nonnull loggingStatus;
/// Writes a log message to the log regardless of the level
/// \param context - requestor context information 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@end


@interface BobLogger (SWIFT_EXTENSION(FPLoggerKit)) <Logger>
@property (nonatomic, readonly, strong) id <LoggingStatus> _Nonnull loggingStatus;
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@end

enum LogType : NSInteger;
@protocol LoggingDetails;

/// Defines the type and any details for a log appender
SWIFT_PROTOCOL("_TtP11FPLoggerKit11LoggingInfo_")
@protocol LoggingInfo
@property (nonatomic, readonly) enum LogType type;
@property (nonatomic, readonly, strong) id <LoggingDetails> _Nullable details;
@end


SWIFT_CLASS("_TtC11FPLoggerKit13BobLoggerInfo")
@interface BobLoggerInfo : NSObject <LoggingInfo>
@property (nonatomic, readonly) enum LogType type;
@property (nonatomic, readonly, strong) id <LoggingDetails> _Nullable details;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines information for the active logger
SWIFT_PROTOCOL("_TtP11FPLoggerKit13LoggingStatus_")
@protocol LoggingStatus
/// Represents information for each log appender
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
@end


SWIFT_CLASS("_TtC11FPLoggerKit15BobLoggerStatus")
@interface BobLoggerStatus : NSObject <LoggingStatus>
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Logger instance that does no actual logging.
/// This instance exists so that <code>LoggerManager</code> no longer defines its <code>logger</code> property as an implicitly unwrapped optional.
SWIFT_CLASS("_TtC11FPLoggerKit13DevNullLogger")
@interface DevNullLogger : NSObject <Logger>
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@property (nonatomic, strong) id <LoggingStatus> _Nonnull loggingStatus;
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FPLoggerKit19DevNullLoggerStatus")
@interface DevNullLoggerStatus : NSObject <LoggingStatus>
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Marker protocol for defining output specific details for a log appender
SWIFT_PROTOCOL("_TtP11FPLoggerKit14LoggingDetails_")
@protocol LoggingDetails
@end


SWIFT_CLASS("_TtC11FPLoggerKit18FileLoggingDetails")
@interface FileLoggingDetails : NSObject <LoggingDetails>
@property (nonatomic, copy) NSString * _Nonnull fileLocation;
@property (nonatomic, copy) NSString * _Nonnull currentFileName;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull archivedFileNames;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;

/// Options for file logging
SWIFT_CLASS("_TtC11FPLoggerKit17FileWriterOptions")
@interface FileWriterOptions : NSObject
- (nonnull instancetype)initWithFileLocation:(NSURL * _Nonnull)fileLocation daysToInclude:(NSInteger)daysToInclude daysToKeep:(NSInteger)daysToKeep fileNamePrefix:(NSString * _Nonnull)fileNamePrefix maximumFileSizeInBytes:(uint64_t)maximumFileSizeInBytes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int8_t, LogLevel, open) {
  LogLevelNone = 0,
  LogLevelError = 1,
  LogLevelWarn = 2,
  LogLevelInfo = 3,
  LogLevelDebug = 4,
  LogLevelVerbose = 5,
};


SWIFT_CLASS("_TtC11FPLoggerKit14LogLevelBridge")
@interface LogLevelBridge : NSObject
+ (enum LogLevel)logLevelFrom:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logging context definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit20LoggerMessageContext_")
@protocol LoggerMessageContext
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@end


SWIFT_CLASS("_TtC11FPLoggerKit17LogMessageContext")
@interface LogMessageContext : NSObject <LoggerMessageContext>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumeration for supported logging types
typedef SWIFT_ENUM(NSInteger, LogType, open) {
  LogTypeConsole = 0,
  LogTypeFile = 1,
  LogTypeStream = 2,
};



/// Logger Error Codes
SWIFT_CLASS("_TtC11FPLoggerKit19LoggerCodeConstants")
@interface LoggerCodeConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull loggerErrorDomain;)
+ (NSString * _Nonnull)loggerErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger loggerNotInitialized;)
+ (NSInteger)loggerNotInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger loggerAlreadyInitialized;)
+ (NSInteger)loggerAlreadyInitialized SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoggerOutput;
@protocol LoggerModule;

/// Logger Management
SWIFT_CLASS("_TtC11FPLoggerKit13LoggerManager")
@interface LoggerManager : NSObject
/// gets the logger
+ (id <Logger> _Nonnull)getLogger SWIFT_WARN_UNUSED_RESULT;
/// initializes the logger with the specified outputs and modules
+ (void)initializeLoggerWithLoggerOuput:(LoggerOutput * _Nonnull)loggerOuput modules:(NSArray<id <LoggerModule>> * _Nonnull)modules logCommEvents:(BOOL)logCommEvents;
/// nullifies the current logger
+ (void)deinitializeLogger;
+ (id <LoggingStatus> _Nonnull)getLoggingStatus SWIFT_WARN_UNUSED_RESULT;
/// returns a LoggerMessageContext for the specified module identifier and class name
+ (id <LoggerMessageContext> _Nonnull)loggerMessageContextFor:(NSUUID * _Nonnull)moduleIdentifier className:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// returns a LoggerModule for the specified module identifier, name and log level
+ (id <LoggerModule> _Nonnull)loggerModuleFor:(NSUUID * _Nonnull)moduleIdentifier name:(NSString * _Nonnull)name logLevel:(enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP11FPLoggerKit12LoggerModule_")
@protocol LoggerModule
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

@protocol LoggerOutputStream;

/// Loggger output options
SWIFT_CLASS("_TtC11FPLoggerKit12LoggerOutput")
@interface LoggerOutput : NSObject
/// include the console output
- (void)setConsoleOutput;
/// include a file output with the standard format
- (void)setFileOutputWithFileOptions:(FileWriterOptions * _Nonnull)fileOptions;
/// include a stream output of the standard format
- (void)setStreamOutputWithOutputStream:(id <LoggerOutputStream> _Nonnull)outputStream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logging context definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit18LoggerOutputStream_")
@protocol LoggerOutputStream
- (void)write:(NSString * _Nonnull)string;
@end




#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef FPLOGGERKIT_SWIFT_H
#define FPLOGGERKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPLoggerKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC11FPLoggerKit9BobLogger")
@interface BobLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
@protocol LoggerMessageContext;
@class NSString;
@protocol LoggingStatus;

/// Logging system definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit6Logger_")
@protocol Logger
/// Indicates if comms (commuincations) logging is enabled across all modules
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
/// Indicates if error level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an error level message to the log if the error level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes an error level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if warn level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes a warn level message to the log if the warn level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a warn level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if info level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an info level message to the log if the info level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes an info level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if debug level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes a debug level message to the log if the debug level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a debug level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Indicates if verbose level log messages will be sent to the log for the specified module
/// \param moduleIdentifier - unique identifier of the module to check 
///
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Writes an verbose level message to the log if the verbose level is set for the specified module
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Writes a verbose level message to the log if the error level is set for the specified module, otherwise writes a comms
/// entry to the log is comms logging is enables
/// \param context - requestor context information to determine if the message is processed or discarded as well as driving message content 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
/// Contains current logging status information
@property (nonatomic, readonly, strong) id <LoggingStatus> _Nonnull loggingStatus;
/// Writes a log message to the log regardless of the level
/// \param context - requestor context information 
///
/// \param methodName - name of the method making the request that appears in the log statement 
///
/// \param message - message that is logged 
///
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@end


@interface BobLogger (SWIFT_EXTENSION(FPLoggerKit)) <Logger>
@property (nonatomic, readonly, strong) id <LoggingStatus> _Nonnull loggingStatus;
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@end

enum LogType : NSInteger;
@protocol LoggingDetails;

/// Defines the type and any details for a log appender
SWIFT_PROTOCOL("_TtP11FPLoggerKit11LoggingInfo_")
@protocol LoggingInfo
@property (nonatomic, readonly) enum LogType type;
@property (nonatomic, readonly, strong) id <LoggingDetails> _Nullable details;
@end


SWIFT_CLASS("_TtC11FPLoggerKit13BobLoggerInfo")
@interface BobLoggerInfo : NSObject <LoggingInfo>
@property (nonatomic, readonly) enum LogType type;
@property (nonatomic, readonly, strong) id <LoggingDetails> _Nullable details;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines information for the active logger
SWIFT_PROTOCOL("_TtP11FPLoggerKit13LoggingStatus_")
@protocol LoggingStatus
/// Represents information for each log appender
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
@end


SWIFT_CLASS("_TtC11FPLoggerKit15BobLoggerStatus")
@interface BobLoggerStatus : NSObject <LoggingStatus>
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Logger instance that does no actual logging.
/// This instance exists so that <code>LoggerManager</code> no longer defines its <code>logger</code> property as an implicitly unwrapped optional.
SWIFT_CLASS("_TtC11FPLoggerKit13DevNullLogger")
@interface DevNullLogger : NSObject <Logger>
- (BOOL)isCommsLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isErrorEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)errorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsErrorWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isWarnEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)warnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsWarnWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isInfoEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)infoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsInfoWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isDebugEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)debugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsDebugWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (BOOL)isVerboseEnabledWithModuleIdentifier:(NSUUID * _Nonnull)moduleIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)verboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (void)commsVerboseWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
@property (nonatomic, strong) id <LoggingStatus> _Nonnull loggingStatus;
- (void)forceWithContext:(id <LoggerMessageContext> _Nonnull)context methodName:(NSString * _Nullable)methodName message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FPLoggerKit19DevNullLoggerStatus")
@interface DevNullLoggerStatus : NSObject <LoggingStatus>
@property (nonatomic, readonly, copy) NSArray<id <LoggingInfo>> * _Nonnull info;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Marker protocol for defining output specific details for a log appender
SWIFT_PROTOCOL("_TtP11FPLoggerKit14LoggingDetails_")
@protocol LoggingDetails
@end


SWIFT_CLASS("_TtC11FPLoggerKit18FileLoggingDetails")
@interface FileLoggingDetails : NSObject <LoggingDetails>
@property (nonatomic, copy) NSString * _Nonnull fileLocation;
@property (nonatomic, copy) NSString * _Nonnull currentFileName;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull archivedFileNames;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;

/// Options for file logging
SWIFT_CLASS("_TtC11FPLoggerKit17FileWriterOptions")
@interface FileWriterOptions : NSObject
- (nonnull instancetype)initWithFileLocation:(NSURL * _Nonnull)fileLocation daysToInclude:(NSInteger)daysToInclude daysToKeep:(NSInteger)daysToKeep fileNamePrefix:(NSString * _Nonnull)fileNamePrefix maximumFileSizeInBytes:(uint64_t)maximumFileSizeInBytes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int8_t, LogLevel, open) {
  LogLevelNone = 0,
  LogLevelError = 1,
  LogLevelWarn = 2,
  LogLevelInfo = 3,
  LogLevelDebug = 4,
  LogLevelVerbose = 5,
};


SWIFT_CLASS("_TtC11FPLoggerKit14LogLevelBridge")
@interface LogLevelBridge : NSObject
+ (enum LogLevel)logLevelFrom:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logging context definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit20LoggerMessageContext_")
@protocol LoggerMessageContext
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@end


SWIFT_CLASS("_TtC11FPLoggerKit17LogMessageContext")
@interface LogMessageContext : NSObject <LoggerMessageContext>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumeration for supported logging types
typedef SWIFT_ENUM(NSInteger, LogType, open) {
  LogTypeConsole = 0,
  LogTypeFile = 1,
  LogTypeStream = 2,
};



/// Logger Error Codes
SWIFT_CLASS("_TtC11FPLoggerKit19LoggerCodeConstants")
@interface LoggerCodeConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull loggerErrorDomain;)
+ (NSString * _Nonnull)loggerErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger loggerNotInitialized;)
+ (NSInteger)loggerNotInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger loggerAlreadyInitialized;)
+ (NSInteger)loggerAlreadyInitialized SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoggerOutput;
@protocol LoggerModule;

/// Logger Management
SWIFT_CLASS("_TtC11FPLoggerKit13LoggerManager")
@interface LoggerManager : NSObject
/// gets the logger
+ (id <Logger> _Nonnull)getLogger SWIFT_WARN_UNUSED_RESULT;
/// initializes the logger with the specified outputs and modules
+ (void)initializeLoggerWithLoggerOuput:(LoggerOutput * _Nonnull)loggerOuput modules:(NSArray<id <LoggerModule>> * _Nonnull)modules logCommEvents:(BOOL)logCommEvents;
/// nullifies the current logger
+ (void)deinitializeLogger;
+ (id <LoggingStatus> _Nonnull)getLoggingStatus SWIFT_WARN_UNUSED_RESULT;
/// returns a LoggerMessageContext for the specified module identifier and class name
+ (id <LoggerMessageContext> _Nonnull)loggerMessageContextFor:(NSUUID * _Nonnull)moduleIdentifier className:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// returns a LoggerModule for the specified module identifier, name and log level
+ (id <LoggerModule> _Nonnull)loggerModuleFor:(NSUUID * _Nonnull)moduleIdentifier name:(NSString * _Nonnull)name logLevel:(enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP11FPLoggerKit12LoggerModule_")
@protocol LoggerModule
@property (nonatomic, readonly, copy) NSUUID * _Nonnull moduleIdentifier;
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

@protocol LoggerOutputStream;

/// Loggger output options
SWIFT_CLASS("_TtC11FPLoggerKit12LoggerOutput")
@interface LoggerOutput : NSObject
/// include the console output
- (void)setConsoleOutput;
/// include a file output with the standard format
- (void)setFileOutputWithFileOptions:(FileWriterOptions * _Nonnull)fileOptions;
/// include a stream output of the standard format
- (void)setStreamOutputWithOutputStream:(id <LoggerOutputStream> _Nonnull)outputStream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logging context definition
SWIFT_PROTOCOL("_TtP11FPLoggerKit18LoggerOutputStream_")
@protocol LoggerOutputStream
- (void)write:(NSString * _Nonnull)string;
@end




#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
