#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef IFCCCORE_SWIFT_H
#define IFCCCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iFCCCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AIDBrand, open) {
  AIDBrandMastercard = 1,
  AIDBrandVisa = 2,
  AIDBrandInterac = 3,
  AIDBrandAmex = 4,
  AIDBrandDiscover = 5,
  AIDBrandDnaUSDebit = 6,
  AIDBrandUnionPay = 7,
  AIDBrandJcb = 8,
};

typedef SWIFT_ENUM(NSInteger, DebitType, open) {
  DebitTypeNonDebitGlobalDebit = 0,
  DebitTypeUsCommonDebit = 1,
};



enum FPCoreEMVTag : uint32_t;
@class NSString;

SWIFT_CLASS("_TtC8iFCCCore14FPCoreChipData")
@interface FPCoreChipData : NSObject
@property (nonatomic, readonly) enum FPCoreEMVTag emvTag;
@property (nonatomic, readonly, copy) NSString * _Nonnull tagDescription;
@property (nonatomic, readonly) uint32_t id;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithEmvTag:(enum FPCoreEMVTag)emvTag value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(uint32_t)id value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8iFCCCore13FPCoreEMVData")
@interface FPCoreEMVData : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, FPCoreChipData *> * _Nonnull chipData;
@property (nonatomic, readonly, copy) NSString * _Nullable ksn;
@property (nonatomic, readonly, copy) NSString * _Nullable emvTlvData;
@property (nonatomic, readonly, copy) NSString * _Nullable last4PanDigits;
@property (nonatomic, readonly, copy) NSString * _Nullable redactedCardNumber;
@property (nonatomic, readonly, copy) NSString * _Nullable track2e;
- (nonnull instancetype)initWithChipData:(NSArray<FPCoreChipData *> * _Nonnull)chipData ksn:(NSString * _Nullable)ksn emvTlvData:(NSString * _Nullable)emvTlvData last4PanDigits:(NSString * _Nullable)last4PanDigits redactedCardNumber:(NSString * _Nullable)redactedCardNumber track2e:(NSString * _Nullable)track2e OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorResponseCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, FPCoreEMVTag, open) {
  FPCoreEMVTagUnknown = 0x00,
  FPCoreEMVTagIssuerIdentificationNumber = 0x42,
  FPCoreEMVTagApplicationIdentifier = 0x4F,
  FPCoreEMVTagApplicationLabel = 0x50,
  FPCoreEMVTagTrack1EquivalentData = 0x56,
  FPCoreEMVTagTrack2EquivalentData = 0x57,
  FPCoreEMVTagTrack3EquivalentData = 0x58,
  FPCoreEMVTagPan = 0x5A,
  FPCoreEMVTagIssuerScriptTemplate1 = 0x71,
  FPCoreEMVTagIssuerScriptTemplate2 = 0x72,
  FPCoreEMVTagApplicationInterchangeProfile = 0x82,
  FPCoreEMVTagDedicatedFileName = 0x84,
  FPCoreEMVTagApplicationPriorityIndicator = 0x87,
  FPCoreEMVTagAuthorizationCode = 0x89,
  FPCoreEMVTagAuthorizationResponseCode = 0x8A,
  FPCoreEMVTagCvmList = 0x8E,
  FPCoreEMVTagIssuerAuthenticationData = 0x91,
  FPCoreEMVTagApplicationFileLocator = 0x94,
  FPCoreEMVTagTerminalVerificationResults = 0x95,
  FPCoreEMVTagTransactionDate = 0x9A,
  FPCoreEMVTagTransactionStatusInformation = 0x9B,
  FPCoreEMVTagTransactionType = 0x9C,
  FPCoreEMVTagCardHolderName = 0x5F20,
  FPCoreEMVTagExpiryDate = 0x5F24,
  FPCoreEMVTagApplicationEffectiveDate = 0x5F25,
  FPCoreEMVTagIssuerCountryCode = 0x5F28,
  FPCoreEMVTagTransactionCurrencyCode = 0x5F2A,
  FPCoreEMVTagPreferredLanguages = 0x5F2D,
  FPCoreEMVTagServiceCode = 0x5F30,
  FPCoreEMVTagPanSequenceNumber = 0x5F34,
  FPCoreEMVTagTransactionCurrencyExponent = 0x5F36,
  FPCoreEMVTagBic = 0x5F54,
  FPCoreEMVTagIssuerCountryCode2 = 0x5F55,
  FPCoreEMVTagIssuerCountryCode3 = 0x5F56,
  FPCoreEMVTagAmountAuthorized = 0x9F02,
  FPCoreEMVTagAmountOther = 0x9F03,
  FPCoreEMVTagTerminalApplicationIdentifier = 0x9F06,
  FPCoreEMVTagApplicationUsageControl = 0x9F07,
  FPCoreEMVTagApplicationVersionNumberICC = 0x9F08,
  FPCoreEMVTagApplicationVersionNumberTerminal = 0x9F09,
  FPCoreEMVTagCardholderNameExtended = 0x9F0B,
  FPCoreEMVTagIssuerActionCodeDefault = 0x9F0D,
  FPCoreEMVTagIssuerActionCodeDenial = 0x9F0E,
  FPCoreEMVTagIssuerActionCodeOnline = 0x9F0F,
  FPCoreEMVTagIssuerApplicationData = 0x9F10,
  FPCoreEMVTagIssuerCodeTableIndex = 0x9F11,
  FPCoreEMVTagApplicationPreferredName = 0x9F12,
  FPCoreEMVTagLowerConsecutiveOfflineLimit = 0x9F14,
  FPCoreEMVTagPinTryCount = 0x9F17,
  FPCoreEMVTagTerminalCountryCode = 0x9F1A,
  FPCoreEMVTagTerminalFloorLimit = 0x9F1B,
  FPCoreEMVTagInterfaceDeviceSerialNumber = 0x9F1E,
  FPCoreEMVTagTrack1DiscretionaryData = 0x9F1F,
  FPCoreEMVTagTrack2DiscretionaryData = 0x9F20,
  FPCoreEMVTagTransactionTime = 0x9F21,
  FPCoreEMVTagPaymentAccountReference = 0x9F24,
  FPCoreEMVTagApplicationCryptogram = 0x9F26,
  FPCoreEMVTagCryptogramInformationData = 0x9F27,
  FPCoreEMVTagTerminalCapabilities = 0x9F33,
  FPCoreEMVTagCvmResults = 0x9F34,
  FPCoreEMVTagTerminalType = 0x9F35,
  FPCoreEMVTagApplicationTransactionCounter = 0x9F36,
  FPCoreEMVTagUnpredictableNumber = 0x9F37,
  FPCoreEMVTagPosEntryMode = 0x9F39,
  FPCoreEMVTagAdditionalTerminalCapabilities = 0x9F40,
  FPCoreEMVTagTransactionSequenceCounter = 0x9F41,
  FPCoreEMVTagApplicationCurrencyCode = 0x9F42,
  FPCoreEMVTagApplicationCurrencyExponent = 0x9F44,
  FPCoreEMVTagApplicationCurrencyCodeDRDO = 0x9F51,
  FPCoreEMVTagTransactionCategoryCode1Visa = 0x9F53,
  FPCoreEMVTagTransactionCategoryCode2Visa = 0x9F5B,
  FPCoreEMVTagAvailableOfflineSpendingAmount = 0x9F5D,
  FPCoreEMVTagTerminalTransactionQualifiers = 0x9F66,
  FPCoreEMVTagTrack2NATCorMSDOffset = 0x9F67,
  FPCoreEMVTagTrack2DataMastercardOrCardCVMLimitOrTrack2DataBinary = 0x9F6B,
  FPCoreEMVTagCardTransactionQualifiers = 0x9F6C,
  FPCoreEMVTagEmvProprietaryTag = 0x9F6D,
  FPCoreEMVTagThirdPartyData = 0x9F6E,
  FPCoreEMVTagProtectedDataEnvelope2MobileCVMResults = 0x9F71,
  FPCoreEMVTagCustomerExclusiveDataMerchantCustomData = 0x9F7C,
  FPCoreEMVTagTerminalActionCodeDefault = 0xDF03,
  FPCoreEMVTagTerminalActionCodeDenial = 0xDF04,
  FPCoreEMVTagTerminalActionCodeOnline = 0xDF05,
  FPCoreEMVTagThresholdValue = 0xDF07,
  FPCoreEMVTagTargetPercentage = 0xDF08,
  FPCoreEMVTagMaxTargetPercentage = 0xDF09,
  FPCoreEMVTagWrapperforIssuerScriptTagWithIncorrectLength = 0xDF0C,
  FPCoreEMVTagIssuerScriptResults = 0xDF11,
  FPCoreEMVTagAuthorizationResponseCodeList = 0xDF16,
  FPCoreEMVTagTerminalDecisionafterGenerateAC = 0xDF31,
  FPCoreEMVTagCvmoutResult = 0xDF38,
  FPCoreEMVTagOnlinePINBlock = 0xDF4F,
  FPCoreEMVTagOnlinePINSMID = 0xDF4E,
  FPCoreEMVTagAmexExpresspayPseudoTrack2 = 0xDF46,
  FPCoreEMVTagDiscoverDpasPseudoTrack2 = 0xDF57,
  FPCoreEMVTagPayPassTransactionOutcome = 0xDF6D,
  FPCoreEMVTagOutcomeParameterSet = 0xDF8129,
  FPCoreEMVTagTransactionPINData = 0x99,
  FPCoreEMVTagAccountType = 0x1000,
  FPCoreEMVTagPinEntryRequired = 0x1001,
  FPCoreEMVTagSignatureRequired = 0x1002,
  FPCoreEMVTagConfirmationResponseCode = 0x1003,
  FPCoreEMVTagHostResponseAvailable = 0x1004,
  FPCoreEMVTagTransactionType2 = 0x1005,
  FPCoreEMVTagAuthorizationResponseMAC = 0x1007,
  FPCoreEMVTagAuthorizationResponseTerminalSerialNumber = 0x1008,
  FPCoreEMVTagAuthorizationResponseBase24ResponseCode = 0x1009,
  FPCoreEMVTagAuthorizationResponseApprovalCode = 0x100A,
  FPCoreEMVTagAuthorizationResponseRetrievalCode = 0x100B,
  FPCoreEMVTagAuthorizationResponseMACSessionKey = 0x100C,
  FPCoreEMVTagAuthorizationResponsePINSessionKey = 0x100D,
  FPCoreEMVTagSelectedTransactionLanguge = 0x100E,
  FPCoreEMVTagOfflinePINEntrySuccess = 0x100F,
  FPCoreEMVTagErrorResponseCode = 0x1010,
  FPCoreEMVTagSpecialCaseAuthorization = 0x1011,
  FPCoreEMVTagContactlessTransactionOutcome = 0x1012,
  FPCoreEMVTagContactlessProfileUsed = 0x1013,
  FPCoreEMVTagCardPaymentType = 0x1014,
  FPCoreEMVTagSuncor = 0x1015,
  FPCoreEMVTagCommonAIDFlagUS = 0x1016,
  FPCoreEMVTagMsrTrack1 = 0x1017,
  FPCoreEMVTagMsrTrack2 = 0x1018,
  FPCoreEMVTagMsrTrack3 = 0x1019,
  FPCoreEMVTagMsrFallback = 0x101A,
  FPCoreEMVTagContactlessOnlinePINCVM = 0x101B,
  FPCoreEMVTagContactlessNoCVM = 0x101C,
  FPCoreEMVTagContactlessMobilePINCVMPerformed = 0x101D,
  FPCoreEMVTagContactlessMobileCVMResults = 0x101E,
  FPCoreEMVTagMerchantCouponData = 0x1020,
  FPCoreEMVTagCardPaymentType2 = 0x9000,
  FPCoreEMVTagCardEntryMode = 0x9001,
  FPCoreEMVTagMaskedPAN = 0xFF1D,
  FPCoreEMVTagTrack1e = 0xFF1E,
  FPCoreEMVTagTrack2e = 0xFF1F,
  FPCoreEMVTagEtb = 0xFF20,
  FPCoreEMVTagTrack3e = 0xFF21,
};


SWIFT_CLASS("_TtC8iFCCCore16FPCoreEMVTagUtil")
@interface FPCoreEMVTagUtil : NSObject
+ (enum FPCoreEMVTag)tagFromRawValue:(uint32_t)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)descriptionWithEmvTag:(enum FPCoreEMVTag)emvTag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAmountDOLTag:(enum FPCoreEMVTag)tag SWIFT_WARN_UNUSED_RESULT;
+ (enum FPCoreEMVTag)getAmountDOLTag:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ForceCashback, open) {
  ForceCashbackPrompt = 0,
  ForceCashbackForce = 1,
};

enum PINBypass : NSInteger;
enum ReturnOption : NSInteger;

SWIFT_CLASS("_TtC8iFCCCore24ICAApplicationIdentifier")
@interface ICAApplicationIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull aid;
@property (nonatomic, readonly, copy) NSString * _Nonnull tag8A;
@property (nonatomic, readonly) enum PINBypass allowPINBypass;
@property (nonatomic, readonly) enum AIDBrand aidBrand;
@property (nonatomic, readonly) enum DebitType debitType;
@property (nonatomic, readonly) enum ForceCashback forceCashBack;
@property (nonatomic, readonly) BOOL enablePANConsistencyCheck;
@property (nonatomic, readonly) enum PINBypass clessPINBypass;
@property (nonatomic, readonly) BOOL allowPINBypassCashback;
@property (nonatomic, readonly) BOOL allowOfflinePINCashback;
@property (nonatomic, readonly) BOOL allowOnlinePINCashback;
@property (nonatomic, readonly) BOOL allowSignatureCashback;
@property (nonatomic, readonly) BOOL allowNoCVMCashback;
@property (nonatomic, readonly) enum ReturnOption emvRefundVoidReturnOption;
@property (nonatomic, readonly) BOOL allowOptimizedQuickChip;
@property (nonatomic, readonly, copy) NSString * _Nonnull onlinePINKeyIndex;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the logging modules used within iFCC and associated frameworks
typedef SWIFT_ENUM(NSInteger, LoggingModule, open) {
/// Library Initialization
  LoggingModuleLibraryInitialization = 0,
/// Device Setup
  LoggingModuleDeviceSetup = 1,
/// Device Operation
  LoggingModuleDeviceOperation = 2,
/// FreeWay Operation
  LoggingModuleFreeWayOperation = 3,
/// Store and Forward Processing
  LoggingModuleStoreAndForward = 4,
/// Configuration Updates
  LoggingModuleConfigurationUpdate = 5,
/// Device Pairing
  LoggingModuleDevicePairing = 6,
/// Device Messaging
  LoggingModuleDeviceMessaging = 7,
};


/// Helper class for Objective C
SWIFT_CLASS("_TtC8iFCCCore19LoggingModuleBridge")
@interface LoggingModuleBridge : NSObject
+ (NSString * _Nonnull)name:(enum LoggingModule)module_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PINBypass, open) {
  PINBypassNotAllowed = 0,
  PINBypassEnterKeyPINBypassAllowed = 1,
  PINBypassCancelKeyPINBypassAllowed = 2,
};


typedef SWIFT_ENUM(NSInteger, ReturnOption, open) {
  ReturnOptionPartial = 0,
  ReturnOptionFull = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef IFCCCORE_SWIFT_H
#define IFCCCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iFCCCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AIDBrand, open) {
  AIDBrandMastercard = 1,
  AIDBrandVisa = 2,
  AIDBrandInterac = 3,
  AIDBrandAmex = 4,
  AIDBrandDiscover = 5,
  AIDBrandDnaUSDebit = 6,
  AIDBrandUnionPay = 7,
  AIDBrandJcb = 8,
};

typedef SWIFT_ENUM(NSInteger, DebitType, open) {
  DebitTypeNonDebitGlobalDebit = 0,
  DebitTypeUsCommonDebit = 1,
};



enum FPCoreEMVTag : uint32_t;
@class NSString;

SWIFT_CLASS("_TtC8iFCCCore14FPCoreChipData")
@interface FPCoreChipData : NSObject
@property (nonatomic, readonly) enum FPCoreEMVTag emvTag;
@property (nonatomic, readonly, copy) NSString * _Nonnull tagDescription;
@property (nonatomic, readonly) uint32_t id;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithEmvTag:(enum FPCoreEMVTag)emvTag value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(uint32_t)id value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8iFCCCore13FPCoreEMVData")
@interface FPCoreEMVData : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, FPCoreChipData *> * _Nonnull chipData;
@property (nonatomic, readonly, copy) NSString * _Nullable ksn;
@property (nonatomic, readonly, copy) NSString * _Nullable emvTlvData;
@property (nonatomic, readonly, copy) NSString * _Nullable last4PanDigits;
@property (nonatomic, readonly, copy) NSString * _Nullable redactedCardNumber;
@property (nonatomic, readonly, copy) NSString * _Nullable track2e;
- (nonnull instancetype)initWithChipData:(NSArray<FPCoreChipData *> * _Nonnull)chipData ksn:(NSString * _Nullable)ksn emvTlvData:(NSString * _Nullable)emvTlvData last4PanDigits:(NSString * _Nullable)last4PanDigits redactedCardNumber:(NSString * _Nullable)redactedCardNumber track2e:(NSString * _Nullable)track2e OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorResponseCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, FPCoreEMVTag, open) {
  FPCoreEMVTagUnknown = 0x00,
  FPCoreEMVTagIssuerIdentificationNumber = 0x42,
  FPCoreEMVTagApplicationIdentifier = 0x4F,
  FPCoreEMVTagApplicationLabel = 0x50,
  FPCoreEMVTagTrack1EquivalentData = 0x56,
  FPCoreEMVTagTrack2EquivalentData = 0x57,
  FPCoreEMVTagTrack3EquivalentData = 0x58,
  FPCoreEMVTagPan = 0x5A,
  FPCoreEMVTagIssuerScriptTemplate1 = 0x71,
  FPCoreEMVTagIssuerScriptTemplate2 = 0x72,
  FPCoreEMVTagApplicationInterchangeProfile = 0x82,
  FPCoreEMVTagDedicatedFileName = 0x84,
  FPCoreEMVTagApplicationPriorityIndicator = 0x87,
  FPCoreEMVTagAuthorizationCode = 0x89,
  FPCoreEMVTagAuthorizationResponseCode = 0x8A,
  FPCoreEMVTagCvmList = 0x8E,
  FPCoreEMVTagIssuerAuthenticationData = 0x91,
  FPCoreEMVTagApplicationFileLocator = 0x94,
  FPCoreEMVTagTerminalVerificationResults = 0x95,
  FPCoreEMVTagTransactionDate = 0x9A,
  FPCoreEMVTagTransactionStatusInformation = 0x9B,
  FPCoreEMVTagTransactionType = 0x9C,
  FPCoreEMVTagCardHolderName = 0x5F20,
  FPCoreEMVTagExpiryDate = 0x5F24,
  FPCoreEMVTagApplicationEffectiveDate = 0x5F25,
  FPCoreEMVTagIssuerCountryCode = 0x5F28,
  FPCoreEMVTagTransactionCurrencyCode = 0x5F2A,
  FPCoreEMVTagPreferredLanguages = 0x5F2D,
  FPCoreEMVTagServiceCode = 0x5F30,
  FPCoreEMVTagPanSequenceNumber = 0x5F34,
  FPCoreEMVTagTransactionCurrencyExponent = 0x5F36,
  FPCoreEMVTagBic = 0x5F54,
  FPCoreEMVTagIssuerCountryCode2 = 0x5F55,
  FPCoreEMVTagIssuerCountryCode3 = 0x5F56,
  FPCoreEMVTagAmountAuthorized = 0x9F02,
  FPCoreEMVTagAmountOther = 0x9F03,
  FPCoreEMVTagTerminalApplicationIdentifier = 0x9F06,
  FPCoreEMVTagApplicationUsageControl = 0x9F07,
  FPCoreEMVTagApplicationVersionNumberICC = 0x9F08,
  FPCoreEMVTagApplicationVersionNumberTerminal = 0x9F09,
  FPCoreEMVTagCardholderNameExtended = 0x9F0B,
  FPCoreEMVTagIssuerActionCodeDefault = 0x9F0D,
  FPCoreEMVTagIssuerActionCodeDenial = 0x9F0E,
  FPCoreEMVTagIssuerActionCodeOnline = 0x9F0F,
  FPCoreEMVTagIssuerApplicationData = 0x9F10,
  FPCoreEMVTagIssuerCodeTableIndex = 0x9F11,
  FPCoreEMVTagApplicationPreferredName = 0x9F12,
  FPCoreEMVTagLowerConsecutiveOfflineLimit = 0x9F14,
  FPCoreEMVTagPinTryCount = 0x9F17,
  FPCoreEMVTagTerminalCountryCode = 0x9F1A,
  FPCoreEMVTagTerminalFloorLimit = 0x9F1B,
  FPCoreEMVTagInterfaceDeviceSerialNumber = 0x9F1E,
  FPCoreEMVTagTrack1DiscretionaryData = 0x9F1F,
  FPCoreEMVTagTrack2DiscretionaryData = 0x9F20,
  FPCoreEMVTagTransactionTime = 0x9F21,
  FPCoreEMVTagPaymentAccountReference = 0x9F24,
  FPCoreEMVTagApplicationCryptogram = 0x9F26,
  FPCoreEMVTagCryptogramInformationData = 0x9F27,
  FPCoreEMVTagTerminalCapabilities = 0x9F33,
  FPCoreEMVTagCvmResults = 0x9F34,
  FPCoreEMVTagTerminalType = 0x9F35,
  FPCoreEMVTagApplicationTransactionCounter = 0x9F36,
  FPCoreEMVTagUnpredictableNumber = 0x9F37,
  FPCoreEMVTagPosEntryMode = 0x9F39,
  FPCoreEMVTagAdditionalTerminalCapabilities = 0x9F40,
  FPCoreEMVTagTransactionSequenceCounter = 0x9F41,
  FPCoreEMVTagApplicationCurrencyCode = 0x9F42,
  FPCoreEMVTagApplicationCurrencyExponent = 0x9F44,
  FPCoreEMVTagApplicationCurrencyCodeDRDO = 0x9F51,
  FPCoreEMVTagTransactionCategoryCode1Visa = 0x9F53,
  FPCoreEMVTagTransactionCategoryCode2Visa = 0x9F5B,
  FPCoreEMVTagAvailableOfflineSpendingAmount = 0x9F5D,
  FPCoreEMVTagTerminalTransactionQualifiers = 0x9F66,
  FPCoreEMVTagTrack2NATCorMSDOffset = 0x9F67,
  FPCoreEMVTagTrack2DataMastercardOrCardCVMLimitOrTrack2DataBinary = 0x9F6B,
  FPCoreEMVTagCardTransactionQualifiers = 0x9F6C,
  FPCoreEMVTagEmvProprietaryTag = 0x9F6D,
  FPCoreEMVTagThirdPartyData = 0x9F6E,
  FPCoreEMVTagProtectedDataEnvelope2MobileCVMResults = 0x9F71,
  FPCoreEMVTagCustomerExclusiveDataMerchantCustomData = 0x9F7C,
  FPCoreEMVTagTerminalActionCodeDefault = 0xDF03,
  FPCoreEMVTagTerminalActionCodeDenial = 0xDF04,
  FPCoreEMVTagTerminalActionCodeOnline = 0xDF05,
  FPCoreEMVTagThresholdValue = 0xDF07,
  FPCoreEMVTagTargetPercentage = 0xDF08,
  FPCoreEMVTagMaxTargetPercentage = 0xDF09,
  FPCoreEMVTagWrapperforIssuerScriptTagWithIncorrectLength = 0xDF0C,
  FPCoreEMVTagIssuerScriptResults = 0xDF11,
  FPCoreEMVTagAuthorizationResponseCodeList = 0xDF16,
  FPCoreEMVTagTerminalDecisionafterGenerateAC = 0xDF31,
  FPCoreEMVTagCvmoutResult = 0xDF38,
  FPCoreEMVTagOnlinePINBlock = 0xDF4F,
  FPCoreEMVTagOnlinePINSMID = 0xDF4E,
  FPCoreEMVTagAmexExpresspayPseudoTrack2 = 0xDF46,
  FPCoreEMVTagDiscoverDpasPseudoTrack2 = 0xDF57,
  FPCoreEMVTagPayPassTransactionOutcome = 0xDF6D,
  FPCoreEMVTagOutcomeParameterSet = 0xDF8129,
  FPCoreEMVTagTransactionPINData = 0x99,
  FPCoreEMVTagAccountType = 0x1000,
  FPCoreEMVTagPinEntryRequired = 0x1001,
  FPCoreEMVTagSignatureRequired = 0x1002,
  FPCoreEMVTagConfirmationResponseCode = 0x1003,
  FPCoreEMVTagHostResponseAvailable = 0x1004,
  FPCoreEMVTagTransactionType2 = 0x1005,
  FPCoreEMVTagAuthorizationResponseMAC = 0x1007,
  FPCoreEMVTagAuthorizationResponseTerminalSerialNumber = 0x1008,
  FPCoreEMVTagAuthorizationResponseBase24ResponseCode = 0x1009,
  FPCoreEMVTagAuthorizationResponseApprovalCode = 0x100A,
  FPCoreEMVTagAuthorizationResponseRetrievalCode = 0x100B,
  FPCoreEMVTagAuthorizationResponseMACSessionKey = 0x100C,
  FPCoreEMVTagAuthorizationResponsePINSessionKey = 0x100D,
  FPCoreEMVTagSelectedTransactionLanguge = 0x100E,
  FPCoreEMVTagOfflinePINEntrySuccess = 0x100F,
  FPCoreEMVTagErrorResponseCode = 0x1010,
  FPCoreEMVTagSpecialCaseAuthorization = 0x1011,
  FPCoreEMVTagContactlessTransactionOutcome = 0x1012,
  FPCoreEMVTagContactlessProfileUsed = 0x1013,
  FPCoreEMVTagCardPaymentType = 0x1014,
  FPCoreEMVTagSuncor = 0x1015,
  FPCoreEMVTagCommonAIDFlagUS = 0x1016,
  FPCoreEMVTagMsrTrack1 = 0x1017,
  FPCoreEMVTagMsrTrack2 = 0x1018,
  FPCoreEMVTagMsrTrack3 = 0x1019,
  FPCoreEMVTagMsrFallback = 0x101A,
  FPCoreEMVTagContactlessOnlinePINCVM = 0x101B,
  FPCoreEMVTagContactlessNoCVM = 0x101C,
  FPCoreEMVTagContactlessMobilePINCVMPerformed = 0x101D,
  FPCoreEMVTagContactlessMobileCVMResults = 0x101E,
  FPCoreEMVTagMerchantCouponData = 0x1020,
  FPCoreEMVTagCardPaymentType2 = 0x9000,
  FPCoreEMVTagCardEntryMode = 0x9001,
  FPCoreEMVTagMaskedPAN = 0xFF1D,
  FPCoreEMVTagTrack1e = 0xFF1E,
  FPCoreEMVTagTrack2e = 0xFF1F,
  FPCoreEMVTagEtb = 0xFF20,
  FPCoreEMVTagTrack3e = 0xFF21,
};


SWIFT_CLASS("_TtC8iFCCCore16FPCoreEMVTagUtil")
@interface FPCoreEMVTagUtil : NSObject
+ (enum FPCoreEMVTag)tagFromRawValue:(uint32_t)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)descriptionWithEmvTag:(enum FPCoreEMVTag)emvTag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAmountDOLTag:(enum FPCoreEMVTag)tag SWIFT_WARN_UNUSED_RESULT;
+ (enum FPCoreEMVTag)getAmountDOLTag:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ForceCashback, open) {
  ForceCashbackPrompt = 0,
  ForceCashbackForce = 1,
};

enum PINBypass : NSInteger;
enum ReturnOption : NSInteger;

SWIFT_CLASS("_TtC8iFCCCore24ICAApplicationIdentifier")
@interface ICAApplicationIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull aid;
@property (nonatomic, readonly, copy) NSString * _Nonnull tag8A;
@property (nonatomic, readonly) enum PINBypass allowPINBypass;
@property (nonatomic, readonly) enum AIDBrand aidBrand;
@property (nonatomic, readonly) enum DebitType debitType;
@property (nonatomic, readonly) enum ForceCashback forceCashBack;
@property (nonatomic, readonly) BOOL enablePANConsistencyCheck;
@property (nonatomic, readonly) enum PINBypass clessPINBypass;
@property (nonatomic, readonly) BOOL allowPINBypassCashback;
@property (nonatomic, readonly) BOOL allowOfflinePINCashback;
@property (nonatomic, readonly) BOOL allowOnlinePINCashback;
@property (nonatomic, readonly) BOOL allowSignatureCashback;
@property (nonatomic, readonly) BOOL allowNoCVMCashback;
@property (nonatomic, readonly) enum ReturnOption emvRefundVoidReturnOption;
@property (nonatomic, readonly) BOOL allowOptimizedQuickChip;
@property (nonatomic, readonly, copy) NSString * _Nonnull onlinePINKeyIndex;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the logging modules used within iFCC and associated frameworks
typedef SWIFT_ENUM(NSInteger, LoggingModule, open) {
/// Library Initialization
  LoggingModuleLibraryInitialization = 0,
/// Device Setup
  LoggingModuleDeviceSetup = 1,
/// Device Operation
  LoggingModuleDeviceOperation = 2,
/// FreeWay Operation
  LoggingModuleFreeWayOperation = 3,
/// Store and Forward Processing
  LoggingModuleStoreAndForward = 4,
/// Configuration Updates
  LoggingModuleConfigurationUpdate = 5,
/// Device Pairing
  LoggingModuleDevicePairing = 6,
/// Device Messaging
  LoggingModuleDeviceMessaging = 7,
};


/// Helper class for Objective C
SWIFT_CLASS("_TtC8iFCCCore19LoggingModuleBridge")
@interface LoggingModuleBridge : NSObject
+ (NSString * _Nonnull)name:(enum LoggingModule)module_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PINBypass, open) {
  PINBypassNotAllowed = 0,
  PINBypassEnterKeyPINBypassAllowed = 1,
  PINBypassCancelKeyPINBypassAllowed = 2,
};


typedef SWIFT_ENUM(NSInteger, ReturnOption, open) {
  ReturnOptionPartial = 0,
  ReturnOptionFull = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
