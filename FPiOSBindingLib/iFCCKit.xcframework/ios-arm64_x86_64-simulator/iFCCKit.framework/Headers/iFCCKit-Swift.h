#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef IFCCKIT_SWIFT_H
#define IFCCKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iFCCKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol ValidationResult;

SWIFT_PROTOCOL("_TtP7iFCCKit10Validation_")
@protocol Validation
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Base class for iFCC operation requests
SWIFT_CLASS("_TtC7iFCCKit16OperationRequest")
@interface OperationRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class InvoiceHeader;
@class BillTo;
@class ShipTo;
@class ShipFrom;
@class HotelData;
@class LineItems;

/// Base class for iFCC FreeWay operation requests
SWIFT_CLASS("_TtC7iFCCKit23FreeWayOperationRequest")
@interface FreeWayOperationRequest : OperationRequest <Validation>
/// Merchant-provided reference code
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Merchant-provided invoice header
@property (nonatomic, readonly, strong) InvoiceHeader * _Nullable invoiceHeader;
/// Identifier of the register making the operation request.
/// note:
/// It must be 8 characters long and must be composed of numeric characters only
@property (nonatomic, readonly, copy) NSString * _Nonnull registerId;
/// Identity of the clerk requesting the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull clerkId;
/// The serial number of the connected Ingenico device
@property (nonatomic, readonly, copy) NSString * _Nullable clientDeviceId;
/// BillTo data associated with the request
@property (nonatomic, readonly, strong) BillTo * _Nullable billTo;
/// ShipTo data associated with the request
@property (nonatomic, readonly, strong) ShipTo * _Nullable shipTo;
@property (nonatomic, readonly, strong) ShipFrom * _Nullable shipFrom;
@property (nonatomic, readonly, strong) HotelData * _Nullable hotelData;
@property (nonatomic, readonly, strong) LineItems * _Nullable lineItems;
- (void)addBillTo:(BillTo * _Nullable)billTo;
- (void)addShipTo:(ShipTo * _Nullable)shipTo;
- (void)addShipFrom:(ShipFrom * _Nullable)shipFrom;
- (void)addLineItems:(LineItems * _Nullable)lineItems;
- (void)addHotelData:(HotelData * _Nullable)hotelData;
/// Creates a statement logging all values on this OperationRequest instance
///
/// returns:
/// A string that can be used to log the OperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Base class for iFCC FreeWay follow on operation requests
SWIFT_CLASS("_TtC7iFCCKit24FollowOnOperationRequest")
@interface FollowOnOperationRequest : FreeWayOperationRequest
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end

@class TransactionAmount;
@class AuthorizationData;

/// Base class for Authorization Update Request objects
SWIFT_CLASS("_TtC7iFCCKit35AuthorizationUpdateOperationRequest")
@interface AuthorizationUpdateOperationRequest : FollowOnOperationRequest
/// Amount associated with the requested operation (depreciated)
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param billTo Optional BillTo data assocatied with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional LineItems data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this AdjustmentOperationRequest instance
///
/// returns:
/// A string that can be used to log the AdjustmentOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// The data elements needed to initiate an Adjustment request
SWIFT_CLASS("_TtC7iFCCKit26AdjustmentOperationRequest")
@interface AdjustmentOperationRequest : AuthorizationUpdateOperationRequest
/// Creates a statement logging all values on this AdjustmentOperationRequest instance
///
/// returns:
/// A string that can be used to log the AdjustmentOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
@end

@protocol iFCCCardReaderDevice;
@protocol iFCCCardReaderDeviceOptions;
@protocol LEDSequenceItem;
@protocol iFCCPairingConfirmationDelegate;

SWIFT_PROTOCOL("_TtP7iFCCKit20AttachDeviceDelegate_")
@protocol AttachDeviceDelegate <NSObject>
/// Provides notification to the receiver that iFCC attach device has completed successfully
/// \param device The attached device for use with iFCC
///
- (void)onDeviceAttachedWithDevice:(id <iFCCCardReaderDevice> _Nonnull)device;
/// Provides notification to the receiver that the iFCC attach device has failed
/// \param deviceOptions The device options supplied on the attachDevice call
///
/// \param error The error that occurred, including what component failed and why
///
- (void)onAttachDeviceErrorWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions error:(NSError * _Nonnull)error;
@optional
/// Provides notification to the receiver that the end user needs to confirm the device pairing sequence, only applicable to the MOBY 5500
/// \param ledSequence An array of LEDSequenceItems representing the LED pairing sequence pattern
///
/// \param pairingConfirmationDelegate an iFCCPairingConfirmationDelegate instance for managing the pairing confirmation process
///
- (void)ledPairingConfirmationRequestedWithLedSequence:(NSArray<id <LEDSequenceItem>> * _Nonnull)ledSequence pairingConfirmationDelegate:(id <iFCCPairingConfirmationDelegate> _Nonnull)pairingConfirmationDelegate;
@end

@class NSDecimalNumber;
enum ElectronicCommerceIndicator : NSInteger;
@class NSNumber;

/// Provides additional authorization features related to an operation request
SWIFT_CLASS("_TtC7iFCCKit17AuthorizationData")
@interface AuthorizationData : NSObject <NSCopying, Validation>
/// Indicates whether a partial authorization can be accepted by the merchant
@property (nonatomic, readonly) BOOL allowPartial;
/// If available, indicates to return the balance of the account used
@property (nonatomic, readonly) BOOL returnBalance;
/// Authorization code previously obtained by phone
@property (nonatomic, readonly, copy) NSString * _Nullable verbalAuthCode;
/// Used in functionality that allows support for local ticket searching in some Point of Sale solutions
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origAuthAmount;
/// Setting to control if an AVS is performed
@property (nonatomic, readonly) BOOL enableAVS;
/// Commerce Indicator
@property (nonatomic, readonly) enum ElectronicCommerceIndicator commerceIndicator;
/// Indicates whether the transaction is part of a recurring chain
@property (nonatomic, readonly) BOOL isRecurring;
/// Total number of installment payments in a series associated with a merchant transaction
@property (nonatomic, readonly, strong) NSNumber * _Nullable installmentCount;
/// Ordinal number of the installment payment
@property (nonatomic, readonly, strong) NSNumber * _Nullable installmentNumber;
/// Identifies the industry-specific data in the request
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
- (nonnull instancetype)initWithAllowPartial:(BOOL)allowPartial returnBalance:(BOOL)returnBalance verbalAuthCode:(NSString * _Nullable)verbalAuthCode origAuthAmount:(NSDecimalNumber * _Nullable)origAuthAmount enableAVS:(BOOL)enableAVS commerceIndicator:(enum ElectronicCommerceIndicator)commerceIndicator isRecurring:(BOOL)isRecurring installmentCount:(NSNumber * _Nullable)installmentCount installmentNumber:(NSNumber * _Nullable)installmentNumber industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAllowPartial:(BOOL)allowPartial returnBalance:(BOOL)returnBalance enableAVS:(BOOL)enableAVS commerceIndicator:(enum ElectronicCommerceIndicator)commerceIndicator isRecurring:(BOOL)isRecurring installmentCount:(NSNumber * _Nullable)installmentCount installmentNumber:(NSNumber * _Nullable)installmentNumber industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The data elements needed to initiate a request involving a card reader
SWIFT_CLASS("_TtC7iFCCKit25CardBasedOperationRequest")
@interface CardBasedOperationRequest : FreeWayOperationRequest
/// Indicates to generate a FW token for the card data in used in the request
@property (nonatomic, readonly) BOOL generateToken;
/// For requests generating a token, indicates if the token will be created without the card expiration - otherwise, the card expiration date will be baked into the token, which is the typical configuration
@property (nonatomic, readonly) BOOL tokenDynamicExpiration;
/// Freeway token
@property (nonatomic, readonly, copy) NSString * _Nullable token;
/// For requests using a token, the expiration month of token-backed card if the token was created without the card expiration (MM)
@property (nonatomic, readonly, copy) NSString * _Nullable cardExpirationMonth;
/// For requests using a token, the expiration year of token-backed card if the token was created without the card expiration (YY)
@property (nonatomic, readonly, copy) NSString * _Nullable cardExpirationYear;
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nullable transactionAmount;
/// Indicates if DCC is enabled for the request
@property (nonatomic, readonly) BOOL isDccEnabled;
/// Enables DCC for the request
- (void)enableDcc:(BOOL)isDccEnabled;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// The data elements needed to initiate an Authorization request
SWIFT_CLASS("_TtC7iFCCKit29AuthorizationOperationRequest")
@interface AuthorizationOperationRequest : CardBasedOperationRequest
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of AuthorizationOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice header data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice header data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this AuthorizationOperationRequest instance
///
/// returns:
/// A string that can be used to log the AuthorizationOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7iFCCKit13BasicCardData_")
@protocol BasicCardData <NSObject>
/// The cardholder name if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderName;
/// The entry mode for this card data
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
/// Specifies the physical hardware that is performing the encryption
@property (nonatomic, readonly, copy) NSString * _Nonnull msrType;
/// First 6 digits of the PAN if the data is ISO formatted
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// The type of card if it can be determined, will be nill if the card is not ISO
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
@end

@class NSDate;

/// Represents billing information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit6BillTo")
@interface BillTo : NSObject <NSCopying, Validation>
/// Merchant-assigned customer ID (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
/// Customer IP address, for internet orders (46)
@property (nonatomic, readonly, copy) NSString * _Nullable ipAddress;
/// Customer’s date-of-birth Required for electronic check services
@property (nonatomic, readonly, copy) NSDate * _Nullable dateOfBirth;
/// Customer’s DL#  Required for electronic check services (30 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable driversLicenseNumber;
/// Customer’s DL State Required for electronic check services (2 chars)
@property (nonatomic, readonly, copy) NSString * _Nullable driversLicenseState;
/// Last four of Social Security Number (4 chars)
@property (nonatomic, readonly, copy) NSString * _Nullable ssnLastFour;
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCustomerId:(NSString * _Nullable)customerId company:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email ipAddress:(NSString * _Nullable)ipAddress dateOfBirth:(NSDate * _Nullable)dateOfBirth driversLicenseNumber:(NSString * _Nullable)driversLicenseNumber driversLicenseState:(NSString * _Nullable)driversLicenseState ssnLastFour:(NSString * _Nullable)ssnLastFour OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum iFCCDeviceType : NSInteger;
enum iFCCDeviceCommunicationInterface : NSInteger;
@class NSData;

SWIFT_PROTOCOL("_TtP7iFCCKit27iFCCCardReaderDeviceOptions_")
@protocol iFCCCardReaderDeviceOptions <NSObject>
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
@end


/// Represents ICA card reader network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit13DeviceOptions")
@interface DeviceOptions : NSObject <iFCCCardReaderDeviceOptions>
/// Device Type
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Device Data
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Communication Interface
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents bluetooth card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit22BluetoothDeviceOptions")
@interface BluetoothDeviceOptions : DeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull bluetoothIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable serialNumber;
/// Creates an instance of BluetoothDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param bluetoothIdentifier the Bluetooth identifier for the card reader device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of BluetoothDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType bluetoothIdentifier:(NSString * _Nonnull)bluetoothIdentifier deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of BluetoothDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param name the name for the card reader device
///
/// \param serialNumber the serial number for the card reader device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of BluetoothDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType name:(NSString * _Nonnull)name serialNumber:(NSString * _Nonnull)serialNumber deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



/// The data elements needed to initiate a Capture request
SWIFT_CLASS("_TtC7iFCCKit23CaptureOperationRequest")
@interface CaptureOperationRequest : FollowOnOperationRequest
/// Amount associated with the requested operation (depreciated)
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request.
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/InvoiceHeader initializer");
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this CaptureOperationRequest instance
///
/// returns:
/// A string that can be used to log the CaptureOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



/// Provides the raw data returned from a magentic card swipe. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit16CardReadResponse_")
@protocol CardReadResponse <NSObject>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Flag indicating whether or not the associated data is encrypted
@property (nonatomic, readonly) BOOL isEncrypted SWIFT_DEPRECATED_MSG("Use encryptionMode");
/// KSN (key serial number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull ksn SWIFT_DEPRECATED_MSG("Not supported");
/// Track 1 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// Track 2 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// BIN (Bank Identification Number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// Card Holder Name - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardHolderName;
/// Service Code - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceCode SWIFT_DEPRECATED_MSG("Not supported");
/// Expiration Date - may be blank dependent upon swiped card returning an associated value, format is MM/YY for all devices
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// Card Last Four - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardLastFour;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return A string representing what we know about whether or not this data is encrypted (ie: ONGUARD, NONE, UNKNOWN), for RUA devices the string may be empty
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return A string representing what we know about what kind of raw card data is available (ie: CARD, VAS,  BOTH), for RUA devices the string may be empty
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
/// @return A string representing the entry mode such as “swiped or “keyed”
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@end

@protocol DeviceVersionInfo;
@protocol DeviceFeatures;

SWIFT_PROTOCOL("_TtP7iFCCKit20CardReaderDeviceInfo_")
@protocol CardReaderDeviceInfo <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, readonly, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@end

enum SymbolPlacement : NSInteger;

/// Helper  for currency formats
SWIFT_PROTOCOL("_TtP7iFCCKit12CurrencyData_")
@protocol CurrencyData <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull isoCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull asciiSymbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull utf8Symbol;
@property (nonatomic, readonly) NSInteger afterDecimalDigits;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupSeparator;
@property (nonatomic, readonly, copy) NSString * _Nonnull decimalSeparator;
@property (nonatomic, readonly) enum SymbolPlacement symbolPlacement;
@property (nonatomic, readonly) BOOL hasSpaceBetween;
@property (nonatomic, readonly) NSInteger groupingSize;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit20DetachDeviceDelegate_")
@protocol DetachDeviceDelegate <NSObject>
/// Provides notification to the receiver that the device has been detached and the lane is no longer valid
/// \param laneId The lane identifier from where the device was detached
///
- (void)onDeviceDetachedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit19DeviceBatteryStatus_")
@protocol DeviceBatteryStatus <NSObject>
/// The percentage of battery life available
@property (nonatomic, readonly) NSInteger batteryPercentage;
/// Flag indicating whether or not the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit14DeviceFeatures_")
@protocol DeviceFeatures <NSObject>
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsUtf8Encoding;
@end


@class FccFileVersionInfo;

/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit17DeviceVersionInfo_")
@protocol DeviceVersionInfo <NSObject>
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@end

typedef SWIFT_ENUM(NSInteger, ElectronicCommerceIndicator, open) {
  ElectronicCommerceIndicatorUnspecified = 0,
  ElectronicCommerceIndicatorMoto = 1,
  ElectronicCommerceIndicatorReauthorize = 2,
  ElectronicCommerceIndicatorRecurring = 3,
  ElectronicCommerceIndicatorInternet = 4,
  ElectronicCommerceIndicatorRetail = 5,
  ElectronicCommerceIndicatorDelayed = 6,
  ElectronicCommerceIndicatorUnscheduled = 7,
};


SWIFT_CLASS("_TtC7iFCCKit33ElectronicCommerceIndicatorBridge")
@interface ElectronicCommerceIndicatorBridge : NSObject
+ (NSArray<NSNumber *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)allStrings SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)toString:(enum ElectronicCommerceIndicator)eci SWIFT_WARN_UNUSED_RESULT;
+ (enum ElectronicCommerceIndicator)fromRawValue:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (enum ElectronicCommerceIndicator)fromString:(NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7iFCCKit25EmptyCardReaderDeviceInfo")
@interface EmptyCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Return value for FreewayErrorCallback handler. Cannot (and should not) be created directly by integrators.
/// Instead this must be generated from FailureActionHandler.generateAction.
SWIFT_CLASS("_TtC7iFCCKit13FailureAction")
@interface FailureAction : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull APPROVE_OFFLINE_ACTION;)
+ (FailureAction * _Nonnull)APPROVE_OFFLINE_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull RETRY_ACTION;)
+ (FailureAction * _Nonnull)RETRY_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull ABORT_ACTION;)
+ (FailureAction * _Nonnull)ABORT_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull POS_STORED;)
+ (FailureAction * _Nonnull)POS_STORED SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Mode, open) {
/// Approve this transaction offline through the SaF engine.
  ModeAPPROVE_OFFLINE = 0,
/// POS (Integrator) will store this transaction and run it later.
/// The device show an approval, but this will NOT process the transaction.
  ModePOS_STORED = 1,
/// Retry this transaction online.
  ModeRETRY = 2,
/// Abort the transaction. Will execute a reversal if necessary.
  ModeABORT = 3,
};


/// Provides basic card data from a card read
SWIFT_CLASS("_TtC7iFCCKit16FccBasicCardData")
@interface FccBasicCardData : NSObject <NSCopying, BasicCardData>
/// The cardholder name if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderName;
/// The entry mode for this card data
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
/// Specifies the physical hardware that is performing the encryption
@property (nonatomic, readonly, copy) NSString * _Nonnull msrType;
/// First 6 digits of the PAN if the data is ISO formatted
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// The type of card if it can be determined, will be nill if the card is not ISO
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCOperationIdentifier_")
@protocol iFCCOperationIdentifier <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit34iFCCCancellableOperationIdentifier_")
@protocol iFCCCancellableOperationIdentifier <iFCCOperationIdentifier>
@end


/// Unique identifier of iFCC operation backed by a UUID
SWIFT_CLASS("_TtC7iFCCKit22FccOperationIdentifier")
@interface FccOperationIdentifier : NSObject <iFCCOperationIdentifier>
/// Unique identifier of iFCC operation backed by a UUID
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Compares for equality with the current instance
///
/// returns:
/// true it the passed in object is equal to the current instance, false otherwise
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Hash of the current instance
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Unique identifier of iFCC operation that can be used to request cancellation of the identified operation
SWIFT_CLASS("_TtC7iFCCKit33FccCancellableOperationIdentifier")
@interface FccCancellableOperationIdentifier : FccOperationIdentifier <iFCCCancellableOperationIdentifier>
@end


/// Provides the raw data returned from a magentic card swipe. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit19FccCardReadResponse")
@interface FccCardReadResponse : NSObject <CardReadResponse>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Flag indicating whether or not the associated data is encrypted
@property (nonatomic, readonly) BOOL isEncrypted SWIFT_DEPRECATED_MSG("Use encryptionMode");
/// KSN (key serial number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull ksn SWIFT_DEPRECATED_MSG("Not supported");
/// Track 1 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// Track 2 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// BIN (Bank Identification Number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// Card Holder Name - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardHolderName;
/// Service Code - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceCode SWIFT_DEPRECATED_MSG("Not supported");
/// Expiration Date - may be blank dependent upon swiped card returning an associated value, format is MM/YY for all devices
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// Card Last Four - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardLastFour;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit20iFCCCardReaderDevice_")
@protocol iFCCCardReaderDevice
/// Name reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Serial number reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// Unique identifier of the lane the device is mapped to
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Represents the type of Device
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Represents a unique identifier for the device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Represents a description of this object’s values
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Represents an Mapped Card Reader device that has been initialized and assigned to a lane
SWIFT_CLASS("_TtC7iFCCKit19FccCardReaderDevice")
@interface FccCardReaderDevice : NSObject <iFCCCardReaderDevice>
/// Name reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Serial number reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// Unique identifier of the lane the device is mapped to
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Represents the type of Device
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Represents a unique identifier for the device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides device information.
SWIFT_CLASS("_TtC7iFCCKit23FccCardReaderDeviceInfo")
@interface FccCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, readonly, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helper class for obtaining supported values for config settings
SWIFT_CLASS("_TtC7iFCCKit15FccConfigBridge")
@interface FccConfigBridge : NSObject
/// Represents the list of supported EMV Locales
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull emvLocales;)
+ (NSArray<NSString *> * _Nonnull)emvLocales SWIFT_WARN_UNUSED_RESULT;
/// Represents the list of supported DCC prompt logic options
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull dccPromptLogics;)
+ (NSArray<NSString *> * _Nonnull)dccPromptLogics SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper class for Currency formatting
SWIFT_CLASS("_TtC7iFCCKit17FccCurrencyBridge")
@interface FccCurrencyBridge : NSObject
/// Retrieves the list of supported currency symbol placement
///
/// returns:
/// an array of all currency symbol placement values
+ (NSArray<NSString *> * _Nonnull)getSupportedSymbolPlacements SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of preset currency formats
///
/// returns:
/// an array of currency data objectes represent a specific currency format
+ (NSArray<id <CurrencyData>> * _Nonnull)getPresetCurrencies SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides battery status of the device. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit22FccDeviceBatteryStatus")
@interface FccDeviceBatteryStatus : NSObject <DeviceBatteryStatus>
/// The percentage of battery life available
@property (nonatomic, readonly) NSInteger batteryPercentage;
/// Flag indicating whether or not the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
/// Produces a log statement enumerating all property values (does not perform log action)
///
/// returns:
/// A log statement enumerating all property values
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7iFCCKit17FccDeviceFeatures")
@interface FccDeviceFeatures : NSObject <DeviceFeatures>
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsUtf8Encoding;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Provides basic details of a ROAM based device prior to connecting to the device
SWIFT_PROTOCOL("_TtP7iFCCKit12RUADeviceNub_")
@protocol RUADeviceNub
/// Name reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Identifier reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


/// Provides basic details of a device prior to connecting to the device
SWIFT_CLASS("_TtC7iFCCKit12FccDeviceNub")
@interface FccDeviceNub : NSObject <RUADeviceNub>
/// Name reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Identifier reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit20FccDeviceVersionInfo")
@interface FccDeviceVersionInfo : NSObject <DeviceVersionInfo>
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP7iFCCKit19iFCCFileLoggingInfo_")
@protocol iFCCFileLoggingInfo
/// the location where log files are being stored
@property (nonatomic, readonly, copy) NSString * _Nullable fileLocation;
/// URL of the current log file
@property (nonatomic, readonly, copy) NSURL * _Nullable currentFileURL;
/// a list of URLs representing the archived files
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull archivedFileURLs;
@end


/// Represents file logging status
SWIFT_CLASS("_TtC7iFCCKit18FccFileLoggingInfo")
@interface FccFileLoggingInfo : NSObject <iFCCFileLoggingInfo>
/// the location where log files are being stored
@property (nonatomic, readonly, copy) NSString * _Nullable fileLocation;
/// URL of the current log file
@property (nonatomic, readonly, copy) NSURL * _Nullable currentFileURL;
/// a list of URLs representing the archived files
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull archivedFileURLs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit15FileVersionInfo_")
@protocol FileVersionInfo <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
+ (id <FileVersionInfo> _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit18FccFileVersionInfo")
@interface FccFileVersionInfo : NSObject <FileVersionInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
+ (id <FileVersionInfo> _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit15LEDSequenceItem_")
@protocol LEDSequenceItem
/// Boolean indicating the red LED is on or off
@property (nonatomic, readonly) BOOL redOn;
/// Boolean indicating the yellow LED is on or off
@property (nonatomic, readonly) BOOL yellowOn;
/// Boolean indicating the orange LED is on or off
@property (nonatomic, readonly) BOOL orangeOn;
/// Boolean indicating the blue LED is on or off
@property (nonatomic, readonly) BOOL blueOn;
@end


/// Represents a LED Sequence for pairing an LED based device such as the Moby 5500
SWIFT_CLASS("_TtC7iFCCKit18FccLedSequenceItem")
@interface FccLedSequenceItem : NSObject <LEDSequenceItem>
/// Boolean indicating the red LED is on or off
@property (nonatomic, readonly) BOOL redOn;
/// Boolean indicating the yellow LED is on or off
@property (nonatomic, readonly) BOOL yellowOn;
/// Boolean indicating the orange LED is on or off
@property (nonatomic, readonly) BOOL orangeOn;
/// Boolean indicating the blue LED is on or off
@property (nonatomic, readonly) BOOL blueOn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FccLedSequenceItem (SWIFT_EXTENSION(iFCCKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


enum PalManifestResultInstallationDetail : NSInteger;
@protocol PalValidationError;
@protocol PalUpdateOperationFailedException;

/// Provides details about a manifest installation.  If the result was <code>FAILURE</code>, check for an exception and its <code>errorMessage</code> to determine the cause.
SWIFT_PROTOCOL("_TtP7iFCCKit17PalManifestResult_")
@protocol PalManifestResult
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL manifestInstalled;
@property (nonatomic, readonly) enum PalManifestResultInstallationDetail installationDetail;
@property (nonatomic, readonly, copy) NSArray<id <PalValidationError>> * _Nullable validateErrors;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nullable exception;
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestHash;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVariant;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVersion;
@end


/// Provides details about a manifest installation.  If the result was <code>FAILURE</code>, check for an exception and its <code>errorMessage</code> to determine the cause.
SWIFT_CLASS("_TtC7iFCCKit20FccPalManifestResult")
@interface FccPalManifestResult : NSObject <PalManifestResult>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL manifestInstalled;
@property (nonatomic, readonly) enum PalManifestResultInstallationDetail installationDetail;
@property (nonatomic, readonly, copy) NSArray<id <PalValidationError>> * _Nullable validateErrors;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nullable exception;
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestHash;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVariant;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_PROTOCOL("_TtP7iFCCKit24PalUpdateFailureResponse_")
@protocol PalUpdateFailureResponse <NSObject>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nonnull exception;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
- (NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Provides details about a failed PAL update.
SWIFT_CLASS("_TtC7iFCCKit27FccPalUpdateFailureResponse")
@interface FccPalUpdateFailureResponse : NSObject <PalUpdateFailureResponse>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nonnull exception;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
/// A text message to provide more context for this failure
- (NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit33PalUpdateOperationFailedException_")
@protocol PalUpdateOperationFailedException
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly) NSError * _Nullable inner;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedDescription;
@end


/// Provides the details of a failed PAL update
SWIFT_CLASS("_TtC7iFCCKit36FccPalUpdateOperationFailedException")
@interface FccPalUpdateOperationFailedException : NSObject <PalUpdateOperationFailedException>
/// A general message describing the failure reason
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The underlying exception
@property (nonatomic, readonly) NSError * _Nullable inner;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit24PalUpdateSuccessResponse_")
@protocol PalUpdateSuccessResponse <NSObject>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
@end


/// Provides details about a successful PAL update.
SWIFT_CLASS("_TtC7iFCCKit27FccPalUpdateSuccessResponse")
@interface FccPalUpdateSuccessResponse : NSObject <PalUpdateSuccessResponse>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit18PalValidationError_")
@protocol PalValidationError <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull setting;
@property (nonatomic, readonly, copy) NSString * _Nonnull expected;
@property (nonatomic, readonly, copy) NSString * _Nonnull actual;
@end


/// Represents an error raised by the pal engine during validation. These should be created using the companion class methods.
SWIFT_CLASS("_TtC7iFCCKit21FccPalValidationError")
@interface FccPalValidationError : NSObject <PalValidationError>
/// Dependent on the type of error.
@property (nonatomic, readonly, copy) NSString * _Nonnull setting;
/// The value expected for the setting
@property (nonatomic, readonly, copy) NSString * _Nonnull expected;
/// The actual value received during validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull actual;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TokenResponse;

/// Response elements for an iFCC operation
SWIFT_PROTOCOL("_TtP7iFCCKit11POSResponse_")
@protocol POSResponse
/// String value indicating a simple Accept / Reject result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull decision;
/// String value indicating the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Unique identifier assigned to the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The Merchant Reference Code provided in the preceding request
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Details provided by FreeWay regarding the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// The amount approved for the operation (does not apply to all operations)
@property (nonatomic, readonly, copy) NSString * _Nullable approvedAmount;
/// Card number with the BIN and last 4 unmasked
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The type of card used
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The Cardholder’s name as displayed on the card
@property (nonatomic, readonly, copy) NSString * _Nullable nameOnCard;
/// Card issuer
@property (nonatomic, readonly, copy) NSString * _Nullable issuerName;
/// The card’s expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expiryDate;
/// Method of card data capture
@property (nonatomic, readonly, copy) NSString * _Nullable entryMode;
/// Receipt text contents to be provided to the customer
@property (nonatomic, readonly, copy) NSString * _Nullable receipt;
/// Approval code from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable approvalCode;
/// Since a signature is never acquired by iFCC, this value will be ‘true’ in most instances. Debit does not always require a signature, and some credit floor limits do not either.
@property (nonatomic, readonly) BOOL signatureRequired;
/// Dependent on Cardholder Verification Method (CVM)–if CVM == Online Pin, this value will be <em>true</em>. Otherwise it will be <em>false</em>
@property (nonatomic, readonly) BOOL pinVerified;
/// FreeWay token linked to the card data
@property (nonatomic, readonly, strong) id <TokenResponse> _Nullable tokenResponse;
/// The resulting account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalance;
/// The currency code of account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalanceCurrency;
/// The tip amount, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable tipAmount;
/// Address Verification Code signifying the level of verification achieved
@property (nonatomic, readonly, copy) NSString * _Nullable avsCode;
/// Raw AVS code as received from processor
@property (nonatomic, readonly, copy) NSString * _Nullable avsCodeRaw;
/// Card Verification status code
@property (nonatomic, readonly, copy) NSString * _Nullable cvCode;
/// Raw CVV status code as returned by the processor
@property (nonatomic, readonly, copy) NSString * _Nullable cvCodeRaw;
/// Request (masked) sent to FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable requestData;
/// Response (masked) from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable responseData;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


/// Response elements for an iFCC operation
SWIFT_CLASS("_TtC7iFCCKit14FccPosResponse")
@interface FccPosResponse : NSObject <POSResponse>
/// String value indicating a simple Accept / Reject result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull decision;
/// String value indicating the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Unique identifier assigned to the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The Merchant Reference Code provided in the preceding request
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Details provided by FreeWay regarding the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// The amount approved for the operation (does not apply to all operations)
@property (nonatomic, readonly, copy) NSString * _Nullable approvedAmount;
/// Card number with the BIN and last 4 unmasked
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The type of card used
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The Cardholder’s name as displayed on the card
@property (nonatomic, readonly, copy) NSString * _Nullable nameOnCard;
/// Card issuer
@property (nonatomic, readonly, copy) NSString * _Nullable issuerName;
/// The card’s expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expiryDate;
/// Method of card data capture
@property (nonatomic, readonly, copy) NSString * _Nullable entryMode;
/// Receipt text contents to be provided to the customer
@property (nonatomic, readonly, copy) NSString * _Nullable receipt;
/// Approval code from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable approvalCode;
/// Since a signature is never acquired by iFCC, this value will be ‘true’ in most instances. Debit does not always require a signature, and some credit floor limits do not either.
@property (nonatomic, readonly) BOOL signatureRequired;
/// Dependent on Cardholder Verification Method (CVM)–if CVM == Online Pin, this value will be <em>true</em>. Otherwise it will be <em>false</em>
@property (nonatomic, readonly) BOOL pinVerified;
/// FreeWay token linked to the card data
@property (nonatomic, readonly, strong) id <TokenResponse> _Nullable tokenResponse;
/// The resulting account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalance;
/// The currency code of account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalanceCurrency;
/// The tip amount, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable tipAmount;
/// Address Verification Code signifying the level of verification achieved
@property (nonatomic, readonly, copy) NSString * _Nullable avsCode;
/// Raw AVS code as received from processor
@property (nonatomic, readonly, copy) NSString * _Nullable avsCodeRaw;
/// Card Verification  status code
@property (nonatomic, readonly, copy) NSString * _Nullable cvCode;
/// Raw CVV status code as returned by the processor
@property (nonatomic, readonly, copy) NSString * _Nullable cvCodeRaw;
/// Request (masked) sent to FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable requestData;
/// Response (masked) from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable responseData;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Produces a log statement enumerating all property values (does not perform log action)
///
/// returns:
/// A log statement enumerating all property values
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit27PosStoredTransactionRequest_")
@protocol PosStoredTransactionRequest <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull requestXml;
- (NSString * _Nonnull)getFreewayXml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7iFCCKit30FccPosStoredTransactionRequest")
@interface FccPosStoredTransactionRequest : NSObject <PosStoredTransactionRequest>
@property (nonatomic, readonly, copy) NSString * _Nonnull requestXml;
- (NSString * _Nonnull)getPosSyncId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFreewayXml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit19RawCardReadResponse_")
@protocol RawCardReadResponse <NSObject>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return Track1 data if the device was able to parse it. This may be empty or null if the device could not parse track1 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// @return Track2 data if the device was able to parse it. This may be empty or null if the device could not parse track2 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
/// @return A string representing the entry mode such as “swiped or “keyed”
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@end


SWIFT_CLASS("_TtC7iFCCKit22FccRawCardReadResponse")
@interface FccRawCardReadResponse : NSObject <RawCardReadResponse>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return Track1 data if the device was able to parse it. This may be empty or null if the device could not parse track1 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// @return Track2 data if the device was able to parse it. This may be empty or null if the device could not parse track2 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides details of a transaction stored offline. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit21StoreAndForwardResult_")
@protocol StoreAndForwardResult
/// Offline Request Id
@property (nonatomic, readonly, copy) NSString * _Nonnull offlineRequestId;
/// Online Request Id
@property (nonatomic, readonly, copy) NSString * _Nullable onlineRequestId;
/// Online Transaction Decision
@property (nonatomic, readonly, copy) NSString * _Nullable onlineDecision;
/// Online Transaction Reason Code
@property (nonatomic, readonly, copy) NSString * _Nullable onlineErrorCode;
/// Replay Status
@property (nonatomic, readonly, copy) NSString * _Nonnull replayStatus;
@end


/// Provides details of a transaction stored offline. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit24FccStoreAndForwardResult")
@interface FccStoreAndForwardResult : NSObject <StoreAndForwardResult>
/// Offline Request Id
@property (nonatomic, readonly, copy) NSString * _Nonnull offlineRequestId;
/// Online Request Id
@property (nonatomic, readonly, copy) NSString * _Nullable onlineRequestId;
/// Online Transaction Decision
@property (nonatomic, readonly, copy) NSString * _Nullable onlineDecision;
/// Online Transaction Reason Code
@property (nonatomic, readonly, copy) NSString * _Nullable onlineErrorCode;
/// Replay Status
@property (nonatomic, readonly, copy) NSString * _Nonnull replayStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides Store and Forward engine status. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit21StoreAndForwardStatus_")
@protocol StoreAndForwardStatus
/// Number of transactions stored offline currently available for replay
/// note:
/// This number reflects records that are available to be replayed based on the current time.  It may not reflect the total count of records awaiting replay as some records may not be eligible for replay until a later date
@property (nonatomic, readonly) NSUInteger offlineQueueSize;
/// Last date / time that a replay of queued records was attempted
@property (nonatomic, readonly, copy) NSDate * _Nullable lastReplayAttempt;
/// Counts of transactions stored offline based on status.
/// note:
/// Status keys are “complete” (replayed successfully), “incomplete” (replayed but declined), “offline” (replayed but failed), and “unknown” (unknown)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull statusCounts;
@end


/// Provides Store and Forward engine status. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit24FccStoreAndForwardStatus")
@interface FccStoreAndForwardStatus : NSObject <StoreAndForwardStatus>
/// Number of transactions stored offline currently available for replay
/// note:
/// This number reflects records that are available to be replayed based on the current time.  It may not reflect the total count of records awaiting replay as some records may not be eligible for replay until a later date
@property (nonatomic, readonly) NSUInteger offlineQueueSize;
/// Last date / time that a replay of queued records was attempted
@property (nonatomic, readonly, copy) NSDate * _Nullable lastReplayAttempt;
/// Counts of transactions stored offline based on status.
/// note:
/// Status keys are “complete” (replayed successfully), “incomplete” (replayed but declined), “offline” (replayed but failed), and “unknown” (unknown)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull statusCounts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response data element containing FreeWay token data
SWIFT_PROTOCOL("_TtP7iFCCKit13TokenResponse_")
@protocol TokenResponse
/// FreeWay token linked to the card data
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Expiration date for the FreeWay token
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenExpiration;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


/// Response data element containing FreeWay token data
SWIFT_CLASS("_TtC7iFCCKit16FccTokenResponse")
@interface FccTokenResponse : NSObject <TokenResponse>
/// FreeWay token linked to the card data
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Expiration date for the FreeWay token
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenExpiration;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit16ValidationResult_")
@protocol ValidationResult
/// indicates if the result is valid
@property (nonatomic, readonly) BOOL isValid;
/// if result is not valid, array of strings representing invalid fields and the associated reason for the anomaly, nil if result is valid
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable anomalies;
@end


/// Represents the result of parameter validation
SWIFT_CLASS("_TtC7iFCCKit19FccValidationResult")
@interface FccValidationResult : NSObject <ValidationResult>
/// indicates if the result is valid
@property (nonatomic, readonly) BOOL isValid;
/// if result is not valid, array of strings representing invalid fields and the associated reason for the anomaly, nil if result is valid
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable anomalies;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit11VersionInfo_")
@protocol VersionInfo
/// iFCC version
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccVersion;
/// iFCC build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccBuildNumber;
/// iMsrLib component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibVersionNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitVersion");
/// iMsrLib component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibBuildNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitBuildNumber");
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitBuildNumber;
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitBuildNumber;
/// FPPOICore component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreVersion;
/// FPPOICore component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreBuildNumber;
/// RUA SDK’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull ruaSDKVersion;
/// FPAmaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitVersion;
/// FPAmaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitBuildNumber;
@end


/// Providing version info for iFCC and its components. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit14FccVersionInfo")
@interface FccVersionInfo : NSObject <VersionInfo>
/// iFCC version
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccVersion;
/// iFCC build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccBuildNumber;
/// FPRuaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitVersion;
/// FPRuaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitBuildNumber;
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitBuildNumber;
/// FPPOICore component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreVersion;
/// FPPOICore component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreBuildNumber;
/// RUA SDK’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull ruaSDKVersion;
/// FPAmaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitVersion;
/// FPAmaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitBuildNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibVersionNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitVersion");
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibBuildNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitBuildNumber");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// The data elements needed to initiate a Follow-On Refund request
SWIFT_CLASS("_TtC7iFCCKit30FollowOnRefundOperationRequest")
@interface FollowOnRefundOperationRequest : FollowOnOperationRequest
/// The total amount of the request
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use IndustryDataType initializer");
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this FollowOnRefundOperationRequest instance
///
/// returns:
/// A string that can be used to log the FollowOnRefundOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC7iFCCKit24GiftCardOperationRequest")
@interface GiftCardOperationRequest : CardBasedOperationRequest
/// Creates a statement logging all values on this GiftCardOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit32GiftCardActivateOperationRequest")
@interface GiftCardActivateOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardActivateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number, note: It must be 8 characters long and must be composed of numeric characters only
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardActivateOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardActivateOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit31GiftCardCashoutOperationRequest")
@interface GiftCardCashoutOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardCashoutOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimalNumber * _Nullable)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardCashoutOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardCashoutOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit34GiftCardDeactivateOperationRequest")
@interface GiftCardDeactivateOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardDeactivateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimalNumber * _Nullable)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardDeactivateOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardDeactivateOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit31GiftCardInquiryOperationRequest")
@interface GiftCardInquiryOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardInquiryOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardInquiryOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardInquiryOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit29GiftCardIssueOperationRequest")
@interface GiftCardIssueOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardIssueOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardIssueOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardIssueOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



SWIFT_CLASS("_TtC7iFCCKit30GiftCardReloadOperationRequest")
@interface GiftCardReloadOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardReloadOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardReloadOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardReloadOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

typedef SWIFT_ENUM(NSInteger, GoodsIndicator, open) {
  GoodsIndicatorUnspecified = 0,
  GoodsIndicatorDigital = 1,
  GoodsIndicatorPhysical = 2,
};


SWIFT_CLASS("_TtC7iFCCKit20GoodsIndicatorBridge")
@interface GoodsIndicatorBridge : NSObject
+ (NSArray<NSNumber *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)allStrings SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)toString:(enum GoodsIndicator)goodsIndicator SWIFT_WARN_UNUSED_RESULT;
+ (enum GoodsIndicator)fromRawValue:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (enum GoodsIndicator)fromString:(NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7iFCCKit9HotelData")
@interface HotelData : NSObject <NSCopying, Validation>
@property (nonatomic, readonly, strong) NSNumber * _Nullable expectedDuration;
@property (nonatomic, readonly, copy) NSString * _Nonnull folioNumber;
@property (nonatomic, readonly, strong) NSNumber * _Nullable noShow;
@property (nonatomic, readonly, copy) NSDate * _Nullable checkInDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable checkOutDate;
@property (nonatomic, readonly, copy) NSString * _Nullable extraChargeTypes;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable roomRate;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable roomTax;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable extraChargeTotal;
@property (nonatomic, readonly, copy) NSString * _Nullable renterName;
- (nonnull instancetype)initWithExpectedDuration:(NSInteger)expectedDuration folioNumber:(NSString * _Nonnull)folioNumber noShow:(BOOL)noShow checkInDate:(NSDate * _Nonnull)checkInDate checkOutDate:(NSDate * _Nonnull)checkOutDate extraChargeTypes:(NSString * _Nonnull)extraChargeTypes roomRate:(NSDecimalNumber * _Nonnull)roomRate roomTax:(NSDecimalNumber * _Nonnull)roomTax extraChargeTotal:(NSDecimalNumber * _Nonnull)extraChargeTotal renterName:(NSString * _Nonnull)renterName OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use folio number initializer");
- (nonnull instancetype)initWithFolioNumber:(NSString * _Nonnull)folioNumber expectedDuration:(NSNumber * _Nullable)expectedDuration noShow:(NSNumber * _Nullable)noShow checkInDate:(NSDate * _Nullable)checkInDate checkOutDate:(NSDate * _Nullable)checkOutDate extraChargeTypes:(NSString * _Nullable)extraChargeTypes roomRate:(NSDecimalNumber * _Nullable)roomRate roomTax:(NSDecimalNumber * _Nullable)roomTax extraChargeTotal:(NSDecimalNumber * _Nullable)extraChargeTotal renterName:(NSString * _Nullable)renterName OBJC_DESIGNATED_INITIALIZER;
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents an IP based card reader options to be used during device setup
SWIFT_PROTOCOL("_TtP7iFCCKit24iFCCNetworkDeviceOptions_") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@protocol iFCCNetworkDeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
@property (nonatomic, readonly) NSInteger portNumber;
@end


/// Represents ICA card reader network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit23ICANetworkDeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface ICANetworkDeviceOptions : NSObject <iFCCCardReaderDeviceOptions, iFCCNetworkDeviceOptions>
/// Device Type
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Device Data
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Network Host Address
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
/// Network Port Number
@property (nonatomic) NSInteger portNumber;
/// Communication Interface
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents invoice header information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit13InvoiceHeader")
@interface InvoiceHeader : NSObject <NSCopying, Validation>
/// Invoice number (20 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable invoiceNumber;
/// invoice date/time
@property (nonatomic, readonly, copy) NSDate * _Nullable invoiceDate;
/// Purchase order number (25 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable customerPO;
/// Date of purchase order
@property (nonatomic, readonly, copy) NSDate * _Nullable purchaserOrderDate;
/// Type of goods - current values are “unspecified”, “digital” and “physical”, subject to change at any time, default if not provided is “unspecified”
@property (nonatomic, readonly) enum GoodsIndicator goodsIndicator;
/// RFU Date that the transaction will be considered to have happened on for batching and reporting purposes.
@property (nonatomic, readonly, copy) NSDate * _Nullable businessDate;
@property (nonatomic, readonly, copy) NSString * _Nullable purchaserCode;
- (nonnull instancetype)initWithInvoiceNumber:(NSString * _Nullable)invoiceNumber invoiceDate:(NSDate * _Nullable)invoiceDate customerPO:(NSString * _Nullable)customerPO purchaserOrderDate:(NSDate * _Nullable)purchaserOrderDate goodsIndicator:(enum GoodsIndicator)goodsIndicator businessDate:(NSDate * _Nullable)businessDate purchaserCode:(NSString * _Nullable)purchaserCode OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP7iFCCKit18LaneStatusDelegate_")
@protocol LaneStatusDelegate
/// Provides notification to the receiver that the lane is open and able to run transactions
/// \param device the device mapped to the lane
///
- (void)onLaneOpenedWithDevice:(id <iFCCCardReaderDevice> _Nonnull)device;
/// Provides notification to the receiver that the specfied lane is closed and unable to run transactions
/// \param laneId The laneId for the closed lane
///
- (void)onLaneClosedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_CLASS("_TtC7iFCCKit8LineItem")
@interface LineItem : NSObject
@property (nonatomic, copy) NSString * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSString * _Nullable productCode;
@property (nonatomic, readonly, copy) NSString * _Nullable productUPC;
@property (nonatomic, readonly, copy) NSString * _Nullable productSKU;
@property (nonatomic, readonly, copy) NSString * _Nullable productName;
@property (nonatomic, readonly, copy) NSString * _Nonnull productDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable commodityCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull unitPrice;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull totalAmount;
@property (nonatomic, readonly) BOOL taxIncludedFlag;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable taxAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable unitOfMeasure;
@property (nonatomic, readonly, copy) NSString * _Nonnull saleCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable discountAmount;
@property (nonatomic, readonly) BOOL discountFlag;
@property (nonatomic, readonly, copy) NSString * _Nullable productMake;
@property (nonatomic, readonly, copy) NSString * _Nullable productModel;
@property (nonatomic, readonly, copy) NSString * _Nullable productPartNumber;
@property (nonatomic, readonly, copy) NSString * _Nullable productYear;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial1;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial2;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial3;
@property (nonatomic, readonly, copy) NSString * _Nullable customerAssetId;
@property (nonatomic, readonly, copy) NSString * _Nullable promoCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable freightAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable customFormatId;
@property (nonatomic, readonly, copy) NSString * _Nullable custom1;
@property (nonatomic, readonly, copy) NSString * _Nullable custom2;
@property (nonatomic, readonly, copy) NSString * _Nullable custom3;
@property (nonatomic, readonly, copy) NSString * _Nullable custom4;
@property (nonatomic, readonly, copy) NSString * _Nullable custom5;
@property (nonatomic, readonly, copy) NSString * _Nullable custom6;
@property (nonatomic, readonly, copy) NSString * _Nullable custom7;
@property (nonatomic, readonly, copy) NSString * _Nullable custom8;
@property (nonatomic, readonly, copy) NSString * _Nullable custom9;
@property (nonatomic, readonly, copy) NSString * _Nullable payAlloc;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origUnitPrice;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origTotalAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable category;
@property (nonatomic, readonly, copy) NSString * _Nullable subCategory;
@property (nonatomic, readonly, copy) NSString * _Nullable eidIndicator;
- (nonnull instancetype)initWithProductCode:(NSString * _Nullable)productCode productUPC:(NSString * _Nullable)productUPC productSKU:(NSString * _Nullable)productSKU productName:(NSString * _Nullable)productName productDescription:(NSString * _Nonnull)productDescription commodityCode:(NSString * _Nullable)commodityCode unitPrice:(NSDecimalNumber * _Nonnull)unitPrice quantity:(NSInteger)quantity totalAmount:(NSDecimalNumber * _Nonnull)totalAmount taxIncludedFlag:(BOOL)taxIncludedFlag taxAmount:(NSDecimalNumber * _Nullable)taxAmount unitOfMeasure:(NSString * _Nullable)unitOfMeasure saleCode:(NSString * _Nonnull)saleCode discountAmount:(NSDecimalNumber * _Nullable)discountAmount discountFlag:(BOOL)discountFlag productMake:(NSString * _Nullable)productMake productModel:(NSString * _Nullable)productModel productPartNumber:(NSString * _Nullable)productPartNumber productYear:(NSString * _Nullable)productYear productSerial1:(NSString * _Nullable)productSerial1 productSerial2:(NSString * _Nullable)productSerial2 productSerial3:(NSString * _Nullable)productSerial3 customerAssetId:(NSString * _Nullable)customerAssetId promoCode:(NSString * _Nullable)promoCode freightAmount:(NSDecimalNumber * _Nullable)freightAmount customFormatId:(NSString * _Nullable)customFormatId custom1:(NSString * _Nullable)custom1 custom2:(NSString * _Nullable)custom2 custom3:(NSString * _Nullable)custom3 custom4:(NSString * _Nullable)custom4 custom5:(NSString * _Nullable)custom5 custom6:(NSString * _Nullable)custom6 custom7:(NSString * _Nullable)custom7 custom8:(NSString * _Nullable)custom8 custom9:(NSString * _Nullable)custom9 payAlloc:(NSString * _Nullable)payAlloc origUnitPrice:(NSDecimalNumber * _Nullable)origUnitPrice origTotalAmount:(NSDecimalNumber * _Nullable)origTotalAmount category:(NSString * _Nullable)category subCategory:(NSString * _Nullable)subCategory eidIndicator:(NSString * _Nullable)eidIndicator OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7iFCCKit9LineItems")
@interface LineItems : NSObject <NSCopying, Validation>
@property (nonatomic, readonly, copy) NSArray<LineItem *> * _Nonnull items;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItems:(NSArray<LineItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (void)addWithItem:(LineItem * _Nonnull)item;
- (void)removeWithItem:(LineItem * _Nonnull)item;
@end


/// Represents payment data that should be modified before submitting to FreeWay
SWIFT_CLASS("_TtC7iFCCKit19ModifiedPaymentData")
@interface ModifiedPaymentData : NSObject
/// The amount values of the transaction
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull purchaseTotal;
- (nonnull instancetype)initWithPurchaseTotal:(NSDecimalNumber * _Nonnull)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Represents network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20NetworkDeviceOptions")
@interface NetworkDeviceOptions : DeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
@property (nonatomic, readonly) NSUInteger portNumber;
/// Creates an instance of NetworkDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of NetworkDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType hostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSUInteger)portNumber deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



/// Progress messages for iFCC operations
typedef SWIFT_ENUM(NSInteger, OperationProgressType, open) {
/// iFCC is waiting for the card to be inserted or swiped
  OperationProgressTypeWaitingForCardInsert = 0,
/// Indicates that the card can be safely removed from the device
  OperationProgressTypeCardRemovalOK = 1,
/// The inserted card could not be used due to error - prompt user to swipe card
  OperationProgressTypeIccErrorPromptMagCardSwipe = 2,
/// The card must be re-inserted
  OperationProgressTypeReInsertCardRequired = 3,
/// An error was encountered during the previous swipe, and a new swipe is needed
  OperationProgressTypeSwipeErrorReSwipeRequested = 4,
/// The threshold for bad swipes was exceeded - a new payment method should be used
  OperationProgressTypeSwipeErrorBadSwipeThresholdExceeded = 5,
/// A chip card was swiped - prompt user to insert card
  OperationProgressTypeCardMustBeInserted = 6,
/// Card insertion detected
  OperationProgressTypeCardInserted = 7,
/// Card removal detected
  OperationProgressTypeCardRemoved = 8,
/// Card swipe detected
  OperationProgressTypeSwipeDetected = 9,
/// Communication with FreeWay has begun
  OperationProgressTypeFreeWayCommunicationStarted = 10,
/// Communication with FreeWay has ended
  OperationProgressTypeFreeWayCommunicationEnded = 11,
/// Card tap detected
  OperationProgressTypeTapDetected = 12,
/// The contactless interface failed to read the card, prompt user to insert or swipe card
  OperationProgressTypeContactlessInterfaceFailedTryContact = 13,
/// An error was encountered while reading contactless card
  OperationProgressTypeErrorReadingContactlessCard = 14,
/// Multiple contactless cards detected
  OperationProgressTypeMultipleContactlessCardsDetected = 15,
/// Contactless card still in field
  OperationProgressTypeContactlessCardStillInField = 16,
/// Contactless transaction reverted to contact
  OperationProgressTypeContactlessTransactionRevertedToContact = 17,
/// Contactless transaction fails, try again
  OperationProgressTypeContactlessApplicationNotSupported = 18,
/// Card processing has started and the card should not be removed
  OperationProgressTypeDoNotRemoveCard = 19,
/// Device is prompting for PIN entry
  OperationProgressTypeFirstPINPrompt = 20,
/// Device is prompting for PIN re-entry (most llikely due to an incorrect / bad PIN
  OperationProgressTypePinRetryPrompt = 21,
/// PIN entry on the device has succeeded
  OperationProgressTypePinEntrySuccessful = 22,
/// PIN entry on the device has failed
  OperationProgressTypePinEntryFailed = 23,
/// Device is prompting for the finsl PIN entry
  OperationProgressTypeFinalPINEntryPrompt = 24,
/// ICC application selection is complete
  OperationProgressTypeApplicationSelectionCompleted = 25,
/// Device started PIN entry
  OperationProgressTypePinEntryInProgress = 26,
/// Device started manual card entry
  OperationProgressTypeManualCardEntryInProgress = 27,
/// The inserted card is not supported - prompt user to swipe card
  OperationProgressTypeApplicationNotSupportedPromptMagCardSwipe = 28,
/// iFCC is waiting for the card to be inserted or swiped
  OperationProgressTypeWaitingForCardSwipe = 29,
/// Contactless EMV Payment Complete
  OperationProgressTypeContactlessEMVPaymentComplete = 30,
/// Waiting for tip amount selection
  OperationProgressTypeWaitingForTipAmountSelection = 31,
/// Waiting for ‘other’ tip amount entry
  OperationProgressTypeWaitingForAmountEntry = 32,
/// Waiting for credit / debit selection
  OperationProgressTypeWaitingForCreditDebitSelection = 33,
/// The chip card should be removed
  OperationProgressTypeCardShouldBeRemoved = 34,
/// Communication with the server has started
  OperationProgressTypeOnlineAuthorizationStarted = 35,
/// Communication with the server has ended.
  OperationProgressTypeOnlineAuthorizationEnded = 36,
/// The transaction was approved
  OperationProgressTypeTransactionApproved = 37,
/// The transaction was declined
  OperationProgressTypeTransactionDeclined = 38,
/// The transaction was canceled
  OperationProgressTypeTransactionCanceled = 39,
/// The transaction was approved but the card needs to be removed
  OperationProgressTypeTransactionApprovedWaitingOnCardRemoval = 40,
/// The transaction was declined but the card needs to be removed
  OperationProgressTypeTransactionDeclinedWaitingOnCardRemoval = 41,
/// The transaction was canceled but the card needs to be removed
  OperationProgressTypeTransactionCanceledWaitingOnCardRemoval = 42,
/// The POS is controlling the display, display was updated outside of a transaction, such as line items or custom form
  OperationProgressTypePosDisplayStarted = 43,
/// The card is not supported - prompt user to try another card
  OperationProgressTypeApplicationBlocked = 44,
/// The POI device is requesting Consumer Device Cardholder Verification Method (CD CVM)
  OperationProgressTypeSeePhoneWaitingForCard = 45,
};


SWIFT_CLASS("_TtC7iFCCKit27OperationProgressTypeBridge")
@interface OperationProgressTypeBridge : NSObject
+ (NSString * _Nonnull)toString:(enum OperationProgressType)operationProgressType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_PROTOCOL("_TtP7iFCCKit12PairedDevice_")
@protocol PairedDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


typedef SWIFT_ENUM(NSInteger, PalManifestResultInstallationDetail, open) {
/// The PAL was installed
  PalManifestResultInstallationDetailSuccessful = 0,
/// Device has this manifest installed, the variant is the same, and the installed version is the same or greater
  PalManifestResultInstallationDetailSkipped = 1,
/// The PAL failed to install
  PalManifestResultInstallationDetailFailed = 2,
};

typedef SWIFT_ENUM(NSInteger, PalProgressType, open) {
  PalProgressTypeFileWritePercentage = 0,
  PalProgressTypeFileWriteComplete = 1,
  PalProgressTypeRebootPending = 2,
  PalProgressTypeProcessingPendingCommands = 3,
};


/// Provides the result of a PAL update
SWIFT_PROTOCOL("_TtP7iFCCKit17PalUpdateDelegate_")
@protocol PalUpdateDelegate
/// Called when the POI Application Loader was not successful. This can be caused by many factors (invalid Manifest, incorrect commands, missing files)
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         response: details about the failed PAL operation
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)onFailureWithResponse:(id <PalUpdateFailureResponse> _Nonnull)response;
/// Called when the POI Application Loader went through all the stages without issue.  The files
/// have been uploaded to the POI and application (e.g. reboot) is complete.
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         response: details about the successful PAL operation
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)onSuccessWithResponse:(id <PalUpdateSuccessResponse> _Nonnull)response;
/// Provides the listener notification that a device undergoing a firmware update has issued a progress update message
/// \param progressMessage the message associated with the progress update
///
/// \param lane lane of the device which issued the progress message
///
- (void)onProgressUpdateWithProgressType:(enum PalProgressType)progressType progressMessage:(NSString * _Nonnull)progressMessage inLane:(NSString * _Nonnull)lane;
@end






SWIFT_PROTOCOL("_TtP7iFCCKit22PaymentOptionsDelegate_")
@protocol PaymentOptionsDelegate
/// Identifier of the current transaction operation
@property (nonatomic, readonly, strong) id <iFCCCancellableOperationIdentifier> _Nonnull operationIdentifier;
/// Lane identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Informs the current transaction of any modfied data used for the transaction
/// @param modifiedPaymentData - an optional ModifiedPaymentData object, if nil, the transaction continues with the previously supplied data
- (void)continuePayment:(ModifiedPaymentData * _Nullable)modifiedPaymentData;
@end


SWIFT_CLASS("_TtC7iFCCKit23PoiCardReaderDeviceInfo") SWIFT_DEPRECATED_MSG("Use FccCardReaderDeviceInfo")
@interface PoiCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Method to store an offline approved transaction via the POS
SWIFT_PROTOCOL("_TtP7iFCCKit17PosStoredDelegate_")
@protocol PosStoredDelegate
/// Method to store an offline approved transaction via the POS
/// \param request The PosStoredTransactionRequest object that the POS can utilize to get obtain the data to store to run later. 
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param inLane lane in which the operation was run
///
///
/// returns:
///
/// <ul>
///   <li>
///     A FailureAction.Mode, if the POS will store the transaction, then FailureAction.Mode.POS_STORED, otherwise FailureAction.Mode.ABORT
///   </li>
/// </ul>
- (enum Mode)storeTransactionWithRequest:(id <PosStoredTransactionRequest> _Nonnull)request operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)inLane SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PosStoredOperationRequestDelegate;

SWIFT_CLASS("_TtC7iFCCKit25PosStoredOperationRequest")
@interface PosStoredOperationRequest : OperationRequest
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId requestXml:(NSString * _Nonnull)requestXml posSyncId:(NSString * _Nonnull)posSyncId posSyncAttemptNumber:(NSInteger)posSyncAttemptNumber delegate:(id <PosStoredOperationRequestDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@end


@interface PosStoredOperationRequest (SWIFT_EXTENSION(iFCCKit)) <Validation>
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit33PosStoredOperationRequestDelegate_")
@protocol PosStoredOperationRequestDelegate
- (void)operationSucceededWithResult:(NSString * _Nonnull)result operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
- (void)operationFailedWithError:(NSError * _Nonnull)error operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
@end





/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit18RUAFileVersionInfo") SWIFT_DEPRECATED_MSG("Use FileVersionInfo")
@interface RUAFileVersionInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines behavior for managing the pairing process with ROAM based devices
/// note:
/// all methods are called on the main thread
SWIFT_PROTOCOL("_TtP7iFCCKit18RUAPairingDelegate_")
@protocol RUAPairingDelegate
/// Invoked when a ROAM based device pairing candidate provides a pairing passcode
/// \param passCode the BlueTooth pairing passcode reported by the pairing candidate
///
- (void)pairingConfirmationWithPasscodeWithPassCode:(NSString * _Nonnull)passCode;
/// Invoked when the pairing session is cancelled and no longer valid
- (void)pairingCancelled;
/// Invoked when a device has been detected via Audio Jack and pairing is about to be attempted
- (void)deviceFound;
/// Invoked when a device was previously found but is no longer visible while pairing is active
- (void)deviceLost;
/// Invoked when the pairing session encounters an error
/// \param error details of the pairing session error
///
- (void)pairingErrorWithError:(NSError * _Nonnull)error;
/// Invoked when pairing with a ROAM based device has completed successfully
/// \param device basic details of the ROAM device that has just completed pairing
///
- (void)pairingSucceededWithDevice:(id <PairedDevice> _Nonnull)device;
@end


/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit20RUAReaderVersionInfo") SWIFT_DEPRECATED_MSG("Use FccCardReaderDeviceInfo")
@interface RUAReaderVersionInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, strong) RUAFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) RUAFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<RUAFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<RUAFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP7iFCCKit22ReattachDeviceDelegate_")
@protocol ReattachDeviceDelegate <NSObject>
/// Provides notification to the receiver that the iFCC re-attach device has completed successfully
/// \param laneId The lane identifier from where the device was re-attached
///
- (void)onDeviceReattachedWithLaneId:(NSString * _Nonnull)laneId;
/// Provides notification to the receiver that the iFCC re-attach device has failed
/// \param laneId The lane identifier for the device
///
/// \param error The error that occurred, including what component failed and why
///
- (void)onReattachDeviceErrorWithLaneId:(NSString * _Nonnull)laneId error:(NSError * _Nonnull)error;
@end


/// Helper class for obtaining supported values for receipt settings
SWIFT_CLASS("_TtC7iFCCKit19ReceiptConfigBridge")
@interface ReceiptConfigBridge : NSObject
/// Represents the list of supported receipt language values
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull languages;)
+ (NSArray<NSString *> * _Nonnull)languages SWIFT_WARN_UNUSED_RESULT;
/// Represents the list of supported receipt format values
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull formats;)
+ (NSArray<NSString *> * _Nonnull)formats SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The data elements needed to initiate an Authorization request
SWIFT_CLASS("_TtC7iFCCKit22RefundOperationRequest")
@interface RefundOperationRequest : CardBasedOperationRequest
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of RefundOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this RefundOperationRequest instance
///
/// returns:
/// A string that can be used to log the RefundOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit18RemoveLaneDelegate_")
@protocol RemoveLaneDelegate <NSObject>
/// Provides notification to the receiver that the lane has been removed
/// \param laneId The lane identifier
///
- (void)onLaneRemovedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit22ResetEmvConfigDelegate_")
@protocol ResetEmvConfigDelegate
- (void)resetEmvConfigSucceededWithOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
- (void)resetEmvConfigFailedWithError:(NSError * _Nonnull)error operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
@end


/// A request object that provides data for a Sale Request to iFCC
SWIFT_CLASS("_TtC7iFCCKit20SaleOperationRequest")
@interface SaleOperationRequest : CardBasedOperationRequest
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of SaleOperationRequest with a single purchaseTotal using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with a single purchaseTotal using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of SaleOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this SaleOperationRequest instance
///
/// returns:
/// A string that can be used to log the SaleOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents shipping information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit8ShipFrom")
@interface ShipFrom : NSObject <NSCopying, Validation>
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCompany:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents shipping information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit6ShipTo")
@interface ShipTo : NSObject <NSCopying, Validation>
/// Name of the shipping company (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable shippingCompany;
/// Shipping method (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable shippingMethod;
/// Tracking number of shipment (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable trackingNumber;
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCompany:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email shippingCompany:(NSString * _Nullable)shippingCompany shippingMethod:(NSString * _Nullable)shippingMethod trackingNumber:(NSString * _Nullable)trackingNumber OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Specifies supported currency symbol placements in relation to the value
typedef SWIFT_ENUM(NSInteger, SymbolPlacement, open) {
  SymbolPlacementLeft = 0,
  SymbolPlacementRight = 1,
};


SWIFT_CLASS("_TtC7iFCCKit13TaxDetailItem")
@interface TaxDetailItem : NSObject
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, strong) NSNumber * _Nonnull amount;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type amount:(NSNumber * _Nonnull)amount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Represents amount data supplied with a request
SWIFT_CLASS("_TtC7iFCCKit17TransactionAmount")
@interface TransactionAmount : NSObject <NSCopying>
@property (nonatomic, strong) NSDecimalNumber * _Nonnull total;
@property (nonatomic, strong) NSDecimalNumber * _Nullable tip;
@property (nonatomic, strong) NSDecimalNumber * _Nullable taxTotal;
@property (nonatomic, strong) NSDecimalNumber * _Nullable discountTotal;
@property (nonatomic, copy) NSArray<TaxDetailItem *> * _Nullable taxDetailItems;
- (nonnull instancetype)init:(NSDecimalNumber * _Nonnull)total tip:(NSDecimalNumber * _Nullable)tip taxTotal:(NSDecimalNumber * _Nullable)taxTotal taxDetails:(NSArray<TaxDetailItem *> * _Nullable)taxDetails discountTotal:(NSDecimalNumber * _Nullable)discountTotal OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDecimalNumber * _Nonnull)total tip:(NSDecimalNumber * _Nullable)tip OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// The data elements needed to initiate a Void request
SWIFT_CLASS("_TtC7iFCCKit20VoidOperationRequest")
@interface VoidOperationRequest : FollowOnOperationRequest
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader initializer");
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this VoidOperationRequest instance
///
/// returns:
/// A string that can be used to log the VoidOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Central singleton element of the iFCC library. Must be initialized, is called when running operations with FreeWay
SWIFT_CLASS("_TtC7iFCCKit4iFCC")
@interface iFCC : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@protocol iFCCLoggingDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Sets the logging delegate
///
/// throws:
/// Error if the delegate cannot be registered
- (BOOL)registerLoggingDelegate:(id <iFCCLoggingDelegate> _Nonnull)loggingDelegate error:(NSError * _Nullable * _Nullable)error;
/// Removes the logging delegate
///
/// throws:
/// Error if the deregistration cannot be completed
- (BOOL)deregisterLoggingDelegateAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Requests logging information
///
/// returns:
/// logging information containing current log file name and archived log files
- (id <iFCCFileLoggingInfo> _Nullable)getFileLoggingInfo SWIFT_WARN_UNUSED_RESULT;
/// Determines if the POI device is currently attached to the specified lane
///
/// returns:
/// Boolean specifying whether or not the POI device is attached
- (BOOL)isDeviceAttachedInLane:(NSString * _Nonnull)laneIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Boolean specifying whether or not the lane is open
- (BOOL)isLaneOpenInLane:(NSString * _Nonnull)laneIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Begins an Authorization Operation
/// \param authorizationOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateAuthorizationOperationWithAuthorizationOperationRequest:(AuthorizationOperationRequest * _Nonnull)authorizationOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Capture Operation
/// \param captureOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateCaptureOperationWithCaptureOperationRequest:(CaptureOperationRequest * _Nonnull)captureOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Sale Operation
/// \param saleOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateSaleOperationWithSaleOperationRequest:(SaleOperationRequest * _Nonnull)saleOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Void Operation
/// \param voidOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateVoidOperationWithVoidOperationRequest:(VoidOperationRequest * _Nonnull)voidOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Refund Operation
/// \param refundOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateRefundOperationWithRefundOperationRequest:(RefundOperationRequest * _Nonnull)refundOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Follow-On Refund Operation (card required)
/// \param followOnRefundOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateFollowOnRefundOperationWithFollowOnRefundOperationRequest:(FollowOnRefundOperationRequest * _Nonnull)followOnRefundOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins an Adjustment Operation
/// \param adjustmentOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateAdjustmentOperationWithAdjustmentOperationRequest:(AdjustmentOperationRequest * _Nonnull)adjustmentOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Cancels operation (if there is one) in lane specified
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
/// \param operationIdentifier The Operation’s unique identifier that needs to be cancelled.
///
- (BOOL)cancelOperationInLane:(NSString * _Nonnull)laneIdentifier operationIdentifier:(id <iFCCCancellableOperationIdentifier> _Nonnull)operationIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Begins a Raw Card Read Operation
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateRawCardReadOperationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Issue Operation
/// \param giftCardIssueOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardIssueOperationWithGiftCardIssueOperationRequest:(GiftCardIssueOperationRequest * _Nonnull)giftCardIssueOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Activate Operation
/// \param giftCardActivateOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardActivateOperationWithGiftCardActivateOperationRequest:(GiftCardActivateOperationRequest * _Nonnull)giftCardActivateOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Reload Operation
/// \param giftCardReloadOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardReloadOperationWithGiftCardReloadOperationRequest:(GiftCardReloadOperationRequest * _Nonnull)giftCardReloadOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Inquiry Operation
/// \param giftCardInquiryOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardInquiryOperationWithGiftCardInquiryOperationRequest:(GiftCardInquiryOperationRequest * _Nonnull)giftCardInquiryOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Deactivate Operation
/// \param giftCardDeactivateOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardDeactivateOperationWithGiftCardDeactivateOperationRequest:(GiftCardDeactivateOperationRequest * _Nonnull)giftCardDeactivateOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Cashout Operation
/// \param giftCardCashoutOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardCashoutOperationWithGiftCardCashoutOperationRequest:(GiftCardCashoutOperationRequest * _Nonnull)giftCardCashoutOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@protocol iFCCLaneDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Registers an instance of iFCCLaneDelegate to receive callbacks from device operations run in a given lane
/// \param laneDelegate The delegate to receive callbacks from operations run in the given lane
///
/// \param laneIdentifier unique identifier of the lane with which the delegate is associated
///
///
/// throws:
/// If an error is encountered (ex. lane does not exist) it will be thrown by this function
- (BOOL)registerLaneDelegate:(id <iFCCLaneDelegate> _Nonnull)laneDelegate inLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Removes the operation delegate from a given lane
/// \param laneIdentifier The unique identifier of the lane from which the delegate is removed
///
///
/// throws:
/// Error if the deregistration cannot be completed
- (BOOL)deregisterLaneDelegateInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Requests version information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device version information cannot be completed
///
/// returns:
/// Container with reader version information
- (RUAReaderVersionInfo * _Nullable)getDeviceVersionInformationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getCardReaderDeviceInfo");
/// Requests device information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device information cannot be completed
///
/// returns:
/// Container with devicer information
- (id <CardReaderDeviceInfo> _Nullable)getDeviceInformationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getCardReaderDeviceInfo");
/// Requests device information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device information cannot be completed
///
/// returns:
/// Container with devicer information
- (id <CardReaderDeviceInfo> _Nullable)getCardReaderDeviceInfoInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests device reset in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
///
/// throws:
/// Error if the device reset cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)resetDeviceInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests firmware upgrade for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
/// \param firmwareURI - The location of the file used to update the firmware 
///
///
/// throws:
/// Error if the device firmware cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)updateFirmwareInLane:(NSString * _Nonnull)laneIdentifier firmwareURI:(NSString * _Nonnull)firmwareURI error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use runPalUpdate() to update firmware using a PAL package");
/// Requests Battery Status of the device in lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the battery status request fails
- (BOOL)requestBatteryStatusInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Requests current status for the Store and Forward engine
///
/// returns:
/// An optional container with currently available store and forward status information
- (id <StoreAndForwardStatus> _Nullable)requestStoreAndForwardStatusAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Forces Store and Forward engine replay event
///
/// throws:
/// Error if iFCC is not initialized
- (BOOL)startStoreAndForwardReplayAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Method is no longer supported");
/// Resolves a list of offline request ids to the corresponding real request id
/// \param offlineRequestIds - an array of offline request ids 
///
///
/// throws:
/// If an error is encountered while querying for the real request information it will be thrown by this function
///
/// returns:
/// An Array of StoreAndForwardResult objects containing the offline request id, associated real request id, decision code and reasonCode
- (NSArray<id <StoreAndForwardResult>> * _Nullable)resolveStoreAndForwardRequestIds:(NSArray<NSString *> * _Nonnull)offlineRequestIds error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests firmware upgrade for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
/// \param fileURI The location of the file used to update the firmware
///
/// \param palUpdateDelegate Provides the result of a PAL update
///
///
/// throws:
/// Error if the device firmware cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)runPalUpdateInLane:(NSString * _Nonnull)laneIdentifier fileURI:(NSString * _Nonnull)fileURI palUpdateDelegate:(id <PalUpdateDelegate> _Nonnull)palUpdateDelegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests a list of installed updates on a given device.
/// \param deviceId The identifier of the device (usually serial number)
///
///
/// throws:
/// Error if the installation history cannot be read
///
/// returns:
/// An Array of strings representing the currently installed manifests, variants and versions.
- (NSArray<NSString *> * _Nullable)getManifestVersionsWithDeviceId:(NSString * _Nonnull)deviceId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Registers an instance of iFCCLaneDelegate to receive notifications regarding POS stored transactions processed in a given lane
/// \param posStoredDelegate The delegate to receive callbacks for pos stored requests run in the given lane
///
/// \param laneIdentifier unique identifier of the lane with which the delegate is associated
///
///
/// throws:
/// If an error is encountered (ex. library not initialized, lane does not exist) it will be thrown by this function
- (BOOL)registerPosStoredDelegate:(id <PosStoredDelegate> _Nullable)posStoredDelegate inLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Submit a POS Stored Request to Freeway
/// \param posStoredTransactionRequest - The request object containing the data needed for the request 
///
/// \param delegate receives result of the request
///
///
/// throws:
/// If an error is encountered while initiating the request it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)submitPosStoredRequest:(id <PosStoredTransactionRequest> _Nonnull)posStoredTransactionRequest delegate:(id <PosStoredOperationRequestDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resets the EMV config files to the bundled version
/// \param includeContact - Reset contact 
///
/// \param includeContactless - Reset contactless 
///
/// \param delegate - Provides the result of the EMV Config reset 
///
///
/// throws:
/// If an error is encountered while initiating the request it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)resetEmvConfigInLane:(NSString * _Nonnull)laneIdentifier includeContact:(BOOL)includeContact includeContactless:(BOOL)includeContactless delegate:(id <ResetEmvConfigDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class iFCCLoggingConfiguration;
@protocol iFCCInitializationDelegate;
@protocol iFCCScanDevicesDelegate;
@protocol iFCCDeviceSetupDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Used when making all calls to iFCC, including initialization calls
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) iFCC * _Nonnull sharedInstance;)
+ (iFCC * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Provides version information
///
/// returns:
/// A VersionInfo object containing version info for iFCC and its components
- (id <VersionInfo> _Nonnull)getVersionInfo SWIFT_WARN_UNUSED_RESULT;
/// Determines if the iFCC library is currently initialized
///
/// returns:
/// Boolean specifying whether or not the iFCC library is initialized
- (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Determines if the POI device is currently attached
///
/// returns:
/// Boolean specifying whether or not the POI device is attached
/// @available(*, deprecated, message: “use isDeviceAttached or isLaneOpen”)
- (BOOL)isDeviceConnected SWIFT_WARN_UNUSED_RESULT;
/// Initializes iFCC
/// \param appSettingsData A Data object containing app config settings required by iFCC
///
/// \param loggingConfiguration A LoggingConfiguration object containing logging details
///
/// \param delegate receives callbacks from iFCC re: library initialization
///
///
/// throws:
/// The error object created by iFCC if there was an error with initialization
- (BOOL)initializeLibraryWithAppSettingsData:(NSData * _Nonnull)appSettingsData loggingConfiguration:(iFCCLoggingConfiguration * _Nonnull)loggingConfiguration delegate:(id <iFCCInitializationDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/// Deinitializes the iFCC library
///
/// throws:
/// The error object created by iFCC if there was an error with deinitialization
- (BOOL)deInitializeLibraryAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Force closes the iFCC library:
/// <ul>
///   <li>
///     any in progress operations will be terminated with no notifications
///   </li>
///   <li>
///     all lanes will be terminated with no notifications
///   </li>
///   <li>
///     all background processes will be terminated
///   </li>
///   <li>
///     the iFCC <em>must</em> be initialized afterwards via the initializeLibrary API
///   </li>
/// </ul>
- (void)forceCloseLibrary;
/// Removes a particular lane:
/// <ul>
///   <li>
///     any in process operations will be terminated with a device removed notification
///   </li>
///   <li>
///     the lane will be removed and the RemoveLaneDelegate will signify when complete
///   </li>
///   <li>
///     background processes such a SAF replays will continue to run
///   </li>
///   <li>
///     the iFCC setupDevices or attachDevice API must be called to establish a new lane
///   </li>
/// </ul>
- (BOOL)removeLane:(NSString * _Nonnull)laneId removeLaneDelegate:(id <RemoveLaneDelegate> _Nonnull)removeLaneDelegate error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of seting a card reader device based on the supplied options
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param deviceScanDelegate receives callbacks from iFCC regarding the device discovery, connection and set up process
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)scanDevicesWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions deviceScanDelegate:(id <iFCCScanDevicesDelegate> _Nonnull)deviceScanDelegate error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of seting a card reader device based on the supplied options
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param delegate receives callbacks from iFCC regarding the device discovery, connection and set up process
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)setupDevicesWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions delegate:(id <iFCCDeviceSetupDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/// Attempts to re-establish a connection to the previously connected device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the reconnection is attempted
///
///
/// throws:
/// Error if the device reconnection effort fails
- (BOOL)reconnectDeviceInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of establishing a connection to a single device without opening the lane
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param attachDeviceDelegate receives callbacks from iFCC regarding the attach device result
///
/// \param timeoutInSecs optional number of seconds to wait for the connection to be established, min: 60, max: 600, default: 120
///
///
/// throws:
/// The error object created by iFCC if there was an error with attaching the device
- (BOOL)attachDeviceWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions attachDeviceDelegate:(id <AttachDeviceDelegate> _Nonnull)attachDeviceDelegate timeoutInSecs:(NSNumber * _Nullable)timeoutInSecs error:(NSError * _Nullable * _Nullable)error;
/// Re-attaches the device in the specified lane
/// \param laneIdentifier Corresponds to the device’s lane identifier
///
/// \param reattachDeviceDelegate delegate to handle notifications when re-attach completes or fails
///
/// \param timeoutInSecs optional number of seconds to wait for the connection to be established, min: 30, max: 600, default: 120
///
///
/// throws:
/// The error object created by iFCC if there was an error re-attaching the device
- (BOOL)reattachDeviceInLane:(NSString * _Nonnull)laneIdentifier reattachDeviceDelegate:(id <ReattachDeviceDelegate> _Nonnull)reattachDeviceDelegate timeoutInSecs:(NSNumber * _Nullable)timeoutInSecs error:(NSError * _Nullable * _Nullable)error;
/// Opens the lane for the attached device
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
/// \param laneStatusDelegate receives callbacks from iFCC regarding the lane open
///
///
/// throws:
/// The error object created by iFCC if there was an error opening the lane
- (BOOL)openLaneInLane:(NSString * _Nonnull)laneIdentifier laneStatusDelegate:(id <LaneStatusDelegate> _Nonnull)laneStatusDelegate error:(NSError * _Nullable * _Nullable)error;
/// Closes the specified line so no transactions can be performed
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
///
/// throws:
/// The error object created by iFCC if there was an error closing the lane
- (BOOL)closeLaneInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of detaching the device in the specified lane
/// \param laneIdentifier The lane identifier
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)detachDeviceInLane:(NSString * _Nonnull)laneIdentifier detachDeviceDelegate:(id <DetachDeviceDelegate> _Nonnull)detachDeviceDelegate error:(NSError * _Nullable * _Nullable)error;
/// Clears Ama credentials from the iOS keychain
///
/// returns:
/// Boolean specifying whether or not the clearing of the credentials was successful
- (BOOL)clearAmaCredentials SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7iFCCKit28iFCCCardDataReceivedDelegate_")
@protocol iFCCCardDataReceivedDelegate
/// Provides card data information and a delegate to determine the next course of action for the transaction
/// \param basicCardData object containing basic card data
///
/// \param paymentOptionsDelegate delegate to determing how the transaction should proceed
///
- (void)getModifiedPaymentDataWithBasicCardData:(id <BasicCardData> _Nonnull)basicCardData paymentOptionsDelegate:(id <PaymentOptionsDelegate> _Nonnull)paymentOptionsDelegate;
@end




/// Represents a logging output definition
SWIFT_PROTOCOL("_TtP7iFCCKit17iFCCLoggingOutput_")
@protocol iFCCLoggingOutput
@end


/// Represent a console logging output instance
SWIFT_CLASS("_TtC7iFCCKit24iFCCConsoleLoggingOutput")
@interface iFCCConsoleLoggingOutput : NSObject <iFCCLoggingOutput>
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents supported device comminication interfaces
typedef SWIFT_ENUM(NSInteger, iFCCDeviceCommunicationInterface, open) {
/// BlueTooth
  iFCCDeviceCommunicationInterfaceBluetooth = 1,
/// Network
  iFCCDeviceCommunicationInterfaceIp = 2,
/// Audio Jack
  iFCCDeviceCommunicationInterfaceAudiojack = 3,
/// USB
  iFCCDeviceCommunicationInterfaceUsb = 4,
};

/// Represents the card reader device family used for device settings data
typedef SWIFT_ENUM(NSInteger, iFCCDeviceFamily, open) {
/// Unknown
  iFCCDeviceFamilyUnknown = 0,
/// Ingenico ROAM
  iFCCDeviceFamilyRoam = 1,
/// Ingenico UPP
  iFCCDeviceFamilyUpp = 2,
/// Ingenico RAM
  iFCCDeviceFamilyRam = 3,
/// Ingenico RBA
  iFCCDeviceFamilyRba = 4,
/// Ingenico Tetra family (UPP or RBA)
  iFCCDeviceFamilyTetra = 5,
};

typedef SWIFT_ENUM(NSInteger, iFCCDeviceLanguage, open) {
  iFCCDeviceLanguageEnglish = 0,
  iFCCDeviceLanguageSpanish = 1,
  iFCCDeviceLanguageFrench = 2,
};


/// Methods to receive events occurring during iFCC library initialization
SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCDeviceSetupDelegate_")
@protocol iFCCDeviceSetupDelegate
/// Provides notification to the receiver that iFCC device setup has completed successfully
/// \param availableDevices Devices available for use with iFCC
///
- (void)deviceSetupCompletedWithAvailableDevices:(NSArray<id <iFCCCardReaderDevice>> * _Nonnull)availableDevices;
/// Provides notification to the receiver that iFCC device setup has failed
/// \param error The error that occurred, including what component failed and why
///
- (void)deviceSetupFailedWithError:(NSError * _Nonnull)error;
@optional
/// Provides notification to the receiver that the end user needs to confirm the device pairing sequence, only applicable to the MOBY 5500
/// \param ledSequence An array of LEDSequenceItems representing the LED pairing sequence pattern
///
/// \param pairingConfirmationDelegate an iFCCPairingConfirmationDelegate instance for managing the pairing confirmation process
///
- (void)ledPairingConfirmationRequestedWithLedSequence:(NSArray<id <LEDSequenceItem>> * _Nonnull)ledSequence pairingConfirmationDelegate:(id <iFCCPairingConfirmationDelegate> _Nonnull)pairingConfirmationDelegate;
@end

/// Represents a type of card reader device
typedef SWIFT_ENUM(NSInteger, iFCCDeviceType, open) {
/// none
  iFCCDeviceTypeNone = 0,
/// Ingenico RP457c
  iFCCDeviceTypeRp457c = 1,
/// Ingenico Moby 5500
  iFCCDeviceTypeMoby5500 = 2,
/// Ingenico UPP Device
  iFCCDeviceTypeUpp = 3,
/// Ingenico RBA device
  iFCCDeviceTypeRba = 4,
};


/// Helper class for iFCCDeviceType enum
SWIFT_CLASS("_TtC7iFCCKit20iFCCDeviceTypeBridge")
@interface iFCCDeviceTypeBridge : NSObject
/// Retrieves the name for the specified device type
/// \param deviceType a device type enum
///
///
/// returns:
/// the name for the device type
+ (NSString * _Nonnull)deviceNameWithDeviceType:(enum iFCCDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family for the specified device type
/// \param deviceType a device type enum value
///
///
/// returns:
/// the device famliy enum based on the name
+ (enum iFCCDeviceFamily)deviceFamilyWithDeviceType:(enum iFCCDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family name for the specified device type
/// \param deviceFamily a device family enum value
///
///
/// returns:
/// the device family name
+ (NSString * _Nonnull)deviceFamilyNameWithDeviceFamily:(enum iFCCDeviceFamily)deviceFamily SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family name for the specified device name
/// \param deviceName a device name
///
///
/// returns:
/// the device family name
+ (NSString * _Nonnull)getDeviceFamilyNameWithDeviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device type for the specified name
/// \param deviceName a device name
///
///
/// returns:
/// the device type enum based on the name
+ (enum iFCCDeviceType)getDeviceTypeWithDeviceName:(NSString * _Nullable)deviceName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family for the specified name
/// \param deviceFamilyName a device family name
///
///
/// returns:
/// the device famliy enum based on the name
+ (enum iFCCDeviceFamily)getDeviceFamilyWithDeviceFamilyName:(NSString * _Nullable)deviceFamilyName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of supported devices
///
/// returns:
/// an array of all available device names
+ (NSArray<NSString *> * _Nonnull)availableDeviceNames SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of supported devices
/// \param deviceInterface a communication interface
///
///
/// returns:
/// an array of supported device names based on the specified communication interface
+ (NSArray<NSString *> * _Nonnull)supportedDeviceNamesFor:(enum iFCCDeviceCommunicationInterface)deviceInterface SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)supportedDeviceFamiliesFor:(enum iFCCDeviceCommunicationInterface)deviceInterface SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of device family names
///
/// returns:
/// an array of all available device names
+ (NSArray<NSString *> * _Nonnull)availableDeviceFamilyNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// iFCC Error Codes
SWIFT_CLASS("_TtC7iFCCKit22iFCCErrorCodeConstants")
@interface iFCCErrorCodeConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iFCCErrorDomain;)
+ (NSString * _Nonnull)iFCCErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iPoiErrorDomain;)
+ (NSString * _Nonnull)iPoiErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iMsrLibErrorDomain SWIFT_DEPRECATED_MSG("Use iPoiErrorDomain");)
+ (NSString * _Nonnull)iMsrLibErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger genericErrorCode;)
+ (NSInteger)genericErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger illegalArgumentException;)
+ (NSInteger)illegalArgumentException SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidThreadErrorCode;)
+ (NSInteger)invalidThreadErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger failedCastErrorCode;)
+ (NSInteger)failedCastErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger httpStatusCodeErrorCode;)
+ (NSInteger)httpStatusCodeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger badGatewayErrorCode;)
+ (NSInteger)badGatewayErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unexpectedResponseTypeReturnedErrorCode;)
+ (NSInteger)unexpectedResponseTypeReturnedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger existingLoggingDelegateErrorCode;)
+ (NSInteger)existingLoggingDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidLaneMapCountErrorCode;)
+ (NSInteger)invalidLaneMapCountErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidIFCCStateErrorCode;)
+ (NSInteger)invalidIFCCStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCInitializationDataMissing;)
+ (NSInteger)iFCCInitializationDataMissing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCConfigurationContextAlreadyInitialized;)
+ (NSInteger)iFCCConfigurationContextAlreadyInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidContactlessConfigurationErrorCode;)
+ (NSInteger)invalidContactlessConfigurationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unableToDeinitializeErrorCode;)
+ (NSInteger)unableToDeinitializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCInitializationFailedErrorCode;)
+ (NSInteger)iFCCInitializationFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger networkIsUnreachableErrorCode;)
+ (NSInteger)networkIsUnreachableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationCurrentlyInProgressErrorCode;)
+ (NSInteger)operationCurrentlyInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationResponseMissingExpectedReplyComponentErrorCode;)
+ (NSInteger)operationResponseMissingExpectedReplyComponentErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger inputParameterFormatErrorCode;)
+ (NSInteger)inputParameterFormatErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requiredPurchaseAmountDataNotAvailableErrorCode;)
+ (NSInteger)requiredPurchaseAmountDataNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger responseDeserializationErrorCode;)
+ (NSInteger)responseDeserializationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requestSerializationErrorCode;)
+ (NSInteger)requestSerializationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unableToCreateFreeWayUrlConnectionErrorCode;)
+ (NSInteger)unableToCreateFreeWayUrlConnectionErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cardWaitTimedOutErrorCode;)
+ (NSInteger)cardWaitTimedOutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationCurrentlyInProgressErrorCode;)
+ (NSInteger)noOperationCurrentlyInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationMetaDataFoundErrorCode;)
+ (NSInteger)noOperationMetaDataFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationIdentifierNotFoundErrorCode;)
+ (NSInteger)operationIdentifierNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationRequestNotFoundErrorCode;)
+ (NSInteger)operationRequestNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger serviceResponseElementNotFoundErrorCode;)
+ (NSInteger)serviceResponseElementNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noMappedDeviceAvailableErrorCode;)
+ (NSInteger)noMappedDeviceAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger posResponseNotAvailableErrorCode;)
+ (NSInteger)posResponseNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationNotSupportedErrorCode;)
+ (NSInteger)operationNotSupportedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cancelNotSupportedWhileCommunicatingWithFreeWayErrorCode;)
+ (NSInteger)cancelNotSupportedWhileCommunicatingWithFreeWayErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationInInvalidStateErrorCode;)
+ (NSInteger)operationInInvalidStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cardDataNotAvailableErrorCode;)
+ (NSInteger)cardDataNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger freeWayResponseDidNotContainUsableDataErrorCode;)
+ (NSInteger)freeWayResponseDidNotContainUsableDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger freeWayResponseDidNonSuccessHttpResponseCodeErrorCode;)
+ (NSInteger)freeWayResponseDidNonSuccessHttpResponseCodeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger emvTagValueNotAvailableErrorCode;)
+ (NSInteger)emvTagValueNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requestedDolNotAvailableErrorCode;)
+ (NSInteger)requestedDolNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger misMatchedEMVTagValueErrorCode;)
+ (NSInteger)misMatchedEMVTagValueErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger improperlyFormattedTagValueErrorCode;)
+ (NSInteger)improperlyFormattedTagValueErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger improperlyFormattedTLVDataErrorCode;)
+ (NSInteger)improperlyFormattedTLVDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneHasExistingOperationDelegateErrorCode;)
+ (NSInteger)laneHasExistingOperationDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredOperationDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredOperationDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCIsNotInitializedErrorCode;)
+ (NSInteger)iFCCIsNotInitializedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsCurrentlyIdleErrorCode;)
+ (NSInteger)laneIsCurrentlyIdleErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsCurrentlyBusyErrorCode;)
+ (NSInteger)laneIsCurrentlyBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDeviceDisconnectedErrorCode;)
+ (NSInteger)laneDeviceDisconnectedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneElementsMissingErrorCode;)
+ (NSInteger)laneElementsMissingErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOperationTypeErrorCode;)
+ (NSInteger)invalidOperationTypeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidLaneErrorCode;)
+ (NSInteger)invalidLaneErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cancelNotSupportedOnOperationError;)
+ (NSInteger)cancelNotSupportedOnOperationError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationIdentifierReturnedErrorCode;)
+ (NSInteger)noOperationIdentifierReturnedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidAIDSelectionListReceivedFromReaderErrorCode;)
+ (NSInteger)invalidAIDSelectionListReceivedFromReaderErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noCancellableOperationsFoundInLaneErrorCode;)
+ (NSInteger)noCancellableOperationsFoundInLaneErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger responseDeserializationNoIdentifierErrorCode;)
+ (NSInteger)responseDeserializationNoIdentifierErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger expectedResponsePayloadNotFoundErrorCode;)
+ (NSInteger)expectedResponsePayloadNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationNotPreparedErrorCode;)
+ (NSInteger)operationNotPreparedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsUnavailableErrorCode;)
+ (NSInteger)laneIsUnavailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger lanesBusyErrorCode;)
+ (NSInteger)lanesBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIllegalStateErrorCode;)
+ (NSInteger)laneIllegalStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneReleaseTimeoutErrorCode;)
+ (NSInteger)laneReleaseTimeoutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger networkIsCurrentlyBusyErrorCode;)
+ (NSInteger)networkIsCurrentlyBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceStatusUnavailableErrorCode;)
+ (NSInteger)deviceStatusUnavailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger voidIncompleteTransactionErrorCode;)
+ (NSInteger)voidIncompleteTransactionErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredLaneStatusDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredLaneStatusDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredAttachDeviceDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredAttachDeviceDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceIsCurrentlyAttachedErrorCode;)
+ (NSInteger)deviceIsCurrentlyAttachedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceNoLaneAvailableErrorCode;)
+ (NSInteger)deviceNoLaneAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceIsNotDisconnectedErrorCode;)
+ (NSInteger)deviceIsNotDisconnectedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger functionalityNotImplementedErrorCode;)
+ (NSInteger)functionalityNotImplementedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger internalStateCorruptedErrorCode;)
+ (NSInteger)internalStateCorruptedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger moduleStateSuspendedErrorCode;)
+ (NSInteger)moduleStateSuspendedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger couldNotCreateXMLParserErrorCode;)
+ (NSInteger)couldNotCreateXMLParserErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger xmlParsingFailedToStart;)
+ (NSInteger)xmlParsingFailedToStart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger appConfigurationUnknownErrorCode;)
+ (NSInteger)appConfigurationUnknownErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataRequestCompletedWithNoDataErrorCode;)
+ (NSInteger)binDataRequestCompletedWithNoDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataFailedToSerializeErrorCode;)
+ (NSInteger)binDataFailedToSerializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataInternalErrorErrorCode;)
+ (NSInteger)binDataInternalErrorErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataRequestCompletedWithNoDataErrorCode;)
+ (NSInteger)dccBinDataRequestCompletedWithNoDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataFailedToSerializeErrorCode;)
+ (NSInteger)dccBinDataFailedToSerializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataInternalErrorErrorCode;)
+ (NSInteger)dccBinDataInternalErrorErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOfflineRequestIdErrorCode;)
+ (NSInteger)invalidOfflineRequestIdErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOfflineStateErrorCode;)
+ (NSInteger)invalidOfflineStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replayInProgressErrorCode;)
+ (NSInteger)replayInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replaySleepTimerErrorCode;)
+ (NSInteger)replaySleepTimerErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replayShortCircuitTimerErrorCode;)
+ (NSInteger)replayShortCircuitTimerErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupErrorCode;)
+ (NSInteger)iFCCDeviceSetupErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupDataMissingErrorCode;)
+ (NSInteger)iFCCDeviceSetupDataMissingErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceScanNotSupported;)
+ (NSInteger)iFCCDeviceScanNotSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupFailedErrorCode;)
+ (NSInteger)iFCCDeviceSetupFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionFailedErrorCode;)
+ (NSInteger)iFCCDeviceConnectionFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionInProgressErrorCode;)
+ (NSInteger)iFCCDeviceConnectionInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionTimeoutErrorCode;)
+ (NSInteger)iFCCDeviceConnectionTimeoutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger genericPALErrorCode;)
+ (NSInteger)genericPALErrorCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// iFCC Error Key Constants
SWIFT_CLASS("_TtC7iFCCKit21iFCCErrorKeyConstants")
@interface iFCCErrorKeyConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedLaneMappingCountKeyConstant;)
+ (NSString * _Nonnull)expectedLaneMappingCountKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualLaneMappingCountKeyConstant;)
+ (NSString * _Nonnull)actualLaneMappingCountKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidParameterNameKeyConstant;)
+ (NSString * _Nonnull)invalidParameterNameKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull specifiedOperationIdentifierKeyConstant;)
+ (NSString * _Nonnull)specifiedOperationIdentifierKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull currentOperationStateKeyConstant;)
+ (NSString * _Nonnull)currentOperationStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull httpErrorHTTPStatusCodeKeyConstant;)
+ (NSString * _Nonnull)httpErrorHTTPStatusCodeKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emvTagKeyConstant;)
+ (NSString * _Nonnull)emvTagKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tlvDataErrorReasonKeyConstant;)
+ (NSString * _Nonnull)tlvDataErrorReasonKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull illegalArgumentNameKeyConstant;)
+ (NSString * _Nonnull)illegalArgumentNameKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedIFCCStateKeyConstant;)
+ (NSString * _Nonnull)expectedIFCCStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualIFCCStateKeyConstant;)
+ (NSString * _Nonnull)actualIFCCStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedLaneStateKeyConstant;)
+ (NSString * _Nonnull)expectedLaneStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualLaneStateKeyConstant;)
+ (NSString * _Nonnull)actualLaneStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestedLaneActionKeyConstant;)
+ (NSString * _Nonnull)requestedLaneActionKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualUrlKeyConstant;)
+ (NSString * _Nonnull)actualUrlKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidParameterAnomaliesConstant;)
+ (NSString * _Nonnull)invalidParameterAnomaliesConstant SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a file logging output instance with assoicated details
SWIFT_CLASS("_TtC7iFCCKit21iFCCFileLoggingOutput")
@interface iFCCFileLoggingOutput : NSObject <iFCCLoggingOutput>
/// URL to store log files
@property (nonatomic, readonly, copy) NSURL * _Nonnull fileLocation;
/// prefix for file name, suffix is date, extension is log as in <prefix>-YYYY-MM-DD.log, default is “iFCC”
@property (nonatomic, readonly, copy) NSString * _Nonnull filePrefix;
/// number of days to keep log files on system, default is 7
@property (nonatomic, readonly) NSInteger daysToKeep;
/// number of days to store in one log file, default is one
@property (nonatomic, readonly) NSInteger daysPerLog;
/// maximum file size in megabytes for a log file, if the size limit is reached, the file is archived and a new one is created (has precedence over daysPerLog)
@property (nonatomic, readonly) NSUInteger maximumFileSizeInMB;
- (nullable instancetype)initWithFileLocation:(NSURL * _Nonnull)fileLocation filePrefix:(NSString * _Nonnull)filePrefix daysToKeep:(NSInteger)daysToKeep daysPerLog:(NSInteger)daysPerLog maximumFileSizeInMB:(NSUInteger)maximumFileSizeInMB OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Methods to receive events occurring during iFCC library initialization and operation
SWIFT_PROTOCOL("_TtP7iFCCKit26iFCCInitializationDelegate_")
@protocol iFCCInitializationDelegate
/// Notifies receiver initialization of iFCC has completed successfully.
- (void)initializationCompleted;
/// Notifies receiver initialization of iFCC has failed.
/// \param error The error that occurred, including what component failed and why.
///
- (void)initializationFailedWithError:(NSError * _Nonnull)error;
/// Notifies receiver deinitialization of iFCC has completed .
- (void)deinitializationCompleted;
@end


/// Methods to receive events associated with the processing of an iFCC operation.
SWIFT_PROTOCOL("_TtP7iFCCKit16iFCCLaneDelegate_")
@protocol iFCCLaneDelegate
/// Provides progress and status messages to the listener related to a specific operation previously initiated within the lane
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
/// \param progressType type of message
///
- (void)operationProgressUpdateForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane progressType:(enum OperationProgressType)progressType;
/// Provides the listener notification of approval of a previously initiated operation in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationApprovedWithResponse:(id <POSResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of decline of a previously initiated operation in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationDeclinedWithResponse:(id <POSResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Notifies the listener that a previously initiated operation within the lane has failed
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
/// \param error details of the error causing the failure
///
- (void)operationFailedForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Notifies the listener that a previously initiated operation within the lane has completed
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationCompletedForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane is reconnecting
/// \param lane lane in which the associated device is reconnecting
///
- (void)deviceReconnectingWithLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane has reported an error
/// \param lane lane in which the associated device reported the error
///
/// \param error details of the error by the device
///
- (void)deviceErrorWithLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Notifies the listener that the device mapped to the lane has disconnected
/// \param lane lane from which the device disconnected
///
- (void)deviceDisconnectedWithLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane has disconnected due to a system backgrounding notification
/// \param lane lane from which the device disconnected
///
- (void)deviceDisconnectedWhileBackgroundingWithLane:(NSString * _Nonnull)lane SWIFT_DEPRECATED_MSG("no longer supported, use deviceDisconnected");
/// Notifies the listener that a device mapped to the lane has connected
/// \param lane lane to which the device connected
///
- (void)deviceConnectedWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of successful battery status request
/// \param batteryStatus provides status of the device battery
///
/// \param lane lane in which the operation was run
///
- (void)requestBatteryStatusSucceededWithBatteryStatus:(id <DeviceBatteryStatus> _Nonnull)batteryStatus inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of  battery status request failure
/// \param error details of the battery status request failure
///
/// \param lane lane in which the operation was run
///
- (void)requestBatteryStatusFailedWithError:(NSError * _Nonnull)error inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device reset success
/// \param lane lane in which the reset succeeded
///
- (void)deviceResetSucceededWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device reset failed
/// \param lane lane in which the reset failed
///
/// \param error details of the reset failure
///
- (void)deviceResetFailedWithLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Provides the listener notification of device entering firmware update mode
/// \param lane lane in which the device entered firmware progress was updates
///
- (void)firmwareUpdateModeEnteredWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification that a device undergoing a firmware update has issued a progress update message
/// \param progressMessage the message associated with the progress update
///
/// \param lane lane of the device which issued the progress message
///
- (void)firmwareUpdateProgressUpdateWithProgressMessage:(NSString * _Nonnull)progressMessage inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device firmware update succeeded
/// \param lane lane in which the device firmware succeeded
///
- (void)firmwareUpdateSucceededWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device firmware update failed
/// \param lane lane in which the device firmware update failed
///
/// \param error details of the device firmware update failure
///
- (void)firmwareUpdateFailedInLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Provides the listener notification of device firmware update was cancelled
/// \param lane lane in which the device firmware update was cancelled
///
- (void)firmwareUpdateCanceledInLane:(NSString * _Nonnull)lane;
/// Provides the listener  a card read operation completed in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)cardReadOperationResultWithResponse:(id <CardReadResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification that the registered lane delegate is being released due to device setup
/// \param lane lane in which the device delegate is being released
///
- (void)laneDelegateReleasingWithLane:(NSString * _Nonnull)lane;
@end


/// Helper class for  bridging iFCC language enums and associated properties
SWIFT_CLASS("_TtC7iFCCKit18iFCCLanguageBridge")
@interface iFCCLanguageBridge : NSObject
/// Returns the device language enum for the given language name
/// \param fromString - the name of the language 
///
///
/// returns:
/// the iFCCDeviceLanguage associated with the name or the default of iFCCDeviceLanguage.english if the supplied fromString parameter value is not valid
+ (enum iFCCDeviceLanguage)deviceLanguageFromString:(NSString * _Nonnull)fromString SWIFT_WARN_UNUSED_RESULT;
/// Represents a list of the supported lanaguage names
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull supportedLanguageNames;)
+ (NSArray<NSString *> * _Nonnull)supportedLanguageNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class iFCCModuleLoggingLevel;
enum iFCCLoggingLevel : NSInteger;
enum iFCCLoggingModule : NSInteger;

/// Helper class for  bridging iFCC logging enums and associated properties
SWIFT_CLASS("_TtC7iFCCKit17iFCCLoggingBridge")
@interface iFCCLoggingBridge : NSObject
/// Creates an iFCCModuleLoggingLevel object for the specified module name and the level name
/// \param moduleName - the name of the module 
///
/// \param levelName - the name of the logging level 
///
///
/// returns:
/// A valid iFCCModuleLoggingLevel or nil if the moduleName or levelName is not valid
+ (iFCCModuleLoggingLevel * _Nullable)getiFCCModuleLoggingLevelWithModuleName:(NSString * _Nonnull)moduleName levelName:(NSString * _Nonnull)levelName SWIFT_WARN_UNUSED_RESULT;
/// Get the name of the specified logging level
/// \param level -  the specified iFCCLoggingLevel 
///
///
/// returns:
/// The name of the level
+ (NSString * _Nonnull)loggingLevelNameFor:(enum iFCCLoggingLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Get all of the iFCCLoggingLevel names
///
/// returns:
/// A string array containing the names of all of the iFCCLoggingLevels
+ (NSArray<NSString *> * _Nonnull)loggingLevelNames SWIFT_WARN_UNUSED_RESULT;
/// Get the name of the specified logging module
/// \param loggingModule -  the specified iFCCLoggingModule 
///
///
/// returns:
/// The name of the module
+ (NSString * _Nonnull)loggingModuleNameFor:(enum iFCCLoggingModule)loggingModule SWIFT_WARN_UNUSED_RESULT;
/// Get all of the iFCCLoggingModule names
///
/// returns:
/// A string array containing the names of all of the iFCCLoggingModules
+ (NSArray<NSString *> * _Nonnull)loggingModulesNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class iFCCLoggingLevels;

/// Represents the logging settings for iFCC
SWIFT_CLASS("_TtC7iFCCKit24iFCCLoggingConfiguration")
@interface iFCCLoggingConfiguration : NSObject
/// an array of outputs specifying where to write logging messages
@property (nonatomic, readonly, copy) NSArray<id <iFCCLoggingOutput>> * _Nonnull outputs;
/// settings for logging levels for modules within iFCC
@property (nonatomic, readonly, strong) iFCCLoggingLevels * _Nonnull levels;
@property (nonatomic, readonly) BOOL enableCommsLogging;
- (nonnull instancetype)initWithOutputs:(NSArray<id <iFCCLoggingOutput>> * _Nonnull)outputs levels:(iFCCLoggingLevels * _Nonnull)levels enableCommsLogging:(BOOL)enableCommsLogging OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Methods to receive events occurring during iFCC library initialization and operation
SWIFT_PROTOCOL("_TtP7iFCCKit19iFCCLoggingDelegate_")
@protocol iFCCLoggingDelegate
/// Provides logging messages
/// \param message The log message
///
- (void)writeWithMessage:(NSString * _Nonnull)message;
@end

/// Represents a heirarchical logging level for a log message
typedef SWIFT_ENUM(NSInteger, iFCCLoggingLevel, open) {
/// no logging
  iFCCLoggingLevelNone = 0,
/// error messages
  iFCCLoggingLevelError = 1,
/// warning messages
  iFCCLoggingLevelWarn = 2,
/// info messages
  iFCCLoggingLevelInfo = 3,
/// debug message
  iFCCLoggingLevelDebug = 4,
/// verbose message
  iFCCLoggingLevelVerbose = 5,
};


/// Represents logging level details for iFCC
SWIFT_CLASS("_TtC7iFCCKit17iFCCLoggingLevels")
@interface iFCCLoggingLevels : NSObject
/// default logging level if a module level is not supplied
@property (nonatomic, readonly) enum iFCCLoggingLevel defaultLevel;
/// represents non-default logging levels for modules
@property (nonatomic, readonly, copy) NSArray<iFCCModuleLoggingLevel *> * _Nullable customLevels;
- (nonnull instancetype)initWithDefaultLevel:(enum iFCCLoggingLevel)defaultLevel customLevels:(NSArray<iFCCModuleLoggingLevel *> * _Nullable)customLevels OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents iFCC Logging modules for assigning LogLevels
typedef SWIFT_ENUM(NSInteger, iFCCLoggingModule, open) {
/// Library Initialization
  iFCCLoggingModuleLibraryInitialization = 0,
/// Device Setup
  iFCCLoggingModuleDeviceSetup = 1,
/// Device Operation
  iFCCLoggingModuleDeviceOperation = 2,
/// Device Messaging
  iFCCLoggingModuleDeviceMessaging = 3,
/// FreeWay Operation
  iFCCLoggingModuleFreeWayOperation = 4,
/// Store and Forward Processing
  iFCCLoggingModuleStoreAndForward = 5,
/// Configuration Update
  iFCCLoggingModuleConfigurationUpdate = 6,
};



/// Represents a module and a logging level
SWIFT_CLASS("_TtC7iFCCKit22iFCCModuleLoggingLevel")
@interface iFCCModuleLoggingLevel : NSObject
/// name of the logging module
@property (nonatomic, readonly, getter=module) enum iFCCLoggingModule module_;
/// logging level for the module
@property (nonatomic, readonly) enum iFCCLoggingLevel level;
- (nonnull instancetype)initWithModule:(enum iFCCLoggingModule)module_ level:(enum iFCCLoggingLevel)level OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// iFCC Notification Key Constants
SWIFT_CLASS("_TtC7iFCCKit25iFCCNotificationConstants")
@interface iFCCNotificationConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusNotificationNameValue;)
+ (NSString * _Nonnull)binMgrStatusNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrErrorNotificationNameValue;)
+ (NSString * _Nonnull)binMgrErrorNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrErrorNotificationKey;)
+ (NSString * _Nonnull)binMgrErrorNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusNotificationKey;)
+ (NSString * _Nonnull)binMgrStatusNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrDateTimeNotificationKey;)
+ (NSString * _Nonnull)binMgrDateTimeNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataLoadedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataLoadedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataSavedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataSavedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataUpdateRequestedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataUpdateRequestedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataUpdateReceivedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataUpdateReceivedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusNotificationNameValue;)
+ (NSString * _Nonnull)dccBinMgrStatusNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrErrorNotificationNameValue;)
+ (NSString * _Nonnull)dccBinMgrErrorNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrErrorNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrErrorNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrStatusNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrDateTimeNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrDateTimeNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataLoadedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataLoadedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataSavedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataSavedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataUpdateRequestedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataUpdateRequestedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataUpdateReceivedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataUpdateReceivedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayStartedNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayStartedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayStartedNotificationCountValue;)
+ (NSString * _Nonnull)offlineReplayStartedNotificationCountValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayFailedNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayFailedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayFailedNotificationReason;)
+ (NSString * _Nonnull)offlineReplayFailedNotificationReason SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationOfflineId;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationOfflineId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationRequestId;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationRequestId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationReason;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationReason SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayCompleteNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayCompleteNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayCompleteNotificationCountValue;)
+ (NSString * _Nonnull)offlineReplayCompleteNotificationCountValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull amaPALPackageStagedNotificationNameValue;)
+ (NSString * _Nonnull)amaPALPackageStagedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull amaPALPackageStagedNotificationFileURL;)
+ (NSString * _Nonnull)amaPALPackageStagedNotificationFileURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIView;

SWIFT_PROTOCOL("_TtP7iFCCKit31iFCCPairingConfirmationDelegate_")
@protocol iFCCPairingConfirmationDelegate
/// Notifies the Pairing Device to display the LED sequence on the supplied view
/// @param containerView - an UIView derived object on which the LED sequence will be displayed
- (void)showLEDPairingSequenceInView:(UIView * _Nonnull)containerView;
/// Confirms the LED pairing sequence
- (void)confirmLEDPairingSequence;
/// Cancels the LED pairing sequence
- (void)cancelLEDPairingSequence;
/// Restarts the display of the LED pairing sequence
- (void)restartLEDPairingSequence;
@end


/// Central singleton element for pairing the RP457c
SWIFT_CLASS("_TtC7iFCCKit18iFCCPairingService")
@interface iFCCPairingService : NSObject
/// Used when making all calls to iFCCPairingService
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) iFCCPairingService * _Nonnull sharedInstance;)
+ (iFCCPairingService * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Called to begin pairing with an RUA Device
/// \param pairingDelegate Delegate receiving event notifications and status updates associated with the Bluetooth pairings a ROAM-based device
///
///
/// throws:
/// If an error is encountered during pairing (ex. iFCC not initialized) it will be thrown by this function
- (BOOL)initiatePairingWithRUADeviceWithPairingDelegate:(id <RUAPairingDelegate> _Nonnull)pairingDelegate error:(NSError * _Nullable * _Nullable)error;
/// Called to cancel a pairing that is in-progress
///
/// throws:
/// If an error is encountered during cancellation (ex. iFCC not in Pairing state) it will be thrown by this function
- (BOOL)cancelPairingAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Represents RBA card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20iFCCRBADeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface iFCCRBADeviceOptions : ICANetworkDeviceOptions
/// Creates an instance of iFCCRBADeviceOptions
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of iFCCRBADeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithHostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSInteger)portNumber deviceData:(NSData * _Nonnull)deviceData OBJC_DESIGNATED_INITIALIZER;
@end

enum iFCCROAMDeviceType : NSInteger;

/// Represents ROAM card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit21iFCCROAMDeviceOptions")
@interface iFCCROAMDeviceOptions : NSObject <iFCCCardReaderDeviceOptions>
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Creates an instance of iFCCROAMDeviceOptions for a USB connection
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)USB_OPTIONSWithRoamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions for a Bluetooth connection
/// \param identifier the device identifier
///
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)BLUETOOTH_OPTIONSWithIdentifier:(NSString * _Nonnull)identifier roamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions for an AUDIOJACK connection
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)AUDIOJACK_OPTIONSWithDeviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions
/// \param identifier the device identifier
///
/// \param roamCommunicationInterface type of communication
///
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier roamCommunicationInterface:(enum iFCCDeviceCommunicationInterface)roamCommunicationInterface roamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactEMVDataDebugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactlessEMVDataDebugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, iFCCROAMDeviceType, open) {
  iFCCROAMDeviceTypeRp457cBT = 0,
  iFCCROAMDeviceTypeRp457cAJ = 1,
  iFCCROAMDeviceTypeMoby5500 = 2,
};


/// Methods to receive events occurring during iFCC scan
SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCScanDevicesDelegate_")
@protocol iFCCScanDevicesDelegate
@optional
/// Provides notification to the receiver that iFCC device scan has completed successfully
/// \param availableDevices Devices available for use with iFCC
///
/// \param deviceType type of device scan returned
///
- (void)deviceScanCompletedWithAvailableDevices:(NSArray<NSString *> * _Nonnull)availableDevices deviceType:(NSString * _Nonnull)deviceType;
@end


/// Represents UPP card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20iFCCUPPDeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface iFCCUPPDeviceOptions : ICANetworkDeviceOptions
/// Creates an instance of iFCCUPPDeviceOptions
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of iFCCUPPDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithHostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSInteger)portNumber deviceData:(NSData * _Nonnull)deviceData OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef IFCCKIT_SWIFT_H
#define IFCCKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iFCCKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol ValidationResult;

SWIFT_PROTOCOL("_TtP7iFCCKit10Validation_")
@protocol Validation
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Base class for iFCC operation requests
SWIFT_CLASS("_TtC7iFCCKit16OperationRequest")
@interface OperationRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class InvoiceHeader;
@class BillTo;
@class ShipTo;
@class ShipFrom;
@class HotelData;
@class LineItems;

/// Base class for iFCC FreeWay operation requests
SWIFT_CLASS("_TtC7iFCCKit23FreeWayOperationRequest")
@interface FreeWayOperationRequest : OperationRequest <Validation>
/// Merchant-provided reference code
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Merchant-provided invoice header
@property (nonatomic, readonly, strong) InvoiceHeader * _Nullable invoiceHeader;
/// Identifier of the register making the operation request.
/// note:
/// It must be 8 characters long and must be composed of numeric characters only
@property (nonatomic, readonly, copy) NSString * _Nonnull registerId;
/// Identity of the clerk requesting the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull clerkId;
/// The serial number of the connected Ingenico device
@property (nonatomic, readonly, copy) NSString * _Nullable clientDeviceId;
/// BillTo data associated with the request
@property (nonatomic, readonly, strong) BillTo * _Nullable billTo;
/// ShipTo data associated with the request
@property (nonatomic, readonly, strong) ShipTo * _Nullable shipTo;
@property (nonatomic, readonly, strong) ShipFrom * _Nullable shipFrom;
@property (nonatomic, readonly, strong) HotelData * _Nullable hotelData;
@property (nonatomic, readonly, strong) LineItems * _Nullable lineItems;
- (void)addBillTo:(BillTo * _Nullable)billTo;
- (void)addShipTo:(ShipTo * _Nullable)shipTo;
- (void)addShipFrom:(ShipFrom * _Nullable)shipFrom;
- (void)addLineItems:(LineItems * _Nullable)lineItems;
- (void)addHotelData:(HotelData * _Nullable)hotelData;
/// Creates a statement logging all values on this OperationRequest instance
///
/// returns:
/// A string that can be used to log the OperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Base class for iFCC FreeWay follow on operation requests
SWIFT_CLASS("_TtC7iFCCKit24FollowOnOperationRequest")
@interface FollowOnOperationRequest : FreeWayOperationRequest
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end

@class TransactionAmount;
@class AuthorizationData;

/// Base class for Authorization Update Request objects
SWIFT_CLASS("_TtC7iFCCKit35AuthorizationUpdateOperationRequest")
@interface AuthorizationUpdateOperationRequest : FollowOnOperationRequest
/// Amount associated with the requested operation (depreciated)
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationUpdateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param billTo Optional BillTo data assocatied with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional LineItems data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this AdjustmentOperationRequest instance
///
/// returns:
/// A string that can be used to log the AdjustmentOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// The data elements needed to initiate an Adjustment request
SWIFT_CLASS("_TtC7iFCCKit26AdjustmentOperationRequest")
@interface AdjustmentOperationRequest : AuthorizationUpdateOperationRequest
/// Creates a statement logging all values on this AdjustmentOperationRequest instance
///
/// returns:
/// A string that can be used to log the AdjustmentOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
@end

@protocol iFCCCardReaderDevice;
@protocol iFCCCardReaderDeviceOptions;
@protocol LEDSequenceItem;
@protocol iFCCPairingConfirmationDelegate;

SWIFT_PROTOCOL("_TtP7iFCCKit20AttachDeviceDelegate_")
@protocol AttachDeviceDelegate <NSObject>
/// Provides notification to the receiver that iFCC attach device has completed successfully
/// \param device The attached device for use with iFCC
///
- (void)onDeviceAttachedWithDevice:(id <iFCCCardReaderDevice> _Nonnull)device;
/// Provides notification to the receiver that the iFCC attach device has failed
/// \param deviceOptions The device options supplied on the attachDevice call
///
/// \param error The error that occurred, including what component failed and why
///
- (void)onAttachDeviceErrorWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions error:(NSError * _Nonnull)error;
@optional
/// Provides notification to the receiver that the end user needs to confirm the device pairing sequence, only applicable to the MOBY 5500
/// \param ledSequence An array of LEDSequenceItems representing the LED pairing sequence pattern
///
/// \param pairingConfirmationDelegate an iFCCPairingConfirmationDelegate instance for managing the pairing confirmation process
///
- (void)ledPairingConfirmationRequestedWithLedSequence:(NSArray<id <LEDSequenceItem>> * _Nonnull)ledSequence pairingConfirmationDelegate:(id <iFCCPairingConfirmationDelegate> _Nonnull)pairingConfirmationDelegate;
@end

@class NSDecimalNumber;
enum ElectronicCommerceIndicator : NSInteger;
@class NSNumber;

/// Provides additional authorization features related to an operation request
SWIFT_CLASS("_TtC7iFCCKit17AuthorizationData")
@interface AuthorizationData : NSObject <NSCopying, Validation>
/// Indicates whether a partial authorization can be accepted by the merchant
@property (nonatomic, readonly) BOOL allowPartial;
/// If available, indicates to return the balance of the account used
@property (nonatomic, readonly) BOOL returnBalance;
/// Authorization code previously obtained by phone
@property (nonatomic, readonly, copy) NSString * _Nullable verbalAuthCode;
/// Used in functionality that allows support for local ticket searching in some Point of Sale solutions
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origAuthAmount;
/// Setting to control if an AVS is performed
@property (nonatomic, readonly) BOOL enableAVS;
/// Commerce Indicator
@property (nonatomic, readonly) enum ElectronicCommerceIndicator commerceIndicator;
/// Indicates whether the transaction is part of a recurring chain
@property (nonatomic, readonly) BOOL isRecurring;
/// Total number of installment payments in a series associated with a merchant transaction
@property (nonatomic, readonly, strong) NSNumber * _Nullable installmentCount;
/// Ordinal number of the installment payment
@property (nonatomic, readonly, strong) NSNumber * _Nullable installmentNumber;
/// Identifies the industry-specific data in the request
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
- (nonnull instancetype)initWithAllowPartial:(BOOL)allowPartial returnBalance:(BOOL)returnBalance verbalAuthCode:(NSString * _Nullable)verbalAuthCode origAuthAmount:(NSDecimalNumber * _Nullable)origAuthAmount enableAVS:(BOOL)enableAVS commerceIndicator:(enum ElectronicCommerceIndicator)commerceIndicator isRecurring:(BOOL)isRecurring installmentCount:(NSNumber * _Nullable)installmentCount installmentNumber:(NSNumber * _Nullable)installmentNumber industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAllowPartial:(BOOL)allowPartial returnBalance:(BOOL)returnBalance enableAVS:(BOOL)enableAVS commerceIndicator:(enum ElectronicCommerceIndicator)commerceIndicator isRecurring:(BOOL)isRecurring installmentCount:(NSNumber * _Nullable)installmentCount installmentNumber:(NSNumber * _Nullable)installmentNumber industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The data elements needed to initiate a request involving a card reader
SWIFT_CLASS("_TtC7iFCCKit25CardBasedOperationRequest")
@interface CardBasedOperationRequest : FreeWayOperationRequest
/// Indicates to generate a FW token for the card data in used in the request
@property (nonatomic, readonly) BOOL generateToken;
/// For requests generating a token, indicates if the token will be created without the card expiration - otherwise, the card expiration date will be baked into the token, which is the typical configuration
@property (nonatomic, readonly) BOOL tokenDynamicExpiration;
/// Freeway token
@property (nonatomic, readonly, copy) NSString * _Nullable token;
/// For requests using a token, the expiration month of token-backed card if the token was created without the card expiration (MM)
@property (nonatomic, readonly, copy) NSString * _Nullable cardExpirationMonth;
/// For requests using a token, the expiration year of token-backed card if the token was created without the card expiration (YY)
@property (nonatomic, readonly, copy) NSString * _Nullable cardExpirationYear;
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nullable transactionAmount;
/// Indicates if DCC is enabled for the request
@property (nonatomic, readonly) BOOL isDccEnabled;
/// Enables DCC for the request
- (void)enableDcc:(BOOL)isDccEnabled;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// The data elements needed to initiate an Authorization request
SWIFT_CLASS("_TtC7iFCCKit29AuthorizationOperationRequest")
@interface AuthorizationOperationRequest : CardBasedOperationRequest
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of AuthorizationOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice header data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice header data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of AuthorizationOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this AuthorizationOperationRequest instance
///
/// returns:
/// A string that can be used to log the AuthorizationOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7iFCCKit13BasicCardData_")
@protocol BasicCardData <NSObject>
/// The cardholder name if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderName;
/// The entry mode for this card data
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
/// Specifies the physical hardware that is performing the encryption
@property (nonatomic, readonly, copy) NSString * _Nonnull msrType;
/// First 6 digits of the PAN if the data is ISO formatted
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// The type of card if it can be determined, will be nill if the card is not ISO
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
@end

@class NSDate;

/// Represents billing information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit6BillTo")
@interface BillTo : NSObject <NSCopying, Validation>
/// Merchant-assigned customer ID (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
/// Customer IP address, for internet orders (46)
@property (nonatomic, readonly, copy) NSString * _Nullable ipAddress;
/// Customer’s date-of-birth Required for electronic check services
@property (nonatomic, readonly, copy) NSDate * _Nullable dateOfBirth;
/// Customer’s DL#  Required for electronic check services (30 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable driversLicenseNumber;
/// Customer’s DL State Required for electronic check services (2 chars)
@property (nonatomic, readonly, copy) NSString * _Nullable driversLicenseState;
/// Last four of Social Security Number (4 chars)
@property (nonatomic, readonly, copy) NSString * _Nullable ssnLastFour;
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCustomerId:(NSString * _Nullable)customerId company:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email ipAddress:(NSString * _Nullable)ipAddress dateOfBirth:(NSDate * _Nullable)dateOfBirth driversLicenseNumber:(NSString * _Nullable)driversLicenseNumber driversLicenseState:(NSString * _Nullable)driversLicenseState ssnLastFour:(NSString * _Nullable)ssnLastFour OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum iFCCDeviceType : NSInteger;
enum iFCCDeviceCommunicationInterface : NSInteger;
@class NSData;

SWIFT_PROTOCOL("_TtP7iFCCKit27iFCCCardReaderDeviceOptions_")
@protocol iFCCCardReaderDeviceOptions <NSObject>
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
@end


/// Represents ICA card reader network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit13DeviceOptions")
@interface DeviceOptions : NSObject <iFCCCardReaderDeviceOptions>
/// Device Type
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Device Data
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Communication Interface
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents bluetooth card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit22BluetoothDeviceOptions")
@interface BluetoothDeviceOptions : DeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull bluetoothIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable serialNumber;
/// Creates an instance of BluetoothDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param bluetoothIdentifier the Bluetooth identifier for the card reader device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of BluetoothDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType bluetoothIdentifier:(NSString * _Nonnull)bluetoothIdentifier deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of BluetoothDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param name the name for the card reader device
///
/// \param serialNumber the serial number for the card reader device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of BluetoothDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType name:(NSString * _Nonnull)name serialNumber:(NSString * _Nonnull)serialNumber deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



/// The data elements needed to initiate a Capture request
SWIFT_CLASS("_TtC7iFCCKit23CaptureOperationRequest")
@interface CaptureOperationRequest : FollowOnOperationRequest
/// Amount associated with the requested operation (depreciated)
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request.
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/InvoiceHeader initializer");
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of CaptureOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this CaptureOperationRequest instance
///
/// returns:
/// A string that can be used to log the CaptureOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



/// Provides the raw data returned from a magentic card swipe. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit16CardReadResponse_")
@protocol CardReadResponse <NSObject>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Flag indicating whether or not the associated data is encrypted
@property (nonatomic, readonly) BOOL isEncrypted SWIFT_DEPRECATED_MSG("Use encryptionMode");
/// KSN (key serial number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull ksn SWIFT_DEPRECATED_MSG("Not supported");
/// Track 1 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// Track 2 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// BIN (Bank Identification Number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// Card Holder Name - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardHolderName;
/// Service Code - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceCode SWIFT_DEPRECATED_MSG("Not supported");
/// Expiration Date - may be blank dependent upon swiped card returning an associated value, format is MM/YY for all devices
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// Card Last Four - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardLastFour;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return A string representing what we know about whether or not this data is encrypted (ie: ONGUARD, NONE, UNKNOWN), for RUA devices the string may be empty
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return A string representing what we know about what kind of raw card data is available (ie: CARD, VAS,  BOTH), for RUA devices the string may be empty
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
/// @return A string representing the entry mode such as “swiped or “keyed”
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@end

@protocol DeviceVersionInfo;
@protocol DeviceFeatures;

SWIFT_PROTOCOL("_TtP7iFCCKit20CardReaderDeviceInfo_")
@protocol CardReaderDeviceInfo <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, readonly, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@end

enum SymbolPlacement : NSInteger;

/// Helper  for currency formats
SWIFT_PROTOCOL("_TtP7iFCCKit12CurrencyData_")
@protocol CurrencyData <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull isoCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull asciiSymbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull utf8Symbol;
@property (nonatomic, readonly) NSInteger afterDecimalDigits;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupSeparator;
@property (nonatomic, readonly, copy) NSString * _Nonnull decimalSeparator;
@property (nonatomic, readonly) enum SymbolPlacement symbolPlacement;
@property (nonatomic, readonly) BOOL hasSpaceBetween;
@property (nonatomic, readonly) NSInteger groupingSize;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit20DetachDeviceDelegate_")
@protocol DetachDeviceDelegate <NSObject>
/// Provides notification to the receiver that the device has been detached and the lane is no longer valid
/// \param laneId The lane identifier from where the device was detached
///
- (void)onDeviceDetachedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit19DeviceBatteryStatus_")
@protocol DeviceBatteryStatus <NSObject>
/// The percentage of battery life available
@property (nonatomic, readonly) NSInteger batteryPercentage;
/// Flag indicating whether or not the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit14DeviceFeatures_")
@protocol DeviceFeatures <NSObject>
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsUtf8Encoding;
@end


@class FccFileVersionInfo;

/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit17DeviceVersionInfo_")
@protocol DeviceVersionInfo <NSObject>
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@end

typedef SWIFT_ENUM(NSInteger, ElectronicCommerceIndicator, open) {
  ElectronicCommerceIndicatorUnspecified = 0,
  ElectronicCommerceIndicatorMoto = 1,
  ElectronicCommerceIndicatorReauthorize = 2,
  ElectronicCommerceIndicatorRecurring = 3,
  ElectronicCommerceIndicatorInternet = 4,
  ElectronicCommerceIndicatorRetail = 5,
  ElectronicCommerceIndicatorDelayed = 6,
  ElectronicCommerceIndicatorUnscheduled = 7,
};


SWIFT_CLASS("_TtC7iFCCKit33ElectronicCommerceIndicatorBridge")
@interface ElectronicCommerceIndicatorBridge : NSObject
+ (NSArray<NSNumber *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)allStrings SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)toString:(enum ElectronicCommerceIndicator)eci SWIFT_WARN_UNUSED_RESULT;
+ (enum ElectronicCommerceIndicator)fromRawValue:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (enum ElectronicCommerceIndicator)fromString:(NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7iFCCKit25EmptyCardReaderDeviceInfo")
@interface EmptyCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Return value for FreewayErrorCallback handler. Cannot (and should not) be created directly by integrators.
/// Instead this must be generated from FailureActionHandler.generateAction.
SWIFT_CLASS("_TtC7iFCCKit13FailureAction")
@interface FailureAction : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull APPROVE_OFFLINE_ACTION;)
+ (FailureAction * _Nonnull)APPROVE_OFFLINE_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull RETRY_ACTION;)
+ (FailureAction * _Nonnull)RETRY_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull ABORT_ACTION;)
+ (FailureAction * _Nonnull)ABORT_ACTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FailureAction * _Nonnull POS_STORED;)
+ (FailureAction * _Nonnull)POS_STORED SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Mode, open) {
/// Approve this transaction offline through the SaF engine.
  ModeAPPROVE_OFFLINE = 0,
/// POS (Integrator) will store this transaction and run it later.
/// The device show an approval, but this will NOT process the transaction.
  ModePOS_STORED = 1,
/// Retry this transaction online.
  ModeRETRY = 2,
/// Abort the transaction. Will execute a reversal if necessary.
  ModeABORT = 3,
};


/// Provides basic card data from a card read
SWIFT_CLASS("_TtC7iFCCKit16FccBasicCardData")
@interface FccBasicCardData : NSObject <NSCopying, BasicCardData>
/// The cardholder name if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderName;
/// The entry mode for this card data
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
/// Specifies the physical hardware that is performing the encryption
@property (nonatomic, readonly, copy) NSString * _Nonnull msrType;
/// First 6 digits of the PAN if the data is ISO formatted
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// The type of card if it can be determined, will be nill if the card is not ISO
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCOperationIdentifier_")
@protocol iFCCOperationIdentifier <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit34iFCCCancellableOperationIdentifier_")
@protocol iFCCCancellableOperationIdentifier <iFCCOperationIdentifier>
@end


/// Unique identifier of iFCC operation backed by a UUID
SWIFT_CLASS("_TtC7iFCCKit22FccOperationIdentifier")
@interface FccOperationIdentifier : NSObject <iFCCOperationIdentifier>
/// Unique identifier of iFCC operation backed by a UUID
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Compares for equality with the current instance
///
/// returns:
/// true it the passed in object is equal to the current instance, false otherwise
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Hash of the current instance
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Unique identifier of iFCC operation that can be used to request cancellation of the identified operation
SWIFT_CLASS("_TtC7iFCCKit33FccCancellableOperationIdentifier")
@interface FccCancellableOperationIdentifier : FccOperationIdentifier <iFCCCancellableOperationIdentifier>
@end


/// Provides the raw data returned from a magentic card swipe. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit19FccCardReadResponse")
@interface FccCardReadResponse : NSObject <CardReadResponse>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Flag indicating whether or not the associated data is encrypted
@property (nonatomic, readonly) BOOL isEncrypted SWIFT_DEPRECATED_MSG("Use encryptionMode");
/// KSN (key serial number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull ksn SWIFT_DEPRECATED_MSG("Not supported");
/// Track 1 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// Track 2 Data - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// BIN (Bank Identification Number) - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull bin;
/// Card Holder Name - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardHolderName;
/// Service Code - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceCode SWIFT_DEPRECATED_MSG("Not supported");
/// Expiration Date - may be blank dependent upon swiped card returning an associated value, format is MM/YY for all devices
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// Card Last Four - may be blank dependent upon swiped card returning an associated value
@property (nonatomic, readonly, copy) NSString * _Nonnull cardLastFour;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit20iFCCCardReaderDevice_")
@protocol iFCCCardReaderDevice
/// Name reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Serial number reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// Unique identifier of the lane the device is mapped to
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Represents the type of Device
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Represents a unique identifier for the device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Represents a description of this object’s values
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Represents an Mapped Card Reader device that has been initialized and assigned to a lane
SWIFT_CLASS("_TtC7iFCCKit19FccCardReaderDevice")
@interface FccCardReaderDevice : NSObject <iFCCCardReaderDevice>
/// Name reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Serial number reported by the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// Unique identifier of the lane the device is mapped to
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Represents the type of Device
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Represents a unique identifier for the device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides device information.
SWIFT_CLASS("_TtC7iFCCKit23FccCardReaderDeviceInfo")
@interface FccCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, readonly, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helper class for obtaining supported values for config settings
SWIFT_CLASS("_TtC7iFCCKit15FccConfigBridge")
@interface FccConfigBridge : NSObject
/// Represents the list of supported EMV Locales
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull emvLocales;)
+ (NSArray<NSString *> * _Nonnull)emvLocales SWIFT_WARN_UNUSED_RESULT;
/// Represents the list of supported DCC prompt logic options
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull dccPromptLogics;)
+ (NSArray<NSString *> * _Nonnull)dccPromptLogics SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper class for Currency formatting
SWIFT_CLASS("_TtC7iFCCKit17FccCurrencyBridge")
@interface FccCurrencyBridge : NSObject
/// Retrieves the list of supported currency symbol placement
///
/// returns:
/// an array of all currency symbol placement values
+ (NSArray<NSString *> * _Nonnull)getSupportedSymbolPlacements SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of preset currency formats
///
/// returns:
/// an array of currency data objectes represent a specific currency format
+ (NSArray<id <CurrencyData>> * _Nonnull)getPresetCurrencies SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides battery status of the device. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit22FccDeviceBatteryStatus")
@interface FccDeviceBatteryStatus : NSObject <DeviceBatteryStatus>
/// The percentage of battery life available
@property (nonatomic, readonly) NSInteger batteryPercentage;
/// Flag indicating whether or not the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
/// Produces a log statement enumerating all property values (does not perform log action)
///
/// returns:
/// A log statement enumerating all property values
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7iFCCKit17FccDeviceFeatures")
@interface FccDeviceFeatures : NSObject <DeviceFeatures>
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsUtf8Encoding;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Provides basic details of a ROAM based device prior to connecting to the device
SWIFT_PROTOCOL("_TtP7iFCCKit12RUADeviceNub_")
@protocol RUADeviceNub
/// Name reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Identifier reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


/// Provides basic details of a device prior to connecting to the device
SWIFT_CLASS("_TtC7iFCCKit12FccDeviceNub")
@interface FccDeviceNub : NSObject <RUADeviceNub>
/// Name reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Identifier reported by the ROAM device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit20FccDeviceVersionInfo")
@interface FccDeviceVersionInfo : NSObject <DeviceVersionInfo>
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) FccFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<FccFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP7iFCCKit19iFCCFileLoggingInfo_")
@protocol iFCCFileLoggingInfo
/// the location where log files are being stored
@property (nonatomic, readonly, copy) NSString * _Nullable fileLocation;
/// URL of the current log file
@property (nonatomic, readonly, copy) NSURL * _Nullable currentFileURL;
/// a list of URLs representing the archived files
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull archivedFileURLs;
@end


/// Represents file logging status
SWIFT_CLASS("_TtC7iFCCKit18FccFileLoggingInfo")
@interface FccFileLoggingInfo : NSObject <iFCCFileLoggingInfo>
/// the location where log files are being stored
@property (nonatomic, readonly, copy) NSString * _Nullable fileLocation;
/// URL of the current log file
@property (nonatomic, readonly, copy) NSURL * _Nullable currentFileURL;
/// a list of URLs representing the archived files
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull archivedFileURLs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit15FileVersionInfo_")
@protocol FileVersionInfo <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
+ (id <FileVersionInfo> _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit18FccFileVersionInfo")
@interface FccFileVersionInfo : NSObject <FileVersionInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
+ (id <FileVersionInfo> _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit15LEDSequenceItem_")
@protocol LEDSequenceItem
/// Boolean indicating the red LED is on or off
@property (nonatomic, readonly) BOOL redOn;
/// Boolean indicating the yellow LED is on or off
@property (nonatomic, readonly) BOOL yellowOn;
/// Boolean indicating the orange LED is on or off
@property (nonatomic, readonly) BOOL orangeOn;
/// Boolean indicating the blue LED is on or off
@property (nonatomic, readonly) BOOL blueOn;
@end


/// Represents a LED Sequence for pairing an LED based device such as the Moby 5500
SWIFT_CLASS("_TtC7iFCCKit18FccLedSequenceItem")
@interface FccLedSequenceItem : NSObject <LEDSequenceItem>
/// Boolean indicating the red LED is on or off
@property (nonatomic, readonly) BOOL redOn;
/// Boolean indicating the yellow LED is on or off
@property (nonatomic, readonly) BOOL yellowOn;
/// Boolean indicating the orange LED is on or off
@property (nonatomic, readonly) BOOL orangeOn;
/// Boolean indicating the blue LED is on or off
@property (nonatomic, readonly) BOOL blueOn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FccLedSequenceItem (SWIFT_EXTENSION(iFCCKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


enum PalManifestResultInstallationDetail : NSInteger;
@protocol PalValidationError;
@protocol PalUpdateOperationFailedException;

/// Provides details about a manifest installation.  If the result was <code>FAILURE</code>, check for an exception and its <code>errorMessage</code> to determine the cause.
SWIFT_PROTOCOL("_TtP7iFCCKit17PalManifestResult_")
@protocol PalManifestResult
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL manifestInstalled;
@property (nonatomic, readonly) enum PalManifestResultInstallationDetail installationDetail;
@property (nonatomic, readonly, copy) NSArray<id <PalValidationError>> * _Nullable validateErrors;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nullable exception;
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestHash;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVariant;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVersion;
@end


/// Provides details about a manifest installation.  If the result was <code>FAILURE</code>, check for an exception and its <code>errorMessage</code> to determine the cause.
SWIFT_CLASS("_TtC7iFCCKit20FccPalManifestResult")
@interface FccPalManifestResult : NSObject <PalManifestResult>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL manifestInstalled;
@property (nonatomic, readonly) enum PalManifestResultInstallationDetail installationDetail;
@property (nonatomic, readonly, copy) NSArray<id <PalValidationError>> * _Nullable validateErrors;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nullable exception;
@property (nonatomic, readonly, copy) NSString * _Nonnull packageName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestName;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestHash;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVariant;
@property (nonatomic, readonly, copy) NSString * _Nonnull manifestVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_PROTOCOL("_TtP7iFCCKit24PalUpdateFailureResponse_")
@protocol PalUpdateFailureResponse <NSObject>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nonnull exception;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
- (NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Provides details about a failed PAL update.
SWIFT_CLASS("_TtC7iFCCKit27FccPalUpdateFailureResponse")
@interface FccPalUpdateFailureResponse : NSObject <PalUpdateFailureResponse>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) id <PalUpdateOperationFailedException> _Nonnull exception;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
/// A text message to provide more context for this failure
- (NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit33PalUpdateOperationFailedException_")
@protocol PalUpdateOperationFailedException
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly) NSError * _Nullable inner;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedDescription;
@end


/// Provides the details of a failed PAL update
SWIFT_CLASS("_TtC7iFCCKit36FccPalUpdateOperationFailedException")
@interface FccPalUpdateOperationFailedException : NSObject <PalUpdateOperationFailedException>
/// A general message describing the failure reason
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The underlying exception
@property (nonatomic, readonly) NSError * _Nullable inner;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit24PalUpdateSuccessResponse_")
@protocol PalUpdateSuccessResponse <NSObject>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
@end


/// Provides details about a successful PAL update.
SWIFT_CLASS("_TtC7iFCCKit27FccPalUpdateSuccessResponse")
@interface FccPalUpdateSuccessResponse : NSObject <PalUpdateSuccessResponse>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<id <PalManifestResult>> * _Nonnull manifestResults;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit18PalValidationError_")
@protocol PalValidationError <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull setting;
@property (nonatomic, readonly, copy) NSString * _Nonnull expected;
@property (nonatomic, readonly, copy) NSString * _Nonnull actual;
@end


/// Represents an error raised by the pal engine during validation. These should be created using the companion class methods.
SWIFT_CLASS("_TtC7iFCCKit21FccPalValidationError")
@interface FccPalValidationError : NSObject <PalValidationError>
/// Dependent on the type of error.
@property (nonatomic, readonly, copy) NSString * _Nonnull setting;
/// The value expected for the setting
@property (nonatomic, readonly, copy) NSString * _Nonnull expected;
/// The actual value received during validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull actual;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TokenResponse;

/// Response elements for an iFCC operation
SWIFT_PROTOCOL("_TtP7iFCCKit11POSResponse_")
@protocol POSResponse
/// String value indicating a simple Accept / Reject result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull decision;
/// String value indicating the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Unique identifier assigned to the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The Merchant Reference Code provided in the preceding request
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Details provided by FreeWay regarding the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// The amount approved for the operation (does not apply to all operations)
@property (nonatomic, readonly, copy) NSString * _Nullable approvedAmount;
/// Card number with the BIN and last 4 unmasked
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The type of card used
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The Cardholder’s name as displayed on the card
@property (nonatomic, readonly, copy) NSString * _Nullable nameOnCard;
/// Card issuer
@property (nonatomic, readonly, copy) NSString * _Nullable issuerName;
/// The card’s expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expiryDate;
/// Method of card data capture
@property (nonatomic, readonly, copy) NSString * _Nullable entryMode;
/// Receipt text contents to be provided to the customer
@property (nonatomic, readonly, copy) NSString * _Nullable receipt;
/// Approval code from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable approvalCode;
/// Since a signature is never acquired by iFCC, this value will be ‘true’ in most instances. Debit does not always require a signature, and some credit floor limits do not either.
@property (nonatomic, readonly) BOOL signatureRequired;
/// Dependent on Cardholder Verification Method (CVM)–if CVM == Online Pin, this value will be <em>true</em>. Otherwise it will be <em>false</em>
@property (nonatomic, readonly) BOOL pinVerified;
/// FreeWay token linked to the card data
@property (nonatomic, readonly, strong) id <TokenResponse> _Nullable tokenResponse;
/// The resulting account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalance;
/// The currency code of account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalanceCurrency;
/// The tip amount, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable tipAmount;
/// Address Verification Code signifying the level of verification achieved
@property (nonatomic, readonly, copy) NSString * _Nullable avsCode;
/// Raw AVS code as received from processor
@property (nonatomic, readonly, copy) NSString * _Nullable avsCodeRaw;
/// Card Verification status code
@property (nonatomic, readonly, copy) NSString * _Nullable cvCode;
/// Raw CVV status code as returned by the processor
@property (nonatomic, readonly, copy) NSString * _Nullable cvCodeRaw;
/// Request (masked) sent to FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable requestData;
/// Response (masked) from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable responseData;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


/// Response elements for an iFCC operation
SWIFT_CLASS("_TtC7iFCCKit14FccPosResponse")
@interface FccPosResponse : NSObject <POSResponse>
/// String value indicating a simple Accept / Reject result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull decision;
/// String value indicating the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// Unique identifier assigned to the operation
@property (nonatomic, readonly, copy) NSString * _Nonnull requestId;
/// The Merchant Reference Code provided in the preceding request
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReferenceCode;
/// Details provided by FreeWay regarding the result of the operation
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// The amount approved for the operation (does not apply to all operations)
@property (nonatomic, readonly, copy) NSString * _Nullable approvedAmount;
/// Card number with the BIN and last 4 unmasked
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The type of card used
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The Cardholder’s name as displayed on the card
@property (nonatomic, readonly, copy) NSString * _Nullable nameOnCard;
/// Card issuer
@property (nonatomic, readonly, copy) NSString * _Nullable issuerName;
/// The card’s expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expiryDate;
/// Method of card data capture
@property (nonatomic, readonly, copy) NSString * _Nullable entryMode;
/// Receipt text contents to be provided to the customer
@property (nonatomic, readonly, copy) NSString * _Nullable receipt;
/// Approval code from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable approvalCode;
/// Since a signature is never acquired by iFCC, this value will be ‘true’ in most instances. Debit does not always require a signature, and some credit floor limits do not either.
@property (nonatomic, readonly) BOOL signatureRequired;
/// Dependent on Cardholder Verification Method (CVM)–if CVM == Online Pin, this value will be <em>true</em>. Otherwise it will be <em>false</em>
@property (nonatomic, readonly) BOOL pinVerified;
/// FreeWay token linked to the card data
@property (nonatomic, readonly, strong) id <TokenResponse> _Nullable tokenResponse;
/// The resulting account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalance;
/// The currency code of account balance, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable accountBalanceCurrency;
/// The tip amount, if applicable
@property (nonatomic, readonly, copy) NSString * _Nullable tipAmount;
/// Address Verification Code signifying the level of verification achieved
@property (nonatomic, readonly, copy) NSString * _Nullable avsCode;
/// Raw AVS code as received from processor
@property (nonatomic, readonly, copy) NSString * _Nullable avsCodeRaw;
/// Card Verification  status code
@property (nonatomic, readonly, copy) NSString * _Nullable cvCode;
/// Raw CVV status code as returned by the processor
@property (nonatomic, readonly, copy) NSString * _Nullable cvCodeRaw;
/// Request (masked) sent to FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable requestData;
/// Response (masked) from FreeWay
@property (nonatomic, readonly, copy) NSString * _Nullable responseData;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Produces a log statement enumerating all property values (does not perform log action)
///
/// returns:
/// A log statement enumerating all property values
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit27PosStoredTransactionRequest_")
@protocol PosStoredTransactionRequest <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull requestXml;
- (NSString * _Nonnull)getFreewayXml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7iFCCKit30FccPosStoredTransactionRequest")
@interface FccPosStoredTransactionRequest : NSObject <PosStoredTransactionRequest>
@property (nonatomic, readonly, copy) NSString * _Nonnull requestXml;
- (NSString * _Nonnull)getPosSyncId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFreewayXml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit19RawCardReadResponse_")
@protocol RawCardReadResponse <NSObject>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return Track1 data if the device was able to parse it. This may be empty or null if the device could not parse track1 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// @return Track2 data if the device was able to parse it. This may be empty or null if the device could not parse track2 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
/// @return A string representing the entry mode such as “swiped or “keyed”
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@end


SWIFT_CLASS("_TtC7iFCCKit22FccRawCardReadResponse")
@interface FccRawCardReadResponse : NSObject <RawCardReadResponse>
/// Error code, “0” if card read request succeeded
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
/// The raw bytes received off the device.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// @return Track1 data if the device was able to parse it. This may be empty or null if the device could not parse track1 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track1Data;
/// @return Track2 data if the device was able to parse it. This may be empty or null if the device could not parse track2 data from the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull track2Data;
/// @return An enum representing what we know about whether or not this data is encrypted.
@property (nonatomic, readonly, copy) NSString * _Nonnull encryptionMode;
/// @return An enum representing what we know about what kind of raw card data is available (ie: Raw card, VAS, or combination)
@property (nonatomic, readonly, copy) NSString * _Nonnull rawCardType;
@property (nonatomic, readonly, copy) NSString * _Nonnull entryMode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides details of a transaction stored offline. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit21StoreAndForwardResult_")
@protocol StoreAndForwardResult
/// Offline Request Id
@property (nonatomic, readonly, copy) NSString * _Nonnull offlineRequestId;
/// Online Request Id
@property (nonatomic, readonly, copy) NSString * _Nullable onlineRequestId;
/// Online Transaction Decision
@property (nonatomic, readonly, copy) NSString * _Nullable onlineDecision;
/// Online Transaction Reason Code
@property (nonatomic, readonly, copy) NSString * _Nullable onlineErrorCode;
/// Replay Status
@property (nonatomic, readonly, copy) NSString * _Nonnull replayStatus;
@end


/// Provides details of a transaction stored offline. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit24FccStoreAndForwardResult")
@interface FccStoreAndForwardResult : NSObject <StoreAndForwardResult>
/// Offline Request Id
@property (nonatomic, readonly, copy) NSString * _Nonnull offlineRequestId;
/// Online Request Id
@property (nonatomic, readonly, copy) NSString * _Nullable onlineRequestId;
/// Online Transaction Decision
@property (nonatomic, readonly, copy) NSString * _Nullable onlineDecision;
/// Online Transaction Reason Code
@property (nonatomic, readonly, copy) NSString * _Nullable onlineErrorCode;
/// Replay Status
@property (nonatomic, readonly, copy) NSString * _Nonnull replayStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides Store and Forward engine status. Instances of this object are immutable.
SWIFT_PROTOCOL("_TtP7iFCCKit21StoreAndForwardStatus_")
@protocol StoreAndForwardStatus
/// Number of transactions stored offline currently available for replay
/// note:
/// This number reflects records that are available to be replayed based on the current time.  It may not reflect the total count of records awaiting replay as some records may not be eligible for replay until a later date
@property (nonatomic, readonly) NSUInteger offlineQueueSize;
/// Last date / time that a replay of queued records was attempted
@property (nonatomic, readonly, copy) NSDate * _Nullable lastReplayAttempt;
/// Counts of transactions stored offline based on status.
/// note:
/// Status keys are “complete” (replayed successfully), “incomplete” (replayed but declined), “offline” (replayed but failed), and “unknown” (unknown)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull statusCounts;
@end


/// Provides Store and Forward engine status. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit24FccStoreAndForwardStatus")
@interface FccStoreAndForwardStatus : NSObject <StoreAndForwardStatus>
/// Number of transactions stored offline currently available for replay
/// note:
/// This number reflects records that are available to be replayed based on the current time.  It may not reflect the total count of records awaiting replay as some records may not be eligible for replay until a later date
@property (nonatomic, readonly) NSUInteger offlineQueueSize;
/// Last date / time that a replay of queued records was attempted
@property (nonatomic, readonly, copy) NSDate * _Nullable lastReplayAttempt;
/// Counts of transactions stored offline based on status.
/// note:
/// Status keys are “complete” (replayed successfully), “incomplete” (replayed but declined), “offline” (replayed but failed), and “unknown” (unknown)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull statusCounts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response data element containing FreeWay token data
SWIFT_PROTOCOL("_TtP7iFCCKit13TokenResponse_")
@protocol TokenResponse
/// FreeWay token linked to the card data
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Expiration date for the FreeWay token
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenExpiration;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
@end


/// Response data element containing FreeWay token data
SWIFT_CLASS("_TtC7iFCCKit16FccTokenResponse")
@interface FccTokenResponse : NSObject <TokenResponse>
/// FreeWay token linked to the card data
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Expiration date for the FreeWay token
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenExpiration;
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit16ValidationResult_")
@protocol ValidationResult
/// indicates if the result is valid
@property (nonatomic, readonly) BOOL isValid;
/// if result is not valid, array of strings representing invalid fields and the associated reason for the anomaly, nil if result is valid
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable anomalies;
@end


/// Represents the result of parameter validation
SWIFT_CLASS("_TtC7iFCCKit19FccValidationResult")
@interface FccValidationResult : NSObject <ValidationResult>
/// indicates if the result is valid
@property (nonatomic, readonly) BOOL isValid;
/// if result is not valid, array of strings representing invalid fields and the associated reason for the anomaly, nil if result is valid
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable anomalies;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP7iFCCKit11VersionInfo_")
@protocol VersionInfo
/// iFCC version
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccVersion;
/// iFCC build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccBuildNumber;
/// iMsrLib component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibVersionNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitVersion");
/// iMsrLib component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibBuildNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitBuildNumber");
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitBuildNumber;
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitBuildNumber;
/// FPPOICore component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreVersion;
/// FPPOICore component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreBuildNumber;
/// RUA SDK’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull ruaSDKVersion;
/// FPAmaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitVersion;
/// FPAmaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitBuildNumber;
@end


/// Providing version info for iFCC and its components. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit14FccVersionInfo")
@interface FccVersionInfo : NSObject <VersionInfo>
/// iFCC version
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccVersion;
/// iFCC build number
@property (nonatomic, readonly, copy) NSString * _Nonnull iFccBuildNumber;
/// FPRuaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitVersion;
/// FPRuaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpRuaKitBuildNumber;
/// FPTetraKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitVersion;
/// FPTetraKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpTetraKitBuildNumber;
/// FPPOICore component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreVersion;
/// FPPOICore component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpPOICoreBuildNumber;
/// RUA SDK’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull ruaSDKVersion;
/// FPAmaKit component’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitVersion;
/// FPAmaKit component’s build number
@property (nonatomic, readonly, copy) NSString * _Nonnull fpAmaKitBuildNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibVersionNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitVersion");
@property (nonatomic, readonly, copy) NSString * _Nonnull iMsrLibBuildNumber SWIFT_DEPRECATED_MSG("No longer utilized, use fpRuaKitBuildNumber");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// The data elements needed to initiate a Follow-On Refund request
SWIFT_CLASS("_TtC7iFCCKit30FollowOnRefundOperationRequest")
@interface FollowOnRefundOperationRequest : FollowOnOperationRequest
/// The total amount of the request
@property (nonatomic, readonly) NSDecimal purchaseTotal SWIFT_DEPRECATED_MSG("Use TransactionAmount");
/// Transaction amounts associated with the requested operation
@property (nonatomic, readonly, strong) TransactionAmount * _Nonnull transactionAmount;
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param purchaseTotal The total amount of the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use IndustryDataType initializer");
/// Creates an instance of FollowOnOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Auth operation
///
/// \param transactionAmount The amounts for the request
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this FollowOnRefundOperationRequest instance
///
/// returns:
/// A string that can be used to log the FollowOnRefundOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC7iFCCKit24GiftCardOperationRequest")
@interface GiftCardOperationRequest : CardBasedOperationRequest
/// Creates a statement logging all values on this GiftCardOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit32GiftCardActivateOperationRequest")
@interface GiftCardActivateOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardActivateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number, note: It must be 8 characters long and must be composed of numeric characters only
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardActivateOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardActivateOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit31GiftCardCashoutOperationRequest")
@interface GiftCardCashoutOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardCashoutOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimalNumber * _Nullable)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardCashoutOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardCashoutOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit34GiftCardDeactivateOperationRequest")
@interface GiftCardDeactivateOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardDeactivateOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimalNumber * _Nullable)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardDeactivateOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardDeactivateOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit31GiftCardInquiryOperationRequest")
@interface GiftCardInquiryOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardInquiryOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardInquiryOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardInquiryOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS("_TtC7iFCCKit29GiftCardIssueOperationRequest")
@interface GiftCardIssueOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardIssueOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request, if applicable
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardIssueOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardIssueOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



SWIFT_CLASS("_TtC7iFCCKit30GiftCardReloadOperationRequest")
@interface GiftCardReloadOperationRequest : GiftCardOperationRequest
/// Creates an instance of GiftCardReloadOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this GiftCardReloadOperationRequest instance
///
/// returns:
/// A string that can be used to log the GiftCardReloadOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

typedef SWIFT_ENUM(NSInteger, GoodsIndicator, open) {
  GoodsIndicatorUnspecified = 0,
  GoodsIndicatorDigital = 1,
  GoodsIndicatorPhysical = 2,
};


SWIFT_CLASS("_TtC7iFCCKit20GoodsIndicatorBridge")
@interface GoodsIndicatorBridge : NSObject
+ (NSArray<NSNumber *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)allStrings SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)toString:(enum GoodsIndicator)goodsIndicator SWIFT_WARN_UNUSED_RESULT;
+ (enum GoodsIndicator)fromRawValue:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
+ (enum GoodsIndicator)fromString:(NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7iFCCKit9HotelData")
@interface HotelData : NSObject <NSCopying, Validation>
@property (nonatomic, readonly, strong) NSNumber * _Nullable expectedDuration;
@property (nonatomic, readonly, copy) NSString * _Nonnull folioNumber;
@property (nonatomic, readonly, strong) NSNumber * _Nullable noShow;
@property (nonatomic, readonly, copy) NSDate * _Nullable checkInDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable checkOutDate;
@property (nonatomic, readonly, copy) NSString * _Nullable extraChargeTypes;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable roomRate;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable roomTax;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable extraChargeTotal;
@property (nonatomic, readonly, copy) NSString * _Nullable renterName;
- (nonnull instancetype)initWithExpectedDuration:(NSInteger)expectedDuration folioNumber:(NSString * _Nonnull)folioNumber noShow:(BOOL)noShow checkInDate:(NSDate * _Nonnull)checkInDate checkOutDate:(NSDate * _Nonnull)checkOutDate extraChargeTypes:(NSString * _Nonnull)extraChargeTypes roomRate:(NSDecimalNumber * _Nonnull)roomRate roomTax:(NSDecimalNumber * _Nonnull)roomTax extraChargeTotal:(NSDecimalNumber * _Nonnull)extraChargeTotal renterName:(NSString * _Nonnull)renterName OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use folio number initializer");
- (nonnull instancetype)initWithFolioNumber:(NSString * _Nonnull)folioNumber expectedDuration:(NSNumber * _Nullable)expectedDuration noShow:(NSNumber * _Nullable)noShow checkInDate:(NSDate * _Nullable)checkInDate checkOutDate:(NSDate * _Nullable)checkOutDate extraChargeTypes:(NSString * _Nullable)extraChargeTypes roomRate:(NSDecimalNumber * _Nullable)roomRate roomTax:(NSDecimalNumber * _Nullable)roomTax extraChargeTotal:(NSDecimalNumber * _Nullable)extraChargeTotal renterName:(NSString * _Nullable)renterName OBJC_DESIGNATED_INITIALIZER;
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents an IP based card reader options to be used during device setup
SWIFT_PROTOCOL("_TtP7iFCCKit24iFCCNetworkDeviceOptions_") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@protocol iFCCNetworkDeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
@property (nonatomic, readonly) NSInteger portNumber;
@end


/// Represents ICA card reader network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit23ICANetworkDeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface ICANetworkDeviceOptions : NSObject <iFCCCardReaderDeviceOptions, iFCCNetworkDeviceOptions>
/// Device Type
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
/// Device Data
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Network Host Address
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
/// Network Port Number
@property (nonatomic) NSInteger portNumber;
/// Communication Interface
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents invoice header information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit13InvoiceHeader")
@interface InvoiceHeader : NSObject <NSCopying, Validation>
/// Invoice number (20 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable invoiceNumber;
/// invoice date/time
@property (nonatomic, readonly, copy) NSDate * _Nullable invoiceDate;
/// Purchase order number (25 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable customerPO;
/// Date of purchase order
@property (nonatomic, readonly, copy) NSDate * _Nullable purchaserOrderDate;
/// Type of goods - current values are “unspecified”, “digital” and “physical”, subject to change at any time, default if not provided is “unspecified”
@property (nonatomic, readonly) enum GoodsIndicator goodsIndicator;
/// RFU Date that the transaction will be considered to have happened on for batching and reporting purposes.
@property (nonatomic, readonly, copy) NSDate * _Nullable businessDate;
@property (nonatomic, readonly, copy) NSString * _Nullable purchaserCode;
- (nonnull instancetype)initWithInvoiceNumber:(NSString * _Nullable)invoiceNumber invoiceDate:(NSDate * _Nullable)invoiceDate customerPO:(NSString * _Nullable)customerPO purchaserOrderDate:(NSDate * _Nullable)purchaserOrderDate goodsIndicator:(enum GoodsIndicator)goodsIndicator businessDate:(NSDate * _Nullable)businessDate purchaserCode:(NSString * _Nullable)purchaserCode OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP7iFCCKit18LaneStatusDelegate_")
@protocol LaneStatusDelegate
/// Provides notification to the receiver that the lane is open and able to run transactions
/// \param device the device mapped to the lane
///
- (void)onLaneOpenedWithDevice:(id <iFCCCardReaderDevice> _Nonnull)device;
/// Provides notification to the receiver that the specfied lane is closed and unable to run transactions
/// \param laneId The laneId for the closed lane
///
- (void)onLaneClosedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_CLASS("_TtC7iFCCKit8LineItem")
@interface LineItem : NSObject
@property (nonatomic, copy) NSString * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSString * _Nullable productCode;
@property (nonatomic, readonly, copy) NSString * _Nullable productUPC;
@property (nonatomic, readonly, copy) NSString * _Nullable productSKU;
@property (nonatomic, readonly, copy) NSString * _Nullable productName;
@property (nonatomic, readonly, copy) NSString * _Nonnull productDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable commodityCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull unitPrice;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull totalAmount;
@property (nonatomic, readonly) BOOL taxIncludedFlag;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable taxAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable unitOfMeasure;
@property (nonatomic, readonly, copy) NSString * _Nonnull saleCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable discountAmount;
@property (nonatomic, readonly) BOOL discountFlag;
@property (nonatomic, readonly, copy) NSString * _Nullable productMake;
@property (nonatomic, readonly, copy) NSString * _Nullable productModel;
@property (nonatomic, readonly, copy) NSString * _Nullable productPartNumber;
@property (nonatomic, readonly, copy) NSString * _Nullable productYear;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial1;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial2;
@property (nonatomic, readonly, copy) NSString * _Nullable productSerial3;
@property (nonatomic, readonly, copy) NSString * _Nullable customerAssetId;
@property (nonatomic, readonly, copy) NSString * _Nullable promoCode;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable freightAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable customFormatId;
@property (nonatomic, readonly, copy) NSString * _Nullable custom1;
@property (nonatomic, readonly, copy) NSString * _Nullable custom2;
@property (nonatomic, readonly, copy) NSString * _Nullable custom3;
@property (nonatomic, readonly, copy) NSString * _Nullable custom4;
@property (nonatomic, readonly, copy) NSString * _Nullable custom5;
@property (nonatomic, readonly, copy) NSString * _Nullable custom6;
@property (nonatomic, readonly, copy) NSString * _Nullable custom7;
@property (nonatomic, readonly, copy) NSString * _Nullable custom8;
@property (nonatomic, readonly, copy) NSString * _Nullable custom9;
@property (nonatomic, readonly, copy) NSString * _Nullable payAlloc;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origUnitPrice;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable origTotalAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable category;
@property (nonatomic, readonly, copy) NSString * _Nullable subCategory;
@property (nonatomic, readonly, copy) NSString * _Nullable eidIndicator;
- (nonnull instancetype)initWithProductCode:(NSString * _Nullable)productCode productUPC:(NSString * _Nullable)productUPC productSKU:(NSString * _Nullable)productSKU productName:(NSString * _Nullable)productName productDescription:(NSString * _Nonnull)productDescription commodityCode:(NSString * _Nullable)commodityCode unitPrice:(NSDecimalNumber * _Nonnull)unitPrice quantity:(NSInteger)quantity totalAmount:(NSDecimalNumber * _Nonnull)totalAmount taxIncludedFlag:(BOOL)taxIncludedFlag taxAmount:(NSDecimalNumber * _Nullable)taxAmount unitOfMeasure:(NSString * _Nullable)unitOfMeasure saleCode:(NSString * _Nonnull)saleCode discountAmount:(NSDecimalNumber * _Nullable)discountAmount discountFlag:(BOOL)discountFlag productMake:(NSString * _Nullable)productMake productModel:(NSString * _Nullable)productModel productPartNumber:(NSString * _Nullable)productPartNumber productYear:(NSString * _Nullable)productYear productSerial1:(NSString * _Nullable)productSerial1 productSerial2:(NSString * _Nullable)productSerial2 productSerial3:(NSString * _Nullable)productSerial3 customerAssetId:(NSString * _Nullable)customerAssetId promoCode:(NSString * _Nullable)promoCode freightAmount:(NSDecimalNumber * _Nullable)freightAmount customFormatId:(NSString * _Nullable)customFormatId custom1:(NSString * _Nullable)custom1 custom2:(NSString * _Nullable)custom2 custom3:(NSString * _Nullable)custom3 custom4:(NSString * _Nullable)custom4 custom5:(NSString * _Nullable)custom5 custom6:(NSString * _Nullable)custom6 custom7:(NSString * _Nullable)custom7 custom8:(NSString * _Nullable)custom8 custom9:(NSString * _Nullable)custom9 payAlloc:(NSString * _Nullable)payAlloc origUnitPrice:(NSDecimalNumber * _Nullable)origUnitPrice origTotalAmount:(NSDecimalNumber * _Nullable)origTotalAmount category:(NSString * _Nullable)category subCategory:(NSString * _Nullable)subCategory eidIndicator:(NSString * _Nullable)eidIndicator OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7iFCCKit9LineItems")
@interface LineItems : NSObject <NSCopying, Validation>
@property (nonatomic, readonly, copy) NSArray<LineItem *> * _Nonnull items;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItems:(NSArray<LineItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (void)addWithItem:(LineItem * _Nonnull)item;
- (void)removeWithItem:(LineItem * _Nonnull)item;
@end


/// Represents payment data that should be modified before submitting to FreeWay
SWIFT_CLASS("_TtC7iFCCKit19ModifiedPaymentData")
@interface ModifiedPaymentData : NSObject
/// The amount values of the transaction
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull purchaseTotal;
- (nonnull instancetype)initWithPurchaseTotal:(NSDecimalNumber * _Nonnull)purchaseTotal OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Represents network device options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20NetworkDeviceOptions")
@interface NetworkDeviceOptions : DeviceOptions
@property (nonatomic, readonly, copy) NSString * _Nonnull hostAddress;
@property (nonatomic, readonly) NSUInteger portNumber;
/// Creates an instance of NetworkDeviceOptions
/// \param deviceType the device type as defined by iFCCDeviceType
///
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of NetworkDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithDeviceType:(enum iFCCDeviceType)deviceType hostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSUInteger)portNumber deviceData:(NSData * _Nullable)deviceData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



/// Progress messages for iFCC operations
typedef SWIFT_ENUM(NSInteger, OperationProgressType, open) {
/// iFCC is waiting for the card to be inserted or swiped
  OperationProgressTypeWaitingForCardInsert = 0,
/// Indicates that the card can be safely removed from the device
  OperationProgressTypeCardRemovalOK = 1,
/// The inserted card could not be used due to error - prompt user to swipe card
  OperationProgressTypeIccErrorPromptMagCardSwipe = 2,
/// The card must be re-inserted
  OperationProgressTypeReInsertCardRequired = 3,
/// An error was encountered during the previous swipe, and a new swipe is needed
  OperationProgressTypeSwipeErrorReSwipeRequested = 4,
/// The threshold for bad swipes was exceeded - a new payment method should be used
  OperationProgressTypeSwipeErrorBadSwipeThresholdExceeded = 5,
/// A chip card was swiped - prompt user to insert card
  OperationProgressTypeCardMustBeInserted = 6,
/// Card insertion detected
  OperationProgressTypeCardInserted = 7,
/// Card removal detected
  OperationProgressTypeCardRemoved = 8,
/// Card swipe detected
  OperationProgressTypeSwipeDetected = 9,
/// Communication with FreeWay has begun
  OperationProgressTypeFreeWayCommunicationStarted = 10,
/// Communication with FreeWay has ended
  OperationProgressTypeFreeWayCommunicationEnded = 11,
/// Card tap detected
  OperationProgressTypeTapDetected = 12,
/// The contactless interface failed to read the card, prompt user to insert or swipe card
  OperationProgressTypeContactlessInterfaceFailedTryContact = 13,
/// An error was encountered while reading contactless card
  OperationProgressTypeErrorReadingContactlessCard = 14,
/// Multiple contactless cards detected
  OperationProgressTypeMultipleContactlessCardsDetected = 15,
/// Contactless card still in field
  OperationProgressTypeContactlessCardStillInField = 16,
/// Contactless transaction reverted to contact
  OperationProgressTypeContactlessTransactionRevertedToContact = 17,
/// Contactless transaction fails, try again
  OperationProgressTypeContactlessApplicationNotSupported = 18,
/// Card processing has started and the card should not be removed
  OperationProgressTypeDoNotRemoveCard = 19,
/// Device is prompting for PIN entry
  OperationProgressTypeFirstPINPrompt = 20,
/// Device is prompting for PIN re-entry (most llikely due to an incorrect / bad PIN
  OperationProgressTypePinRetryPrompt = 21,
/// PIN entry on the device has succeeded
  OperationProgressTypePinEntrySuccessful = 22,
/// PIN entry on the device has failed
  OperationProgressTypePinEntryFailed = 23,
/// Device is prompting for the finsl PIN entry
  OperationProgressTypeFinalPINEntryPrompt = 24,
/// ICC application selection is complete
  OperationProgressTypeApplicationSelectionCompleted = 25,
/// Device started PIN entry
  OperationProgressTypePinEntryInProgress = 26,
/// Device started manual card entry
  OperationProgressTypeManualCardEntryInProgress = 27,
/// The inserted card is not supported - prompt user to swipe card
  OperationProgressTypeApplicationNotSupportedPromptMagCardSwipe = 28,
/// iFCC is waiting for the card to be inserted or swiped
  OperationProgressTypeWaitingForCardSwipe = 29,
/// Contactless EMV Payment Complete
  OperationProgressTypeContactlessEMVPaymentComplete = 30,
/// Waiting for tip amount selection
  OperationProgressTypeWaitingForTipAmountSelection = 31,
/// Waiting for ‘other’ tip amount entry
  OperationProgressTypeWaitingForAmountEntry = 32,
/// Waiting for credit / debit selection
  OperationProgressTypeWaitingForCreditDebitSelection = 33,
/// The chip card should be removed
  OperationProgressTypeCardShouldBeRemoved = 34,
/// Communication with the server has started
  OperationProgressTypeOnlineAuthorizationStarted = 35,
/// Communication with the server has ended.
  OperationProgressTypeOnlineAuthorizationEnded = 36,
/// The transaction was approved
  OperationProgressTypeTransactionApproved = 37,
/// The transaction was declined
  OperationProgressTypeTransactionDeclined = 38,
/// The transaction was canceled
  OperationProgressTypeTransactionCanceled = 39,
/// The transaction was approved but the card needs to be removed
  OperationProgressTypeTransactionApprovedWaitingOnCardRemoval = 40,
/// The transaction was declined but the card needs to be removed
  OperationProgressTypeTransactionDeclinedWaitingOnCardRemoval = 41,
/// The transaction was canceled but the card needs to be removed
  OperationProgressTypeTransactionCanceledWaitingOnCardRemoval = 42,
/// The POS is controlling the display, display was updated outside of a transaction, such as line items or custom form
  OperationProgressTypePosDisplayStarted = 43,
/// The card is not supported - prompt user to try another card
  OperationProgressTypeApplicationBlocked = 44,
/// The POI device is requesting Consumer Device Cardholder Verification Method (CD CVM)
  OperationProgressTypeSeePhoneWaitingForCard = 45,
};


SWIFT_CLASS("_TtC7iFCCKit27OperationProgressTypeBridge")
@interface OperationProgressTypeBridge : NSObject
+ (NSString * _Nonnull)toString:(enum OperationProgressType)operationProgressType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_PROTOCOL("_TtP7iFCCKit12PairedDevice_")
@protocol PairedDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@end


typedef SWIFT_ENUM(NSInteger, PalManifestResultInstallationDetail, open) {
/// The PAL was installed
  PalManifestResultInstallationDetailSuccessful = 0,
/// Device has this manifest installed, the variant is the same, and the installed version is the same or greater
  PalManifestResultInstallationDetailSkipped = 1,
/// The PAL failed to install
  PalManifestResultInstallationDetailFailed = 2,
};

typedef SWIFT_ENUM(NSInteger, PalProgressType, open) {
  PalProgressTypeFileWritePercentage = 0,
  PalProgressTypeFileWriteComplete = 1,
  PalProgressTypeRebootPending = 2,
  PalProgressTypeProcessingPendingCommands = 3,
};


/// Provides the result of a PAL update
SWIFT_PROTOCOL("_TtP7iFCCKit17PalUpdateDelegate_")
@protocol PalUpdateDelegate
/// Called when the POI Application Loader was not successful. This can be caused by many factors (invalid Manifest, incorrect commands, missing files)
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         response: details about the failed PAL operation
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)onFailureWithResponse:(id <PalUpdateFailureResponse> _Nonnull)response;
/// Called when the POI Application Loader went through all the stages without issue.  The files
/// have been uploaded to the POI and application (e.g. reboot) is complete.
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         response: details about the successful PAL operation
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)onSuccessWithResponse:(id <PalUpdateSuccessResponse> _Nonnull)response;
/// Provides the listener notification that a device undergoing a firmware update has issued a progress update message
/// \param progressMessage the message associated with the progress update
///
/// \param lane lane of the device which issued the progress message
///
- (void)onProgressUpdateWithProgressType:(enum PalProgressType)progressType progressMessage:(NSString * _Nonnull)progressMessage inLane:(NSString * _Nonnull)lane;
@end






SWIFT_PROTOCOL("_TtP7iFCCKit22PaymentOptionsDelegate_")
@protocol PaymentOptionsDelegate
/// Identifier of the current transaction operation
@property (nonatomic, readonly, strong) id <iFCCCancellableOperationIdentifier> _Nonnull operationIdentifier;
/// Lane identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull laneIdentifier;
/// Informs the current transaction of any modfied data used for the transaction
/// @param modifiedPaymentData - an optional ModifiedPaymentData object, if nil, the transaction continues with the previously supplied data
- (void)continuePayment:(ModifiedPaymentData * _Nullable)modifiedPaymentData;
@end


SWIFT_CLASS("_TtC7iFCCKit23PoiCardReaderDeviceInfo") SWIFT_DEPRECATED_MSG("Use FccCardReaderDeviceInfo")
@interface PoiCardReaderDeviceInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, readonly) BOOL supportsManualEntry;
@property (nonatomic, readonly) BOOL supportsBarcodeScanning;
@property (nonatomic, readonly) BOOL supportsLineItems;
@property (nonatomic, readonly) BOOL supportsPosAidSelection;
@property (nonatomic, readonly) BOOL supportsSignatureCapture;
@property (nonatomic, readonly) BOOL supportsVasReads;
@property (nonatomic, readonly) BOOL supportsContactOptimizedQuickChip;
@property (nonatomic, readonly) BOOL supportsContactlessOptimizedQuickChip;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Method to store an offline approved transaction via the POS
SWIFT_PROTOCOL("_TtP7iFCCKit17PosStoredDelegate_")
@protocol PosStoredDelegate
/// Method to store an offline approved transaction via the POS
/// \param request The PosStoredTransactionRequest object that the POS can utilize to get obtain the data to store to run later. 
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param inLane lane in which the operation was run
///
///
/// returns:
///
/// <ul>
///   <li>
///     A FailureAction.Mode, if the POS will store the transaction, then FailureAction.Mode.POS_STORED, otherwise FailureAction.Mode.ABORT
///   </li>
/// </ul>
- (enum Mode)storeTransactionWithRequest:(id <PosStoredTransactionRequest> _Nonnull)request operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)inLane SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PosStoredOperationRequestDelegate;

SWIFT_CLASS("_TtC7iFCCKit25PosStoredOperationRequest")
@interface PosStoredOperationRequest : OperationRequest
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId requestXml:(NSString * _Nonnull)requestXml posSyncId:(NSString * _Nonnull)posSyncId posSyncAttemptNumber:(NSInteger)posSyncAttemptNumber delegate:(id <PosStoredOperationRequestDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@end


@interface PosStoredOperationRequest (SWIFT_EXTENSION(iFCCKit)) <Validation>
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit33PosStoredOperationRequestDelegate_")
@protocol PosStoredOperationRequestDelegate
- (void)operationSucceededWithResult:(NSString * _Nonnull)result operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
- (void)operationFailedWithError:(NSError * _Nonnull)error operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
@end





/// Provides detailed info for an RUA firmware file. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit18RUAFileVersionInfo") SWIFT_DEPRECATED_MSG("Use FileVersionInfo")
@interface RUAFileVersionInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull subPlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly, copy) NSString * _Nonnull maintainerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSN;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull dependVer;
@property (nonatomic, readonly, copy) NSString * _Nonnull verFlag;
@property (nonatomic, readonly, copy) NSString * _Nonnull year;
@property (nonatomic, readonly, copy) NSString * _Nonnull month;
@property (nonatomic, readonly, copy) NSString * _Nonnull day;
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull compatibilityMatrix;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines behavior for managing the pairing process with ROAM based devices
/// note:
/// all methods are called on the main thread
SWIFT_PROTOCOL("_TtP7iFCCKit18RUAPairingDelegate_")
@protocol RUAPairingDelegate
/// Invoked when a ROAM based device pairing candidate provides a pairing passcode
/// \param passCode the BlueTooth pairing passcode reported by the pairing candidate
///
- (void)pairingConfirmationWithPasscodeWithPassCode:(NSString * _Nonnull)passCode;
/// Invoked when the pairing session is cancelled and no longer valid
- (void)pairingCancelled;
/// Invoked when a device has been detected via Audio Jack and pairing is about to be attempted
- (void)deviceFound;
/// Invoked when a device was previously found but is no longer visible while pairing is active
- (void)deviceLost;
/// Invoked when the pairing session encounters an error
/// \param error details of the pairing session error
///
- (void)pairingErrorWithError:(NSError * _Nonnull)error;
/// Invoked when pairing with a ROAM based device has completed successfully
/// \param device basic details of the ROAM device that has just completed pairing
///
- (void)pairingSucceededWithDevice:(id <PairedDevice> _Nonnull)device;
@end


/// Provides version info for the RUA firmware files. Instances of this object are immutable.
SWIFT_CLASS("_TtC7iFCCKit20RUAReaderVersionInfo") SWIFT_DEPRECATED_MSG("Use FccCardReaderDeviceInfo")
@interface RUAReaderVersionInfo : NSObject <CardReaderDeviceInfo>
@property (nonatomic, readonly, copy) NSString * _Nonnull hardwareType;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, readonly, strong) RUAFileVersionInfo * _Nonnull bootFileVersion;
@property (nonatomic, readonly, strong) RUAFileVersionInfo * _Nonnull controlFileVersion;
@property (nonatomic, readonly, copy) NSArray<RUAFileVersionInfo *> * _Nonnull userFileVersions;
@property (nonatomic, readonly, copy) NSArray<RUAFileVersionInfo *> * _Nonnull parameterFileVersions;
@property (nonatomic, readonly, copy) NSString * _Nonnull emvKernelVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull keyVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull pedVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull fontFileVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull productSerialNumber;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable configuration;
@property (nonatomic, strong) id <DeviceVersionInfo> _Nullable deviceVersionInfo;
@property (nonatomic, strong) id <DeviceFeatures> _Nullable deviceFeatures;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP7iFCCKit22ReattachDeviceDelegate_")
@protocol ReattachDeviceDelegate <NSObject>
/// Provides notification to the receiver that the iFCC re-attach device has completed successfully
/// \param laneId The lane identifier from where the device was re-attached
///
- (void)onDeviceReattachedWithLaneId:(NSString * _Nonnull)laneId;
/// Provides notification to the receiver that the iFCC re-attach device has failed
/// \param laneId The lane identifier for the device
///
/// \param error The error that occurred, including what component failed and why
///
- (void)onReattachDeviceErrorWithLaneId:(NSString * _Nonnull)laneId error:(NSError * _Nonnull)error;
@end


/// Helper class for obtaining supported values for receipt settings
SWIFT_CLASS("_TtC7iFCCKit19ReceiptConfigBridge")
@interface ReceiptConfigBridge : NSObject
/// Represents the list of supported receipt language values
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull languages;)
+ (NSArray<NSString *> * _Nonnull)languages SWIFT_WARN_UNUSED_RESULT;
/// Represents the list of supported receipt format values
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull formats;)
+ (NSArray<NSString *> * _Nonnull)formats SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The data elements needed to initiate an Authorization request
SWIFT_CLASS("_TtC7iFCCKit22RefundOperationRequest")
@interface RefundOperationRequest : CardBasedOperationRequest
/// Industry datatype
@property (nonatomic, readonly, copy) NSString * _Nullable industryDataType;
/// Creates an instance of RefundOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader/TransactionAmount initializer");
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nullable)transactionAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of RefundOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
/// \param industryDataType Optional Industry Datatype
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems industryDataType:(NSString * _Nullable)industryDataType OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this RefundOperationRequest instance
///
/// returns:
/// A string that can be used to log the RefundOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit18RemoveLaneDelegate_")
@protocol RemoveLaneDelegate <NSObject>
/// Provides notification to the receiver that the lane has been removed
/// \param laneId The lane identifier
///
- (void)onLaneRemovedWithLaneId:(NSString * _Nonnull)laneId;
@end


SWIFT_PROTOCOL("_TtP7iFCCKit22ResetEmvConfigDelegate_")
@protocol ResetEmvConfigDelegate
- (void)resetEmvConfigSucceededWithOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
- (void)resetEmvConfigFailedWithError:(NSError * _Nonnull)error operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
@end


/// A request object that provides data for a Sale Request to iFCC
SWIFT_CLASS("_TtC7iFCCKit20SaleOperationRequest")
@interface SaleOperationRequest : CardBasedOperationRequest
/// Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
@property (nonatomic, readonly) BOOL partialAmount SWIFT_DEPRECATED_MSG("Use AuthorizationData");
/// optional Authorization Service data associated with the operation
@property (nonatomic, readonly, strong) AuthorizationData * _Nullable authorizationData;
/// Creates an instance of SaleOperationRequest with a single purchaseTotal using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with a single purchaseTotal using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param purchaseTotal The total amount of the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId purchaseTotal:(NSDecimal)purchaseTotal partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use TransactionAmount/AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param partialAmount Optional Boolean (defaults to false) value which, when set to true, will request that the FreeWay operation allow partial amount processing
/// which are to be used in the UAT environment in order to simulate a transaction where a partial authorization is requested
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount partialAmount:(BOOL)partialAmount token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use AuthorizationData initializer");
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of SaleOperationRequest with transaction amounts using card data
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param generateToken Optional flag to request a FreeWay token based on the supplied card data
///
/// \param useDynamicExpiration Optional flag specifiying the use of a dynamic expiration date if a token is being generated card reader for the scope of the operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData generateToken:(BOOL)generateToken useDynamicExpiration:(BOOL)useDynamicExpiration billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of SaleOperationRequest with transaction amounts using a token
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param transactionAmount The amounts for the request
///
/// \param authorizationData Optional authorization data associated with the request
///
/// \param token A FreeWay token to use in place of card data
///
/// \param cardExpirationMonth Optional string representing the two-digit card expiration month
///
/// \param cardExpirationYear Optional string representing the two-digit card expiration year
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId transactionAmount:(TransactionAmount * _Nonnull)transactionAmount authorizationData:(AuthorizationData * _Nullable)authorizationData token:(NSString * _Nonnull)token cardExpirationMonth:(NSString * _Nullable)cardExpirationMonth cardExpirationYear:(NSString * _Nullable)cardExpirationYear billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this SaleOperationRequest instance
///
/// returns:
/// A string that can be used to log the SaleOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents shipping information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit8ShipFrom")
@interface ShipFrom : NSObject <NSCopying, Validation>
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCompany:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents shipping information supplied with a request
SWIFT_CLASS("_TtC7iFCCKit6ShipTo")
@interface ShipTo : NSObject <NSCopying, Validation>
/// Name of the shipping company (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable shippingCompany;
/// Shipping method (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable shippingMethod;
/// Tracking number of shipment (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable trackingNumber;
/// Company name (40 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable company;
/// Title on billing address (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// First name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Name suffix of person named in billing information (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable suffix;
/// Street Address 1 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street1;
/// Street Address 2 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street2;
/// Street Address 3 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street3;
/// Street Address 4 (60 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable street4;
/// City (50 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State/Province (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Postal Code spaces and hyphens are stripped, used for AVS (4 chars min, 9 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// Country, ISO-3166 2-letter, 3-letter, or 3-digit code (2 chars min, 3 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Phone number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// Fax number (15 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable faxNumber;
/// E-mail address (255 chars max)
@property (nonatomic, readonly, copy) NSString * _Nullable email;
- (nonnull instancetype)initWithCompany:(NSString * _Nullable)company title:(NSString * _Nullable)title firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName suffix:(NSString * _Nullable)suffix street1:(NSString * _Nullable)street1 street2:(NSString * _Nullable)street2 street3:(NSString * _Nullable)street3 street4:(NSString * _Nullable)street4 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country phoneNumber:(NSString * _Nullable)phoneNumber faxNumber:(NSString * _Nullable)faxNumber email:(NSString * _Nullable)email shippingCompany:(NSString * _Nullable)shippingCompany shippingMethod:(NSString * _Nullable)shippingMethod trackingNumber:(NSString * _Nullable)trackingNumber OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement capturing all values suitable for logging
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Validates the request data
///
/// returns:
/// A ValidationResult containing the result and any anomalies if vaildation failed
- (id <ValidationResult> _Nonnull)validate SWIFT_WARN_UNUSED_RESULT;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Specifies supported currency symbol placements in relation to the value
typedef SWIFT_ENUM(NSInteger, SymbolPlacement, open) {
  SymbolPlacementLeft = 0,
  SymbolPlacementRight = 1,
};


SWIFT_CLASS("_TtC7iFCCKit13TaxDetailItem")
@interface TaxDetailItem : NSObject
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, strong) NSNumber * _Nonnull amount;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type amount:(NSNumber * _Nonnull)amount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Represents amount data supplied with a request
SWIFT_CLASS("_TtC7iFCCKit17TransactionAmount")
@interface TransactionAmount : NSObject <NSCopying>
@property (nonatomic, strong) NSDecimalNumber * _Nonnull total;
@property (nonatomic, strong) NSDecimalNumber * _Nullable tip;
@property (nonatomic, strong) NSDecimalNumber * _Nullable taxTotal;
@property (nonatomic, strong) NSDecimalNumber * _Nullable discountTotal;
@property (nonatomic, copy) NSArray<TaxDetailItem *> * _Nullable taxDetailItems;
- (nonnull instancetype)init:(NSDecimalNumber * _Nonnull)total tip:(NSDecimalNumber * _Nullable)tip taxTotal:(NSDecimalNumber * _Nullable)taxTotal taxDetails:(NSArray<TaxDetailItem *> * _Nullable)taxDetails discountTotal:(NSDecimalNumber * _Nullable)discountTotal OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDecimalNumber * _Nonnull)total tip:(NSDecimalNumber * _Nullable)tip OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// A string that can be used to log the state of the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// The data elements needed to initiate a Void request
SWIFT_CLASS("_TtC7iFCCKit20VoidOperationRequest")
@interface VoidOperationRequest : FollowOnOperationRequest
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceNumber Merchant-provided invoice number
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceNumber:(NSString * _Nonnull)invoiceNumber registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use InvoiceHeader initializer");
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of VoidOperationRequest
/// \param laneId Unique identifier of the lane which the operation initiation is requested
///
/// \param merchantReferenceCode Merchant-provided reference code
///
/// \param invoiceHeader Merchant provided invoice data
///
/// \param registerId Identifier of the register making the operation request.
/// <ul>
/// </ul>
///
/// \param clerkId Identity of the clerk requesting the operation
///
/// \param clientDeviceId The serial number of the connected Ingenico device
///
/// \param requestId Required in order to tie the request to a preceding Capture or Sale operation
///
/// \param billTo Optional BillTo information associated with the request, some fields are used for AVS
///
/// \param shipTo Optional ShipTo data associated with the request
///
/// \param shipFrom Optional ShipFrom data associated with the request
///
/// \param lineItems Optional Level III data, purchase detail item information
///
- (nonnull instancetype)initWithLaneId:(NSString * _Nonnull)laneId merchantReferenceCode:(NSString * _Nonnull)merchantReferenceCode invoiceHeader:(InvoiceHeader * _Nullable)invoiceHeader registerId:(NSString * _Nonnull)registerId clerkId:(NSString * _Nonnull)clerkId clientDeviceId:(NSString * _Nullable)clientDeviceId requestId:(NSString * _Nonnull)requestId billTo:(BillTo * _Nullable)billTo shipTo:(ShipTo * _Nullable)shipTo shipFrom:(ShipFrom * _Nullable)shipFrom lineItems:(LineItems * _Nullable)lineItems OBJC_DESIGNATED_INITIALIZER;
/// Creates a statement logging all values on this VoidOperationRequest instance
///
/// returns:
/// A string that can be used to log the VoidOperationRequest object
- (NSString * _Nonnull)logDescription SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use debugDescription");
/// a string representation of all values on the instance suitable for logging, some values may be masked
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Central singleton element of the iFCC library. Must be initialized, is called when running operations with FreeWay
SWIFT_CLASS("_TtC7iFCCKit4iFCC")
@interface iFCC : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@protocol iFCCLoggingDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Sets the logging delegate
///
/// throws:
/// Error if the delegate cannot be registered
- (BOOL)registerLoggingDelegate:(id <iFCCLoggingDelegate> _Nonnull)loggingDelegate error:(NSError * _Nullable * _Nullable)error;
/// Removes the logging delegate
///
/// throws:
/// Error if the deregistration cannot be completed
- (BOOL)deregisterLoggingDelegateAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Requests logging information
///
/// returns:
/// logging information containing current log file name and archived log files
- (id <iFCCFileLoggingInfo> _Nullable)getFileLoggingInfo SWIFT_WARN_UNUSED_RESULT;
/// Determines if the POI device is currently attached to the specified lane
///
/// returns:
/// Boolean specifying whether or not the POI device is attached
- (BOOL)isDeviceAttachedInLane:(NSString * _Nonnull)laneIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Boolean specifying whether or not the lane is open
- (BOOL)isLaneOpenInLane:(NSString * _Nonnull)laneIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Begins an Authorization Operation
/// \param authorizationOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateAuthorizationOperationWithAuthorizationOperationRequest:(AuthorizationOperationRequest * _Nonnull)authorizationOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Capture Operation
/// \param captureOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateCaptureOperationWithCaptureOperationRequest:(CaptureOperationRequest * _Nonnull)captureOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Sale Operation
/// \param saleOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateSaleOperationWithSaleOperationRequest:(SaleOperationRequest * _Nonnull)saleOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Void Operation
/// \param voidOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateVoidOperationWithVoidOperationRequest:(VoidOperationRequest * _Nonnull)voidOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Refund Operation
/// \param refundOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateRefundOperationWithRefundOperationRequest:(RefundOperationRequest * _Nonnull)refundOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Follow-On Refund Operation (card required)
/// \param followOnRefundOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateFollowOnRefundOperationWithFollowOnRefundOperationRequest:(FollowOnRefundOperationRequest * _Nonnull)followOnRefundOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins an Adjustment Operation
/// \param adjustmentOperationRequest The request object containing the data needed for the request
///
/// \param implementDynamicCallbacks This value is not currently used by iFCC. Defaults to ‘false’
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no operation delegate for the request’s lane) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateAdjustmentOperationWithAdjustmentOperationRequest:(AdjustmentOperationRequest * _Nonnull)adjustmentOperationRequest implementDynamicCallbacks:(BOOL)implementDynamicCallbacks error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Cancels operation (if there is one) in lane specified
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
/// \param operationIdentifier The Operation’s unique identifier that needs to be cancelled.
///
- (BOOL)cancelOperationInLane:(NSString * _Nonnull)laneIdentifier operationIdentifier:(id <iFCCCancellableOperationIdentifier> _Nonnull)operationIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Begins a Raw Card Read Operation
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateRawCardReadOperationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Issue Operation
/// \param giftCardIssueOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardIssueOperationWithGiftCardIssueOperationRequest:(GiftCardIssueOperationRequest * _Nonnull)giftCardIssueOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Activate Operation
/// \param giftCardActivateOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardActivateOperationWithGiftCardActivateOperationRequest:(GiftCardActivateOperationRequest * _Nonnull)giftCardActivateOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Reload Operation
/// \param giftCardReloadOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardReloadOperationWithGiftCardReloadOperationRequest:(GiftCardReloadOperationRequest * _Nonnull)giftCardReloadOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Inquiry Operation
/// \param giftCardInquiryOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardInquiryOperationWithGiftCardInquiryOperationRequest:(GiftCardInquiryOperationRequest * _Nonnull)giftCardInquiryOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Deactivate Operation
/// \param giftCardDeactivateOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardDeactivateOperationWithGiftCardDeactivateOperationRequest:(GiftCardDeactivateOperationRequest * _Nonnull)giftCardDeactivateOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Begins a Gift Card Cashout Operation
/// \param giftCardCashoutOperationRequest The request object containing the data needed for the request
///
///
/// throws:
/// If an error is encountered while initiating the request (ex. no device available) it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)initiateGiftCardCashoutOperationWithGiftCardCashoutOperationRequest:(GiftCardCashoutOperationRequest * _Nonnull)giftCardCashoutOperationRequest error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@protocol iFCCLaneDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Registers an instance of iFCCLaneDelegate to receive callbacks from device operations run in a given lane
/// \param laneDelegate The delegate to receive callbacks from operations run in the given lane
///
/// \param laneIdentifier unique identifier of the lane with which the delegate is associated
///
///
/// throws:
/// If an error is encountered (ex. lane does not exist) it will be thrown by this function
- (BOOL)registerLaneDelegate:(id <iFCCLaneDelegate> _Nonnull)laneDelegate inLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Removes the operation delegate from a given lane
/// \param laneIdentifier The unique identifier of the lane from which the delegate is removed
///
///
/// throws:
/// Error if the deregistration cannot be completed
- (BOOL)deregisterLaneDelegateInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Requests version information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device version information cannot be completed
///
/// returns:
/// Container with reader version information
- (RUAReaderVersionInfo * _Nullable)getDeviceVersionInformationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getCardReaderDeviceInfo");
/// Requests device information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device information cannot be completed
///
/// returns:
/// Container with devicer information
- (id <CardReaderDeviceInfo> _Nullable)getDeviceInformationInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use getCardReaderDeviceInfo");
/// Requests device information for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the device information cannot be completed
///
/// returns:
/// Container with devicer information
- (id <CardReaderDeviceInfo> _Nullable)getCardReaderDeviceInfoInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests device reset in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
///
/// throws:
/// Error if the device reset cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)resetDeviceInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests firmware upgrade for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
/// \param firmwareURI - The location of the file used to update the firmware 
///
///
/// throws:
/// Error if the device firmware cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)updateFirmwareInLane:(NSString * _Nonnull)laneIdentifier firmwareURI:(NSString * _Nonnull)firmwareURI error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use runPalUpdate() to update firmware using a PAL package");
/// Requests Battery Status of the device in lane
/// \param laneIdentifier The unique identifier of the lane for which the version information is requested
///
///
/// throws:
/// Error if the battery status request fails
- (BOOL)requestBatteryStatusInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Requests current status for the Store and Forward engine
///
/// returns:
/// An optional container with currently available store and forward status information
- (id <StoreAndForwardStatus> _Nullable)requestStoreAndForwardStatusAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Forces Store and Forward engine replay event
///
/// throws:
/// Error if iFCC is not initialized
- (BOOL)startStoreAndForwardReplayAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Method is no longer supported");
/// Resolves a list of offline request ids to the corresponding real request id
/// \param offlineRequestIds - an array of offline request ids 
///
///
/// throws:
/// If an error is encountered while querying for the real request information it will be thrown by this function
///
/// returns:
/// An Array of StoreAndForwardResult objects containing the offline request id, associated real request id, decision code and reasonCode
- (NSArray<id <StoreAndForwardResult>> * _Nullable)resolveStoreAndForwardRequestIds:(NSArray<NSString *> * _Nonnull)offlineRequestIds error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests firmware upgrade for the device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the device reset is requested
///
/// \param fileURI The location of the file used to update the firmware
///
/// \param palUpdateDelegate Provides the result of a PAL update
///
///
/// throws:
/// Error if the device firmware cannot be initiated
- (id <iFCCOperationIdentifier> _Nullable)runPalUpdateInLane:(NSString * _Nonnull)laneIdentifier fileURI:(NSString * _Nonnull)fileURI palUpdateDelegate:(id <PalUpdateDelegate> _Nonnull)palUpdateDelegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Requests a list of installed updates on a given device.
/// \param deviceId The identifier of the device (usually serial number)
///
///
/// throws:
/// Error if the installation history cannot be read
///
/// returns:
/// An Array of strings representing the currently installed manifests, variants and versions.
- (NSArray<NSString *> * _Nullable)getManifestVersionsWithDeviceId:(NSString * _Nonnull)deviceId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Registers an instance of iFCCLaneDelegate to receive notifications regarding POS stored transactions processed in a given lane
/// \param posStoredDelegate The delegate to receive callbacks for pos stored requests run in the given lane
///
/// \param laneIdentifier unique identifier of the lane with which the delegate is associated
///
///
/// throws:
/// If an error is encountered (ex. library not initialized, lane does not exist) it will be thrown by this function
- (BOOL)registerPosStoredDelegate:(id <PosStoredDelegate> _Nullable)posStoredDelegate inLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Submit a POS Stored Request to Freeway
/// \param posStoredTransactionRequest - The request object containing the data needed for the request 
///
/// \param delegate receives result of the request
///
///
/// throws:
/// If an error is encountered while initiating the request it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)submitPosStoredRequest:(id <PosStoredTransactionRequest> _Nonnull)posStoredTransactionRequest delegate:(id <PosStoredOperationRequestDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resets the EMV config files to the bundled version
/// \param includeContact - Reset contact 
///
/// \param includeContactless - Reset contactless 
///
/// \param delegate - Provides the result of the EMV Config reset 
///
///
/// throws:
/// If an error is encountered while initiating the request it will be thrown by this function
- (id <iFCCOperationIdentifier> _Nullable)resetEmvConfigInLane:(NSString * _Nonnull)laneIdentifier includeContact:(BOOL)includeContact includeContactless:(BOOL)includeContactless delegate:(id <ResetEmvConfigDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class iFCCLoggingConfiguration;
@protocol iFCCInitializationDelegate;
@protocol iFCCScanDevicesDelegate;
@protocol iFCCDeviceSetupDelegate;

@interface iFCC (SWIFT_EXTENSION(iFCCKit))
/// Used when making all calls to iFCC, including initialization calls
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) iFCC * _Nonnull sharedInstance;)
+ (iFCC * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Provides version information
///
/// returns:
/// A VersionInfo object containing version info for iFCC and its components
- (id <VersionInfo> _Nonnull)getVersionInfo SWIFT_WARN_UNUSED_RESULT;
/// Determines if the iFCC library is currently initialized
///
/// returns:
/// Boolean specifying whether or not the iFCC library is initialized
- (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Determines if the POI device is currently attached
///
/// returns:
/// Boolean specifying whether or not the POI device is attached
/// @available(*, deprecated, message: “use isDeviceAttached or isLaneOpen”)
- (BOOL)isDeviceConnected SWIFT_WARN_UNUSED_RESULT;
/// Initializes iFCC
/// \param appSettingsData A Data object containing app config settings required by iFCC
///
/// \param loggingConfiguration A LoggingConfiguration object containing logging details
///
/// \param delegate receives callbacks from iFCC re: library initialization
///
///
/// throws:
/// The error object created by iFCC if there was an error with initialization
- (BOOL)initializeLibraryWithAppSettingsData:(NSData * _Nonnull)appSettingsData loggingConfiguration:(iFCCLoggingConfiguration * _Nonnull)loggingConfiguration delegate:(id <iFCCInitializationDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/// Deinitializes the iFCC library
///
/// throws:
/// The error object created by iFCC if there was an error with deinitialization
- (BOOL)deInitializeLibraryAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Force closes the iFCC library:
/// <ul>
///   <li>
///     any in progress operations will be terminated with no notifications
///   </li>
///   <li>
///     all lanes will be terminated with no notifications
///   </li>
///   <li>
///     all background processes will be terminated
///   </li>
///   <li>
///     the iFCC <em>must</em> be initialized afterwards via the initializeLibrary API
///   </li>
/// </ul>
- (void)forceCloseLibrary;
/// Removes a particular lane:
/// <ul>
///   <li>
///     any in process operations will be terminated with a device removed notification
///   </li>
///   <li>
///     the lane will be removed and the RemoveLaneDelegate will signify when complete
///   </li>
///   <li>
///     background processes such a SAF replays will continue to run
///   </li>
///   <li>
///     the iFCC setupDevices or attachDevice API must be called to establish a new lane
///   </li>
/// </ul>
- (BOOL)removeLane:(NSString * _Nonnull)laneId removeLaneDelegate:(id <RemoveLaneDelegate> _Nonnull)removeLaneDelegate error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of seting a card reader device based on the supplied options
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param deviceScanDelegate receives callbacks from iFCC regarding the device discovery, connection and set up process
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)scanDevicesWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions deviceScanDelegate:(id <iFCCScanDevicesDelegate> _Nonnull)deviceScanDelegate error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of seting a card reader device based on the supplied options
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param delegate receives callbacks from iFCC regarding the device discovery, connection and set up process
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)setupDevicesWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions delegate:(id <iFCCDeviceSetupDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/// Attempts to re-establish a connection to the previously connected device in the specific lane
/// \param laneIdentifier The unique identifier of the lane for which the reconnection is attempted
///
///
/// throws:
/// Error if the device reconnection effort fails
- (BOOL)reconnectDeviceInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of establishing a connection to a single device without opening the lane
/// \param deviceOptions an instance of a class derived from iFCCCardReaderDeviceOptions
///
/// \param attachDeviceDelegate receives callbacks from iFCC regarding the attach device result
///
/// \param timeoutInSecs optional number of seconds to wait for the connection to be established, min: 60, max: 600, default: 120
///
///
/// throws:
/// The error object created by iFCC if there was an error with attaching the device
- (BOOL)attachDeviceWithDeviceOptions:(id <iFCCCardReaderDeviceOptions> _Nonnull)deviceOptions attachDeviceDelegate:(id <AttachDeviceDelegate> _Nonnull)attachDeviceDelegate timeoutInSecs:(NSNumber * _Nullable)timeoutInSecs error:(NSError * _Nullable * _Nullable)error;
/// Re-attaches the device in the specified lane
/// \param laneIdentifier Corresponds to the device’s lane identifier
///
/// \param reattachDeviceDelegate delegate to handle notifications when re-attach completes or fails
///
/// \param timeoutInSecs optional number of seconds to wait for the connection to be established, min: 30, max: 600, default: 120
///
///
/// throws:
/// The error object created by iFCC if there was an error re-attaching the device
- (BOOL)reattachDeviceInLane:(NSString * _Nonnull)laneIdentifier reattachDeviceDelegate:(id <ReattachDeviceDelegate> _Nonnull)reattachDeviceDelegate timeoutInSecs:(NSNumber * _Nullable)timeoutInSecs error:(NSError * _Nullable * _Nullable)error;
/// Opens the lane for the attached device
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
/// \param laneStatusDelegate receives callbacks from iFCC regarding the lane open
///
///
/// throws:
/// The error object created by iFCC if there was an error opening the lane
- (BOOL)openLaneInLane:(NSString * _Nonnull)laneIdentifier laneStatusDelegate:(id <LaneStatusDelegate> _Nonnull)laneStatusDelegate error:(NSError * _Nullable * _Nullable)error;
/// Closes the specified line so no transactions can be performed
/// \param laneIdentifier Corresponds to a connected device’s lane identifier
///
///
/// throws:
/// The error object created by iFCC if there was an error closing the lane
- (BOOL)closeLaneInLane:(NSString * _Nonnull)laneIdentifier error:(NSError * _Nullable * _Nullable)error;
/// Initiates the asynchronous process of detaching the device in the specified lane
/// \param laneIdentifier The lane identifier
///
///
/// throws:
/// The error object created by iFCC if there was an error with setup
- (BOOL)detachDeviceInLane:(NSString * _Nonnull)laneIdentifier detachDeviceDelegate:(id <DetachDeviceDelegate> _Nonnull)detachDeviceDelegate error:(NSError * _Nullable * _Nullable)error;
/// Clears Ama credentials from the iOS keychain
///
/// returns:
/// Boolean specifying whether or not the clearing of the credentials was successful
- (BOOL)clearAmaCredentials SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP7iFCCKit28iFCCCardDataReceivedDelegate_")
@protocol iFCCCardDataReceivedDelegate
/// Provides card data information and a delegate to determine the next course of action for the transaction
/// \param basicCardData object containing basic card data
///
/// \param paymentOptionsDelegate delegate to determing how the transaction should proceed
///
- (void)getModifiedPaymentDataWithBasicCardData:(id <BasicCardData> _Nonnull)basicCardData paymentOptionsDelegate:(id <PaymentOptionsDelegate> _Nonnull)paymentOptionsDelegate;
@end




/// Represents a logging output definition
SWIFT_PROTOCOL("_TtP7iFCCKit17iFCCLoggingOutput_")
@protocol iFCCLoggingOutput
@end


/// Represent a console logging output instance
SWIFT_CLASS("_TtC7iFCCKit24iFCCConsoleLoggingOutput")
@interface iFCCConsoleLoggingOutput : NSObject <iFCCLoggingOutput>
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents supported device comminication interfaces
typedef SWIFT_ENUM(NSInteger, iFCCDeviceCommunicationInterface, open) {
/// BlueTooth
  iFCCDeviceCommunicationInterfaceBluetooth = 1,
/// Network
  iFCCDeviceCommunicationInterfaceIp = 2,
/// Audio Jack
  iFCCDeviceCommunicationInterfaceAudiojack = 3,
/// USB
  iFCCDeviceCommunicationInterfaceUsb = 4,
};

/// Represents the card reader device family used for device settings data
typedef SWIFT_ENUM(NSInteger, iFCCDeviceFamily, open) {
/// Unknown
  iFCCDeviceFamilyUnknown = 0,
/// Ingenico ROAM
  iFCCDeviceFamilyRoam = 1,
/// Ingenico UPP
  iFCCDeviceFamilyUpp = 2,
/// Ingenico RAM
  iFCCDeviceFamilyRam = 3,
/// Ingenico RBA
  iFCCDeviceFamilyRba = 4,
/// Ingenico Tetra family (UPP or RBA)
  iFCCDeviceFamilyTetra = 5,
};

typedef SWIFT_ENUM(NSInteger, iFCCDeviceLanguage, open) {
  iFCCDeviceLanguageEnglish = 0,
  iFCCDeviceLanguageSpanish = 1,
  iFCCDeviceLanguageFrench = 2,
};


/// Methods to receive events occurring during iFCC library initialization
SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCDeviceSetupDelegate_")
@protocol iFCCDeviceSetupDelegate
/// Provides notification to the receiver that iFCC device setup has completed successfully
/// \param availableDevices Devices available for use with iFCC
///
- (void)deviceSetupCompletedWithAvailableDevices:(NSArray<id <iFCCCardReaderDevice>> * _Nonnull)availableDevices;
/// Provides notification to the receiver that iFCC device setup has failed
/// \param error The error that occurred, including what component failed and why
///
- (void)deviceSetupFailedWithError:(NSError * _Nonnull)error;
@optional
/// Provides notification to the receiver that the end user needs to confirm the device pairing sequence, only applicable to the MOBY 5500
/// \param ledSequence An array of LEDSequenceItems representing the LED pairing sequence pattern
///
/// \param pairingConfirmationDelegate an iFCCPairingConfirmationDelegate instance for managing the pairing confirmation process
///
- (void)ledPairingConfirmationRequestedWithLedSequence:(NSArray<id <LEDSequenceItem>> * _Nonnull)ledSequence pairingConfirmationDelegate:(id <iFCCPairingConfirmationDelegate> _Nonnull)pairingConfirmationDelegate;
@end

/// Represents a type of card reader device
typedef SWIFT_ENUM(NSInteger, iFCCDeviceType, open) {
/// none
  iFCCDeviceTypeNone = 0,
/// Ingenico RP457c
  iFCCDeviceTypeRp457c = 1,
/// Ingenico Moby 5500
  iFCCDeviceTypeMoby5500 = 2,
/// Ingenico UPP Device
  iFCCDeviceTypeUpp = 3,
/// Ingenico RBA device
  iFCCDeviceTypeRba = 4,
};


/// Helper class for iFCCDeviceType enum
SWIFT_CLASS("_TtC7iFCCKit20iFCCDeviceTypeBridge")
@interface iFCCDeviceTypeBridge : NSObject
/// Retrieves the name for the specified device type
/// \param deviceType a device type enum
///
///
/// returns:
/// the name for the device type
+ (NSString * _Nonnull)deviceNameWithDeviceType:(enum iFCCDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family for the specified device type
/// \param deviceType a device type enum value
///
///
/// returns:
/// the device famliy enum based on the name
+ (enum iFCCDeviceFamily)deviceFamilyWithDeviceType:(enum iFCCDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family name for the specified device type
/// \param deviceFamily a device family enum value
///
///
/// returns:
/// the device family name
+ (NSString * _Nonnull)deviceFamilyNameWithDeviceFamily:(enum iFCCDeviceFamily)deviceFamily SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family name for the specified device name
/// \param deviceName a device name
///
///
/// returns:
/// the device family name
+ (NSString * _Nonnull)getDeviceFamilyNameWithDeviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device type for the specified name
/// \param deviceName a device name
///
///
/// returns:
/// the device type enum based on the name
+ (enum iFCCDeviceType)getDeviceTypeWithDeviceName:(NSString * _Nullable)deviceName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the device family for the specified name
/// \param deviceFamilyName a device family name
///
///
/// returns:
/// the device famliy enum based on the name
+ (enum iFCCDeviceFamily)getDeviceFamilyWithDeviceFamilyName:(NSString * _Nullable)deviceFamilyName SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of supported devices
///
/// returns:
/// an array of all available device names
+ (NSArray<NSString *> * _Nonnull)availableDeviceNames SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of supported devices
/// \param deviceInterface a communication interface
///
///
/// returns:
/// an array of supported device names based on the specified communication interface
+ (NSArray<NSString *> * _Nonnull)supportedDeviceNamesFor:(enum iFCCDeviceCommunicationInterface)deviceInterface SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)supportedDeviceFamiliesFor:(enum iFCCDeviceCommunicationInterface)deviceInterface SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of device family names
///
/// returns:
/// an array of all available device names
+ (NSArray<NSString *> * _Nonnull)availableDeviceFamilyNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// iFCC Error Codes
SWIFT_CLASS("_TtC7iFCCKit22iFCCErrorCodeConstants")
@interface iFCCErrorCodeConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iFCCErrorDomain;)
+ (NSString * _Nonnull)iFCCErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iPoiErrorDomain;)
+ (NSString * _Nonnull)iPoiErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iMsrLibErrorDomain SWIFT_DEPRECATED_MSG("Use iPoiErrorDomain");)
+ (NSString * _Nonnull)iMsrLibErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger genericErrorCode;)
+ (NSInteger)genericErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger illegalArgumentException;)
+ (NSInteger)illegalArgumentException SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidThreadErrorCode;)
+ (NSInteger)invalidThreadErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger failedCastErrorCode;)
+ (NSInteger)failedCastErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger httpStatusCodeErrorCode;)
+ (NSInteger)httpStatusCodeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger badGatewayErrorCode;)
+ (NSInteger)badGatewayErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unexpectedResponseTypeReturnedErrorCode;)
+ (NSInteger)unexpectedResponseTypeReturnedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger existingLoggingDelegateErrorCode;)
+ (NSInteger)existingLoggingDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidLaneMapCountErrorCode;)
+ (NSInteger)invalidLaneMapCountErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidIFCCStateErrorCode;)
+ (NSInteger)invalidIFCCStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCInitializationDataMissing;)
+ (NSInteger)iFCCInitializationDataMissing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCConfigurationContextAlreadyInitialized;)
+ (NSInteger)iFCCConfigurationContextAlreadyInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidContactlessConfigurationErrorCode;)
+ (NSInteger)invalidContactlessConfigurationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unableToDeinitializeErrorCode;)
+ (NSInteger)unableToDeinitializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCInitializationFailedErrorCode;)
+ (NSInteger)iFCCInitializationFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger networkIsUnreachableErrorCode;)
+ (NSInteger)networkIsUnreachableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationCurrentlyInProgressErrorCode;)
+ (NSInteger)operationCurrentlyInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationResponseMissingExpectedReplyComponentErrorCode;)
+ (NSInteger)operationResponseMissingExpectedReplyComponentErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger inputParameterFormatErrorCode;)
+ (NSInteger)inputParameterFormatErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requiredPurchaseAmountDataNotAvailableErrorCode;)
+ (NSInteger)requiredPurchaseAmountDataNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger responseDeserializationErrorCode;)
+ (NSInteger)responseDeserializationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requestSerializationErrorCode;)
+ (NSInteger)requestSerializationErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unableToCreateFreeWayUrlConnectionErrorCode;)
+ (NSInteger)unableToCreateFreeWayUrlConnectionErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cardWaitTimedOutErrorCode;)
+ (NSInteger)cardWaitTimedOutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationCurrentlyInProgressErrorCode;)
+ (NSInteger)noOperationCurrentlyInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationMetaDataFoundErrorCode;)
+ (NSInteger)noOperationMetaDataFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationIdentifierNotFoundErrorCode;)
+ (NSInteger)operationIdentifierNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationRequestNotFoundErrorCode;)
+ (NSInteger)operationRequestNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger serviceResponseElementNotFoundErrorCode;)
+ (NSInteger)serviceResponseElementNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noMappedDeviceAvailableErrorCode;)
+ (NSInteger)noMappedDeviceAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger posResponseNotAvailableErrorCode;)
+ (NSInteger)posResponseNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationNotSupportedErrorCode;)
+ (NSInteger)operationNotSupportedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cancelNotSupportedWhileCommunicatingWithFreeWayErrorCode;)
+ (NSInteger)cancelNotSupportedWhileCommunicatingWithFreeWayErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationInInvalidStateErrorCode;)
+ (NSInteger)operationInInvalidStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cardDataNotAvailableErrorCode;)
+ (NSInteger)cardDataNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger freeWayResponseDidNotContainUsableDataErrorCode;)
+ (NSInteger)freeWayResponseDidNotContainUsableDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger freeWayResponseDidNonSuccessHttpResponseCodeErrorCode;)
+ (NSInteger)freeWayResponseDidNonSuccessHttpResponseCodeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger emvTagValueNotAvailableErrorCode;)
+ (NSInteger)emvTagValueNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger requestedDolNotAvailableErrorCode;)
+ (NSInteger)requestedDolNotAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger misMatchedEMVTagValueErrorCode;)
+ (NSInteger)misMatchedEMVTagValueErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger improperlyFormattedTagValueErrorCode;)
+ (NSInteger)improperlyFormattedTagValueErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger improperlyFormattedTLVDataErrorCode;)
+ (NSInteger)improperlyFormattedTLVDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneHasExistingOperationDelegateErrorCode;)
+ (NSInteger)laneHasExistingOperationDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredOperationDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredOperationDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCIsNotInitializedErrorCode;)
+ (NSInteger)iFCCIsNotInitializedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsCurrentlyIdleErrorCode;)
+ (NSInteger)laneIsCurrentlyIdleErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsCurrentlyBusyErrorCode;)
+ (NSInteger)laneIsCurrentlyBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDeviceDisconnectedErrorCode;)
+ (NSInteger)laneDeviceDisconnectedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneElementsMissingErrorCode;)
+ (NSInteger)laneElementsMissingErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOperationTypeErrorCode;)
+ (NSInteger)invalidOperationTypeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidLaneErrorCode;)
+ (NSInteger)invalidLaneErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cancelNotSupportedOnOperationError;)
+ (NSInteger)cancelNotSupportedOnOperationError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noOperationIdentifierReturnedErrorCode;)
+ (NSInteger)noOperationIdentifierReturnedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidAIDSelectionListReceivedFromReaderErrorCode;)
+ (NSInteger)invalidAIDSelectionListReceivedFromReaderErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger noCancellableOperationsFoundInLaneErrorCode;)
+ (NSInteger)noCancellableOperationsFoundInLaneErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger responseDeserializationNoIdentifierErrorCode;)
+ (NSInteger)responseDeserializationNoIdentifierErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger expectedResponsePayloadNotFoundErrorCode;)
+ (NSInteger)expectedResponsePayloadNotFoundErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger operationNotPreparedErrorCode;)
+ (NSInteger)operationNotPreparedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIsUnavailableErrorCode;)
+ (NSInteger)laneIsUnavailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger lanesBusyErrorCode;)
+ (NSInteger)lanesBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneIllegalStateErrorCode;)
+ (NSInteger)laneIllegalStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneReleaseTimeoutErrorCode;)
+ (NSInteger)laneReleaseTimeoutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger networkIsCurrentlyBusyErrorCode;)
+ (NSInteger)networkIsCurrentlyBusyErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceStatusUnavailableErrorCode;)
+ (NSInteger)deviceStatusUnavailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger voidIncompleteTransactionErrorCode;)
+ (NSInteger)voidIncompleteTransactionErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredLaneStatusDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredLaneStatusDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger laneDoesNotHaveRegisteredAttachDeviceDelegateErrorCode;)
+ (NSInteger)laneDoesNotHaveRegisteredAttachDeviceDelegateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceIsCurrentlyAttachedErrorCode;)
+ (NSInteger)deviceIsCurrentlyAttachedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceNoLaneAvailableErrorCode;)
+ (NSInteger)deviceNoLaneAvailableErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceIsNotDisconnectedErrorCode;)
+ (NSInteger)deviceIsNotDisconnectedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger functionalityNotImplementedErrorCode;)
+ (NSInteger)functionalityNotImplementedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger internalStateCorruptedErrorCode;)
+ (NSInteger)internalStateCorruptedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger moduleStateSuspendedErrorCode;)
+ (NSInteger)moduleStateSuspendedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger couldNotCreateXMLParserErrorCode;)
+ (NSInteger)couldNotCreateXMLParserErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger xmlParsingFailedToStart;)
+ (NSInteger)xmlParsingFailedToStart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger appConfigurationUnknownErrorCode;)
+ (NSInteger)appConfigurationUnknownErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataRequestCompletedWithNoDataErrorCode;)
+ (NSInteger)binDataRequestCompletedWithNoDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataFailedToSerializeErrorCode;)
+ (NSInteger)binDataFailedToSerializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger binDataInternalErrorErrorCode;)
+ (NSInteger)binDataInternalErrorErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataRequestCompletedWithNoDataErrorCode;)
+ (NSInteger)dccBinDataRequestCompletedWithNoDataErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataFailedToSerializeErrorCode;)
+ (NSInteger)dccBinDataFailedToSerializeErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dccBinDataInternalErrorErrorCode;)
+ (NSInteger)dccBinDataInternalErrorErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOfflineRequestIdErrorCode;)
+ (NSInteger)invalidOfflineRequestIdErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger invalidOfflineStateErrorCode;)
+ (NSInteger)invalidOfflineStateErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replayInProgressErrorCode;)
+ (NSInteger)replayInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replaySleepTimerErrorCode;)
+ (NSInteger)replaySleepTimerErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger replayShortCircuitTimerErrorCode;)
+ (NSInteger)replayShortCircuitTimerErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupErrorCode;)
+ (NSInteger)iFCCDeviceSetupErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupDataMissingErrorCode;)
+ (NSInteger)iFCCDeviceSetupDataMissingErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceScanNotSupported;)
+ (NSInteger)iFCCDeviceScanNotSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceSetupFailedErrorCode;)
+ (NSInteger)iFCCDeviceSetupFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionFailedErrorCode;)
+ (NSInteger)iFCCDeviceConnectionFailedErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionInProgressErrorCode;)
+ (NSInteger)iFCCDeviceConnectionInProgressErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger iFCCDeviceConnectionTimeoutErrorCode;)
+ (NSInteger)iFCCDeviceConnectionTimeoutErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger genericPALErrorCode;)
+ (NSInteger)genericPALErrorCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// iFCC Error Key Constants
SWIFT_CLASS("_TtC7iFCCKit21iFCCErrorKeyConstants")
@interface iFCCErrorKeyConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedLaneMappingCountKeyConstant;)
+ (NSString * _Nonnull)expectedLaneMappingCountKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualLaneMappingCountKeyConstant;)
+ (NSString * _Nonnull)actualLaneMappingCountKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidParameterNameKeyConstant;)
+ (NSString * _Nonnull)invalidParameterNameKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull specifiedOperationIdentifierKeyConstant;)
+ (NSString * _Nonnull)specifiedOperationIdentifierKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull currentOperationStateKeyConstant;)
+ (NSString * _Nonnull)currentOperationStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull httpErrorHTTPStatusCodeKeyConstant;)
+ (NSString * _Nonnull)httpErrorHTTPStatusCodeKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emvTagKeyConstant;)
+ (NSString * _Nonnull)emvTagKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tlvDataErrorReasonKeyConstant;)
+ (NSString * _Nonnull)tlvDataErrorReasonKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull illegalArgumentNameKeyConstant;)
+ (NSString * _Nonnull)illegalArgumentNameKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedIFCCStateKeyConstant;)
+ (NSString * _Nonnull)expectedIFCCStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualIFCCStateKeyConstant;)
+ (NSString * _Nonnull)actualIFCCStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expectedLaneStateKeyConstant;)
+ (NSString * _Nonnull)expectedLaneStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualLaneStateKeyConstant;)
+ (NSString * _Nonnull)actualLaneStateKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestedLaneActionKeyConstant;)
+ (NSString * _Nonnull)requestedLaneActionKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actualUrlKeyConstant;)
+ (NSString * _Nonnull)actualUrlKeyConstant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidParameterAnomaliesConstant;)
+ (NSString * _Nonnull)invalidParameterAnomaliesConstant SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a file logging output instance with assoicated details
SWIFT_CLASS("_TtC7iFCCKit21iFCCFileLoggingOutput")
@interface iFCCFileLoggingOutput : NSObject <iFCCLoggingOutput>
/// URL to store log files
@property (nonatomic, readonly, copy) NSURL * _Nonnull fileLocation;
/// prefix for file name, suffix is date, extension is log as in <prefix>-YYYY-MM-DD.log, default is “iFCC”
@property (nonatomic, readonly, copy) NSString * _Nonnull filePrefix;
/// number of days to keep log files on system, default is 7
@property (nonatomic, readonly) NSInteger daysToKeep;
/// number of days to store in one log file, default is one
@property (nonatomic, readonly) NSInteger daysPerLog;
/// maximum file size in megabytes for a log file, if the size limit is reached, the file is archived and a new one is created (has precedence over daysPerLog)
@property (nonatomic, readonly) NSUInteger maximumFileSizeInMB;
- (nullable instancetype)initWithFileLocation:(NSURL * _Nonnull)fileLocation filePrefix:(NSString * _Nonnull)filePrefix daysToKeep:(NSInteger)daysToKeep daysPerLog:(NSInteger)daysPerLog maximumFileSizeInMB:(NSUInteger)maximumFileSizeInMB OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Methods to receive events occurring during iFCC library initialization and operation
SWIFT_PROTOCOL("_TtP7iFCCKit26iFCCInitializationDelegate_")
@protocol iFCCInitializationDelegate
/// Notifies receiver initialization of iFCC has completed successfully.
- (void)initializationCompleted;
/// Notifies receiver initialization of iFCC has failed.
/// \param error The error that occurred, including what component failed and why.
///
- (void)initializationFailedWithError:(NSError * _Nonnull)error;
/// Notifies receiver deinitialization of iFCC has completed .
- (void)deinitializationCompleted;
@end


/// Methods to receive events associated with the processing of an iFCC operation.
SWIFT_PROTOCOL("_TtP7iFCCKit16iFCCLaneDelegate_")
@protocol iFCCLaneDelegate
/// Provides progress and status messages to the listener related to a specific operation previously initiated within the lane
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
/// \param progressType type of message
///
- (void)operationProgressUpdateForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane progressType:(enum OperationProgressType)progressType;
/// Provides the listener notification of approval of a previously initiated operation in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationApprovedWithResponse:(id <POSResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of decline of a previously initiated operation in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationDeclinedWithResponse:(id <POSResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Notifies the listener that a previously initiated operation within the lane has failed
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
/// \param error details of the error causing the failure
///
- (void)operationFailedForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Notifies the listener that a previously initiated operation within the lane has completed
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)operationCompletedForOperationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane is reconnecting
/// \param lane lane in which the associated device is reconnecting
///
- (void)deviceReconnectingWithLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane has reported an error
/// \param lane lane in which the associated device reported the error
///
/// \param error details of the error by the device
///
- (void)deviceErrorWithLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Notifies the listener that the device mapped to the lane has disconnected
/// \param lane lane from which the device disconnected
///
- (void)deviceDisconnectedWithLane:(NSString * _Nonnull)lane;
/// Notifies the listener that the device mapped to the lane has disconnected due to a system backgrounding notification
/// \param lane lane from which the device disconnected
///
- (void)deviceDisconnectedWhileBackgroundingWithLane:(NSString * _Nonnull)lane SWIFT_DEPRECATED_MSG("no longer supported, use deviceDisconnected");
/// Notifies the listener that a device mapped to the lane has connected
/// \param lane lane to which the device connected
///
- (void)deviceConnectedWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of successful battery status request
/// \param batteryStatus provides status of the device battery
///
/// \param lane lane in which the operation was run
///
- (void)requestBatteryStatusSucceededWithBatteryStatus:(id <DeviceBatteryStatus> _Nonnull)batteryStatus inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of  battery status request failure
/// \param error details of the battery status request failure
///
/// \param lane lane in which the operation was run
///
- (void)requestBatteryStatusFailedWithError:(NSError * _Nonnull)error inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device reset success
/// \param lane lane in which the reset succeeded
///
- (void)deviceResetSucceededWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device reset failed
/// \param lane lane in which the reset failed
///
/// \param error details of the reset failure
///
- (void)deviceResetFailedWithLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Provides the listener notification of device entering firmware update mode
/// \param lane lane in which the device entered firmware progress was updates
///
- (void)firmwareUpdateModeEnteredWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification that a device undergoing a firmware update has issued a progress update message
/// \param progressMessage the message associated with the progress update
///
/// \param lane lane of the device which issued the progress message
///
- (void)firmwareUpdateProgressUpdateWithProgressMessage:(NSString * _Nonnull)progressMessage inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device firmware update succeeded
/// \param lane lane in which the device firmware succeeded
///
- (void)firmwareUpdateSucceededWithLane:(NSString * _Nonnull)lane;
/// Provides the listener notification of device firmware update failed
/// \param lane lane in which the device firmware update failed
///
/// \param error details of the device firmware update failure
///
- (void)firmwareUpdateFailedInLane:(NSString * _Nonnull)lane error:(NSError * _Nonnull)error;
/// Provides the listener notification of device firmware update was cancelled
/// \param lane lane in which the device firmware update was cancelled
///
- (void)firmwareUpdateCanceledInLane:(NSString * _Nonnull)lane;
/// Provides the listener  a card read operation completed in the specified lane
/// \param response details of the operation result
///
/// \param operationIdentifier operation’s unique identifier
///
/// \param lane lane in which the operation was run
///
- (void)cardReadOperationResultWithResponse:(id <CardReadResponse> _Nonnull)response operationIdentifier:(id <iFCCOperationIdentifier> _Nonnull)operationIdentifier inLane:(NSString * _Nonnull)lane;
/// Provides the listener notification that the registered lane delegate is being released due to device setup
/// \param lane lane in which the device delegate is being released
///
- (void)laneDelegateReleasingWithLane:(NSString * _Nonnull)lane;
@end


/// Helper class for  bridging iFCC language enums and associated properties
SWIFT_CLASS("_TtC7iFCCKit18iFCCLanguageBridge")
@interface iFCCLanguageBridge : NSObject
/// Returns the device language enum for the given language name
/// \param fromString - the name of the language 
///
///
/// returns:
/// the iFCCDeviceLanguage associated with the name or the default of iFCCDeviceLanguage.english if the supplied fromString parameter value is not valid
+ (enum iFCCDeviceLanguage)deviceLanguageFromString:(NSString * _Nonnull)fromString SWIFT_WARN_UNUSED_RESULT;
/// Represents a list of the supported lanaguage names
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull supportedLanguageNames;)
+ (NSArray<NSString *> * _Nonnull)supportedLanguageNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class iFCCModuleLoggingLevel;
enum iFCCLoggingLevel : NSInteger;
enum iFCCLoggingModule : NSInteger;

/// Helper class for  bridging iFCC logging enums and associated properties
SWIFT_CLASS("_TtC7iFCCKit17iFCCLoggingBridge")
@interface iFCCLoggingBridge : NSObject
/// Creates an iFCCModuleLoggingLevel object for the specified module name and the level name
/// \param moduleName - the name of the module 
///
/// \param levelName - the name of the logging level 
///
///
/// returns:
/// A valid iFCCModuleLoggingLevel or nil if the moduleName or levelName is not valid
+ (iFCCModuleLoggingLevel * _Nullable)getiFCCModuleLoggingLevelWithModuleName:(NSString * _Nonnull)moduleName levelName:(NSString * _Nonnull)levelName SWIFT_WARN_UNUSED_RESULT;
/// Get the name of the specified logging level
/// \param level -  the specified iFCCLoggingLevel 
///
///
/// returns:
/// The name of the level
+ (NSString * _Nonnull)loggingLevelNameFor:(enum iFCCLoggingLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Get all of the iFCCLoggingLevel names
///
/// returns:
/// A string array containing the names of all of the iFCCLoggingLevels
+ (NSArray<NSString *> * _Nonnull)loggingLevelNames SWIFT_WARN_UNUSED_RESULT;
/// Get the name of the specified logging module
/// \param loggingModule -  the specified iFCCLoggingModule 
///
///
/// returns:
/// The name of the module
+ (NSString * _Nonnull)loggingModuleNameFor:(enum iFCCLoggingModule)loggingModule SWIFT_WARN_UNUSED_RESULT;
/// Get all of the iFCCLoggingModule names
///
/// returns:
/// A string array containing the names of all of the iFCCLoggingModules
+ (NSArray<NSString *> * _Nonnull)loggingModulesNames SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class iFCCLoggingLevels;

/// Represents the logging settings for iFCC
SWIFT_CLASS("_TtC7iFCCKit24iFCCLoggingConfiguration")
@interface iFCCLoggingConfiguration : NSObject
/// an array of outputs specifying where to write logging messages
@property (nonatomic, readonly, copy) NSArray<id <iFCCLoggingOutput>> * _Nonnull outputs;
/// settings for logging levels for modules within iFCC
@property (nonatomic, readonly, strong) iFCCLoggingLevels * _Nonnull levels;
@property (nonatomic, readonly) BOOL enableCommsLogging;
- (nonnull instancetype)initWithOutputs:(NSArray<id <iFCCLoggingOutput>> * _Nonnull)outputs levels:(iFCCLoggingLevels * _Nonnull)levels enableCommsLogging:(BOOL)enableCommsLogging OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Methods to receive events occurring during iFCC library initialization and operation
SWIFT_PROTOCOL("_TtP7iFCCKit19iFCCLoggingDelegate_")
@protocol iFCCLoggingDelegate
/// Provides logging messages
/// \param message The log message
///
- (void)writeWithMessage:(NSString * _Nonnull)message;
@end

/// Represents a heirarchical logging level for a log message
typedef SWIFT_ENUM(NSInteger, iFCCLoggingLevel, open) {
/// no logging
  iFCCLoggingLevelNone = 0,
/// error messages
  iFCCLoggingLevelError = 1,
/// warning messages
  iFCCLoggingLevelWarn = 2,
/// info messages
  iFCCLoggingLevelInfo = 3,
/// debug message
  iFCCLoggingLevelDebug = 4,
/// verbose message
  iFCCLoggingLevelVerbose = 5,
};


/// Represents logging level details for iFCC
SWIFT_CLASS("_TtC7iFCCKit17iFCCLoggingLevels")
@interface iFCCLoggingLevels : NSObject
/// default logging level if a module level is not supplied
@property (nonatomic, readonly) enum iFCCLoggingLevel defaultLevel;
/// represents non-default logging levels for modules
@property (nonatomic, readonly, copy) NSArray<iFCCModuleLoggingLevel *> * _Nullable customLevels;
- (nonnull instancetype)initWithDefaultLevel:(enum iFCCLoggingLevel)defaultLevel customLevels:(NSArray<iFCCModuleLoggingLevel *> * _Nullable)customLevels OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents iFCC Logging modules for assigning LogLevels
typedef SWIFT_ENUM(NSInteger, iFCCLoggingModule, open) {
/// Library Initialization
  iFCCLoggingModuleLibraryInitialization = 0,
/// Device Setup
  iFCCLoggingModuleDeviceSetup = 1,
/// Device Operation
  iFCCLoggingModuleDeviceOperation = 2,
/// Device Messaging
  iFCCLoggingModuleDeviceMessaging = 3,
/// FreeWay Operation
  iFCCLoggingModuleFreeWayOperation = 4,
/// Store and Forward Processing
  iFCCLoggingModuleStoreAndForward = 5,
/// Configuration Update
  iFCCLoggingModuleConfigurationUpdate = 6,
};



/// Represents a module and a logging level
SWIFT_CLASS("_TtC7iFCCKit22iFCCModuleLoggingLevel")
@interface iFCCModuleLoggingLevel : NSObject
/// name of the logging module
@property (nonatomic, readonly, getter=module) enum iFCCLoggingModule module_;
/// logging level for the module
@property (nonatomic, readonly) enum iFCCLoggingLevel level;
- (nonnull instancetype)initWithModule:(enum iFCCLoggingModule)module_ level:(enum iFCCLoggingLevel)level OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// iFCC Notification Key Constants
SWIFT_CLASS("_TtC7iFCCKit25iFCCNotificationConstants")
@interface iFCCNotificationConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusNotificationNameValue;)
+ (NSString * _Nonnull)binMgrStatusNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrErrorNotificationNameValue;)
+ (NSString * _Nonnull)binMgrErrorNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrErrorNotificationKey;)
+ (NSString * _Nonnull)binMgrErrorNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusNotificationKey;)
+ (NSString * _Nonnull)binMgrStatusNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrDateTimeNotificationKey;)
+ (NSString * _Nonnull)binMgrDateTimeNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataLoadedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataLoadedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataSavedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataSavedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataUpdateRequestedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataUpdateRequestedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataUpdateReceivedNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataUpdateReceivedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull binMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue;)
+ (NSString * _Nonnull)binMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusNotificationNameValue;)
+ (NSString * _Nonnull)dccBinMgrStatusNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrErrorNotificationNameValue;)
+ (NSString * _Nonnull)dccBinMgrErrorNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrErrorNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrErrorNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrStatusNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrDateTimeNotificationKey;)
+ (NSString * _Nonnull)dccBinMgrDateTimeNotificationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataLoadedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataLoadedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataSavedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataSavedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataUpdateRequestedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataUpdateRequestedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataUpdateReceivedNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataUpdateReceivedNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dccBinMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue;)
+ (NSString * _Nonnull)dccBinMgrStatusBINDataLastDownloadDateTimeNotificationStatusValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayStartedNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayStartedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayStartedNotificationCountValue;)
+ (NSString * _Nonnull)offlineReplayStartedNotificationCountValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayFailedNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayFailedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayFailedNotificationReason;)
+ (NSString * _Nonnull)offlineReplayFailedNotificationReason SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationOfflineId;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationOfflineId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationRequestId;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationRequestId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayIneligibleNotificationReason;)
+ (NSString * _Nonnull)offlineReplayIneligibleNotificationReason SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayCompleteNotificationNameValue;)
+ (NSString * _Nonnull)offlineReplayCompleteNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offlineReplayCompleteNotificationCountValue;)
+ (NSString * _Nonnull)offlineReplayCompleteNotificationCountValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull amaPALPackageStagedNotificationNameValue;)
+ (NSString * _Nonnull)amaPALPackageStagedNotificationNameValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull amaPALPackageStagedNotificationFileURL;)
+ (NSString * _Nonnull)amaPALPackageStagedNotificationFileURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIView;

SWIFT_PROTOCOL("_TtP7iFCCKit31iFCCPairingConfirmationDelegate_")
@protocol iFCCPairingConfirmationDelegate
/// Notifies the Pairing Device to display the LED sequence on the supplied view
/// @param containerView - an UIView derived object on which the LED sequence will be displayed
- (void)showLEDPairingSequenceInView:(UIView * _Nonnull)containerView;
/// Confirms the LED pairing sequence
- (void)confirmLEDPairingSequence;
/// Cancels the LED pairing sequence
- (void)cancelLEDPairingSequence;
/// Restarts the display of the LED pairing sequence
- (void)restartLEDPairingSequence;
@end


/// Central singleton element for pairing the RP457c
SWIFT_CLASS("_TtC7iFCCKit18iFCCPairingService")
@interface iFCCPairingService : NSObject
/// Used when making all calls to iFCCPairingService
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) iFCCPairingService * _Nonnull sharedInstance;)
+ (iFCCPairingService * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Called to begin pairing with an RUA Device
/// \param pairingDelegate Delegate receiving event notifications and status updates associated with the Bluetooth pairings a ROAM-based device
///
///
/// throws:
/// If an error is encountered during pairing (ex. iFCC not initialized) it will be thrown by this function
- (BOOL)initiatePairingWithRUADeviceWithPairingDelegate:(id <RUAPairingDelegate> _Nonnull)pairingDelegate error:(NSError * _Nullable * _Nullable)error;
/// Called to cancel a pairing that is in-progress
///
/// throws:
/// If an error is encountered during cancellation (ex. iFCC not in Pairing state) it will be thrown by this function
- (BOOL)cancelPairingAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Represents RBA card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20iFCCRBADeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface iFCCRBADeviceOptions : ICANetworkDeviceOptions
/// Creates an instance of iFCCRBADeviceOptions
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of iFCCRBADeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithHostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSInteger)portNumber deviceData:(NSData * _Nonnull)deviceData OBJC_DESIGNATED_INITIALIZER;
@end

enum iFCCROAMDeviceType : NSInteger;

/// Represents ROAM card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit21iFCCROAMDeviceOptions")
@interface iFCCROAMDeviceOptions : NSObject <iFCCCardReaderDeviceOptions>
@property (nonatomic, readonly) enum iFCCDeviceType deviceType;
@property (nonatomic, readonly) enum iFCCDeviceCommunicationInterface communicationInterface;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSData * _Nullable deviceData;
/// Creates an instance of iFCCROAMDeviceOptions for a USB connection
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)USB_OPTIONSWithRoamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions for a Bluetooth connection
/// \param identifier the device identifier
///
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)BLUETOOTH_OPTIONSWithIdentifier:(NSString * _Nonnull)identifier roamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions for an AUDIOJACK connection
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
+ (iFCCROAMDeviceOptions * _Nonnull)AUDIOJACK_OPTIONSWithDeviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of iFCCROAMDeviceOptions
/// \param identifier the device identifier
///
/// \param roamCommunicationInterface type of communication
///
/// \param roamDeviceType the type of ROAM device
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
/// \param contactEMVData a data object containing the XML formatted EMV Contact configuration for the card reader
///
/// \param contactlessEMVData a data object containing the XML formatted EMV Contactless configuration for the card reader
///
///
/// returns:
/// an instance of iFCCROAMDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier roamCommunicationInterface:(enum iFCCDeviceCommunicationInterface)roamCommunicationInterface roamDeviceType:(enum iFCCROAMDeviceType)roamDeviceType deviceData:(NSData * _Nonnull)deviceData contactEMVData:(NSData * _Nonnull)contactEMVData contactlessEMVData:(NSData * _Nullable)contactlessEMVData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactEMVDataDebugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactlessEMVDataDebugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, iFCCROAMDeviceType, open) {
  iFCCROAMDeviceTypeRp457cBT = 0,
  iFCCROAMDeviceTypeRp457cAJ = 1,
  iFCCROAMDeviceTypeMoby5500 = 2,
};


/// Methods to receive events occurring during iFCC scan
SWIFT_PROTOCOL("_TtP7iFCCKit23iFCCScanDevicesDelegate_")
@protocol iFCCScanDevicesDelegate
@optional
/// Provides notification to the receiver that iFCC device scan has completed successfully
/// \param availableDevices Devices available for use with iFCC
///
/// \param deviceType type of device scan returned
///
- (void)deviceScanCompletedWithAvailableDevices:(NSArray<NSString *> * _Nonnull)availableDevices deviceType:(NSString * _Nonnull)deviceType;
@end


/// Represents UPP card reader options to be used during device setup
SWIFT_CLASS("_TtC7iFCCKit20iFCCUPPDeviceOptions") SWIFT_DEPRECATED_MSG("Use NetworkDeviceOptions or BluetoothDeviceOptions for UPP and RBA devices")
@interface iFCCUPPDeviceOptions : ICANetworkDeviceOptions
/// Creates an instance of iFCCUPPDeviceOptions
/// \param hostAddress an IP address or the hostname of the card reader
///
/// \param portNumber the port number of the card reader
///
/// \param deviceData a data object containing XML formatted device specific settings for the card reader
///
///
/// returns:
/// an instance of iFCCUPPDeviceOptions adhering to the iFCCCardReaderDeviceOptions protocol
- (nonnull instancetype)initWithHostAddress:(NSString * _Nonnull)hostAddress portNumber:(NSInteger)portNumber deviceData:(NSData * _Nonnull)deviceData OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
